// Copyright 2020 The Go Language Server Authors
// SPDX-License-Identifier: BSD-3-Clause

syntax = "proto3";

package lsp.protocol.rpc;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

import "lsp/jsonrpc2/jsonrpc2.proto";
import "lsp/protocol/protocol.proto";
import "lsp/uri/uri.proto";

option cc_enable_arenas = true;
option csharp_namespace = "Lsp.Protocol.Rpc";
option go_package = "go.lsp.dev/api/protocol/rpc";
option java_multiple_files = true;
option java_outer_classname = "RpcProto";
option java_package = "dev.lsp.protocol.rpc";
option objc_class_prefix = "LSPPR";
option php_namespace = "Lsp\\Protocol\\Rpc";
option ruby_package = "Lsp::Protocol::Rpc";
option swift_prefix = "LSPPR";

// Language Server Protocol API.
service LanguageServerProtocol {
  option (google.api.default_host) = "localhost";

  // Cancel notification is the base protocol offers support for request cancellation. To cancel a
  // request, a CancelRequest notification message is sent.
  //
  // A request that got canceled still needs to return from the server and send a response back. It
  // can not be left open / hanging. This is in line with the JSON RPC protocol that requires that
  // every request sends a response back. In addition it allows for returning partial results on
  // cancel. If the request returns an error response on cancellation it is advised to set the error
  // code to [Codes.RequestCancelled][lsp.jsonrpc2.Codes].
  rpc Cancel(CancelRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/$/cancelRequest/*:cancel"
      body: "*"
    };
  }

  // Progress notification is the base protocol offers also support to report progress in a generic
  // fashion. This mechanism can be used to report any kind of progress including work done progress
  // (usually used to report progress in the user interface using a progress bar) and partial result
  // progress to support streaming of results.
  //
  // Progress is reported against a token. The token is different than the request ID which allows
  // to report progress out of band and also for notification.
  //
  // @since 3.15.0
  rpc Progress(ProgressRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/$/progress/*:progress"
      body: "*"
    };
  }

  // Initialize request is sent as the first request from the client to the server. If the server
  // receives a request or notification before the initialize request it should act as follows:
  //
  // - For a request the response should be an error with `code: -32002`. The message can be picked
  // by the server.
  // - Notifications should be dropped, except for the exit notification. This will allow the exit
  // of a server without an initialize request.
  //
  // Until the server has responded to the `initialize` request with an `InitializeResponse`, the
  // client must not send any additional requests or notifications to the server. In addition the
  // server is not allowed to send any requests or notifications to the client until it has
  // responded with an `InitializeResponse`, with the exception that during the initialize request
  // the server is allowed to send the notifications `window/showMessage`, `window/logMessage` and
  // `telemetry/event` as well as the `window/showMessageRequest` request to the client. In case the
  // client sets up a progress token in the initialize params (e.g. property `workDoneToken`) the
  // server is also allowed to use that token (and only that token) using the `$/progress`
  // notification sent from the server to the client.
  //
  // The initialize request may only be sent once.
  rpc Initialize(InitializeRequest) returns (InitializeResponse) {
    option (google.api.http) = {
      post: "/initialize/*:initialize"
      body: "*"
    };
  }

  // Initialized notification is sent from the client to the server after the client received the
  // result of the `initialize` request but before the client is sending any other request or
  // notification to the server.
  //
  // The server can use the `initialized` notification for example to dynamically register
  // capabilities.
  //
  // The `initialized` notification may only be sent once.
  rpc Initialized(InitializedRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/initialized/*:initialized"
      body: "*"
    };
  }

  // Shutdown request is sent from the client to the server.
  //
  // It asks the server to shut down, but to not exit (otherwise the response might not be delivered
  // correctly to the client). There is a separate exit notification that asks the server to exit.
  //
  // Clients must not send any notifications other than exit or requests to a server to which they
  // have sent a shutdown request.
  //
  // If a server receives requests after a shutdown request those requests should error with
  // `InvalidRequest`.
  rpc Shutdown(google.protobuf.Empty) returns (lsp.jsonrpc2.Error) {
    option (google.api.http) = {
      post: "/shutdown/*:shutdown"
      body: "*"
    };
  }

  // Exit notification to ask the server to exit its process.
  //
  // The server should exit with `success` code 0 if the shutdown request has been received before;
  // otherwise with `error` code 1.
  rpc Exit(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/exit/*:exit"
      body: "*"
    };
  }

  // LogTrace notification to log the trace of the serverâ€™s execution.
  //
  // The amount and content of these notifications depends on the current `trace` configuration.
  // If `trace` is `'off'`, the server should not send any `logTrace` notification. If `trace` is
  // `'message'`, the server should not add the `'verbose'` field in the logTraceRequest.
  //
  // `$/logTrace` should be used for systematic trace reporting. For single debugging messages, the
  // server should send window/logMessage notifications.
  rpc LogTrace(LogTraceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/$/logTrace/*:logTrace"
      body: "*"
    };
  }

  // SetTrace notification that should be used by the client to modify the trace setting of the
  // server.
  //
  // (-- api-linter: core::0134::synonyms=disabled
  //     api-linter: core::0136::http-method=disabled --)
  rpc SetTrace(SetTraceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/$/setTrace:setTrace"
      body: "*"
    };
    option (google.api.method_signature) = "value,update_mask";
  }

  // ShowMessage notification is the show message notification is sent from a server to a client to
  // ask the client to display a particular message in the user interface.
  rpc ShowMessage(ShowMessageRequestParams) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/window/showMessage:showMessage"
      body: "*"
    };
  }

  // ShowMessageRequest request is the show message request is sent from a server to a client to ask
  // the client to display a particular message in the user interface. In addition to the show
  // message notification the request allows to pass actions and to wait for an answer from the
  // client.
  rpc ShowMessageRequest(ShowMessageRequestRequest) returns (ShowMessageResponse) {
    option (google.api.http) = {
      post: "/window/showMessageRequest:showMessageRequest"
      body: "*"
    };
  }

  // LogMessage notification is the log message notification is sent from the server to the client
  // to ask the client to log a particular message.
  rpc LogMessage(LogMessageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/window/logMessage:logMessage"
      body: "*"
    };
  }

  // CreateWorkDoneProgress is the `window/workDoneProgress/create` request is sent from the server
  // to the client to ask the client to create a work done progress.
  //
  // (-- api-linter: core::0133::http-uri-parent=disabled
  //     api-linter: core::0133::http-body=disabled
  //     api-linter: core::0133::request-message-name=disabled
  //     api-linter: core::0133::response-message-name=disabled --)
  rpc CreateWorkDoneProgress(WorkDoneProgressCreateRequest) returns (lsp.jsonrpc2.Error) {
    option (google.api.http) = {
      post: "/window/workDoneProgress/create:createWorkDoneProgress"
      body: "*"
    };
    option (google.api.method_signature) = "parent,work_done_progress";
  }

  // CancelWorkDoneProgress is the `window/workDoneProgress/cancel` notification is sent from the
  // client to the server to cancel a progress initiated on the server side using the
  // `window/workDoneProgress/create`.
  rpc CancelWorkDoneProgress(WorkDoneProgressCancelRequest) returns (lsp.jsonrpc2.Error) {
    option (google.api.http) = {
      post: "/window/workDoneProgress/cancel:cancelWorkDoneProgress"
      body: "*"
    };
  };

  // Telemetry notification is the telemetry notification is sent from the server to the client to
  // ask the client to log a telemetry event.
  rpc Telemetry(google.protobuf.Any) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/telemetry/event:telemetry"
      body: "*"
    };
  }

  // WorkspaceFolders request is the workspace/workspaceFolders request is sent from the server to
  // the client to fetch the current open list of workspace folders.
  //
  // Returns null in the response if only a single file is open in the tool. Returns an empty array
  // if a workspace is open but no folders are configured.
  //
  // @since 3.6.0
  rpc WorkspaceFolders(google.protobuf.Empty) returns (WorkspaceFoldersResponse) {
    option (google.api.http) = {
      post: "/workspace/workspaceFolders:workspaceFolders"
      body: "*"
    };
  }

  // DidChangeWorkspaceFolders notification is the `workspace/didChangeWorkspaceFolders`
  // notification is sent from the client to the server to inform the server about workspace folder
  // configuration changes.
  //
  // The notification is sent by default if both client capability `workspace.workspaceFolders` and
  // the server capability `workspace.workspaceFolders.supported` are true; or if the server has
  // registered itself to receive this notification. To register for the
  // `workspace/didChangeWorkspaceFolders` send a client/registerCapability request from the server
  // to the client. The `registration` parameter must have a registrations item of the following
  // form, where id is a unique id used to unregister the capability (the example uses a UUID):
  //
  // @since 3.6.0
  rpc DidChangeWorkspaceFolders(DidChangeWorkspaceFoldersRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/workspace/didChangeWorkspaceFolders:didChangeWorkspaceFolders"
      body: "*"
    };
  }

  // DidChangeConfiguration a notification sent from the client to the server to signal the change
  // of configuration settings.
  rpc DidChangeConfiguration(DidChangeConfigurationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/workspace/didChangeConfiguration:didChangeConfiguration"
      body: "*"
    };
  }

  // Configuration request is the `workspace/configuration` request is sent from the server to the
  // client to fetch configuration settings from the client.
  //
  // The request can fetch several configuration settings in one roundtrip. The order of the
  // returned configuration settings correspond to the order of the passed `ConfigurationItems`
  // (e.g. the first item in the response is the result for the first configuration item in the
  // params).
  //
  // @since 3.6.0
  rpc Configuration(ConfigurationRequest) returns (ConfigurationResponse) {
    option (google.api.http) = {
      post: "/workspace/configuration:configuration"
      body: "*"
    };
  }

  // DidChangeWatchedFiles notification is the watched files notification is sent from the client to
  // the server when the client detects changes to files watched by the language client.
  //
  // It is recommended that servers register for these file events using the registration mechanism.
  // In former implementations clients pushed file events without the server actively asking for it.
  rpc DidChangeWatchedFiles(DidChangeWatchedFilesRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/workspace/didChangeWatchedFiles:didChangeWatchedFiles"
      body: "*"
    };
  }

  // WorkspaceSymbols request is the workspace symbol request is sent from the client to the server
  // to list project-wide symbols matching the query string.
  //
  // (-- api-linter: core::0136::http-uri-suffix=disabled --)
  rpc WorkspaceSymbols(ConfigurationRequest) returns (WorkspaceSymbolsResponse) {
    option (google.api.http) = {
      post: "/workspace/symbols:workspaceSymbols"
      body: "*"
    };
  }

  // ExecuteCommand is the `workspace/executeCommand` request is sent from the client to the server
  // to trigger command execution on the server.
  //
  // In most cases the server creates a `WorkspaceEdit` structure and applies the changes to the
  // workspace using the request `workspace/applyEdit` which is sent from the server to the client.
  rpc ExecuteCommand(ExecuteCommandParams) returns (ExecuteCommandResponse) {
    option (google.api.http) = {
      post: "/workspace/executeCommand:executeCommand"
      body: "*"
    };
  }

  // ApplyEdit request is sent from the server to the client to modify resource on the client side.
  rpc ApplyEdit(ApplyWorkspaceEditRequest) returns (ApplyWorkspaceEditResponse) {
    option (google.api.http) = {
      post: "/workspace/applyEdit:applyEdit"
      body: "*"
    };
  }

  // DidOpenTextDocument notification is the `DidOpenTextDocumentRequest` contain the language id
  // the document is associated with.
  //
  // If the language Id of a document changes, the client needs to send a `textDocument/didClose` to
  // the server followed by a `textDocument/didOpen` with the new language id if the server handles
  // the new language id as well.
  rpc DidOpenTextDocument(DidOpenTextDocumentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/textDocument/didOpen:didOpenTextDocument"
      body: "*"
    };
  }

  // DidChangeTextDocument notification is the document change notification is sent from the client
  // to the server to signal changes to a text document.
  //
  // Before a client can change a text document it must claim ownership of its content using the
  // textDocument/didOpen notification.
  //
  // In 2.0 the shape of the params has changed to include proper version numbers and language ids.
  rpc DidChangeTextDocument(DidChangeTextDocumentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/textDocument/didChange:didChangeTextDocument"
      body: "*"
    };
  }

  // WillSaveTextDocument notification is the document will save notification is sent from the
  // client to the server before the document is actually saved.
  rpc WillSaveTextDocument(WillSaveTextDocumentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/textDocument/willSave:willSaveTextDocument"
      body: "*"
    };
  }

  // WillSaveWaitUntilTextDocument request is the document will save request is sent from the client
  // to the server before the document is actually saved.
  //
  // The request can return an array of TextEdits which will be applied to the text document before
  // it is saved.
  //
  // Please note that clients might drop results if computing the text edits took too long or if a
  // server constantly fails on this request. This is done to keep the save fast and reliable.
  rpc WillSaveWaitUntilTextDocument(WillSaveTextDocumentRequest)
      returns (WillSaveTextDocumentResponse) {
    option (google.api.http) = {
      post: "/textDocument/willSaveWaitUntil:willSaveWaitUntilTextDocument"
      body: "*"
    };
  }

  // DidSaveTextDocument notification is the document save notification is sent from the client to
  // the server when the document was saved in the client.
  rpc DidSaveTextDocument(DidSaveTextDocumentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/textDocument/didSave:didSaveTextDocument"
      body: "*"
    };
  }

  // DidCloseTextDocument notification is the document close notification is sent from the client to
  // the server when the document got closed in the client.
  //
  // The documentâ€™s master now exists where the documentâ€™s Uri points to (e.g. if the documentâ€™s Uri
  // is a file Uri the master now exists on disk). As with the open notification the close
  // notification is about managing the documentâ€™s content.
  //
  // Receiving a close notification doesnâ€™t mean that the document was open in an editor before. A
  // close notification requires a previous open notification to be sent. Note that a serverâ€™s
  // ability to fulfill requests is independent of whether a text document is open or closed.
  rpc DidCloseTextDocument(DidCloseTextDocumentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/textDocument/didClose:didCloseTextDocument"
      body: "*"
    };
  }

  // PublishDiagnostics notification is the diagnostics notification are sent from the server to the
  // client to signal results of validation runs.
  rpc PublishDiagnostics(PublishDiagnosticsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/textDocument/publishDiagnostics:publishDiagnostics"
      body: "*"
    };
  }

  // Completion request is the Completion request is sent from the client to the server to compute
  // completion items at a given cursor position.
  //
  // Completion items are presented in the IntelliSense user interface. If computing full completion
  // items is expensive, servers can additionally provide a handler for the completion item resolve
  // request (â€˜completionItem/resolveâ€™).
  //
  // This request is sent when a completion item is selected in the user interface. A typical use
  // case is for example: the `textDocument/completion` request doesnâ€™t fill in the documentation
  // property for returned completion items since it is expensive to compute. When the item is
  // selected in the user interface then a `completionItem/resolve` request is sent with the
  // selected completion item as a parameter.
  //
  // The returned completion item should have the documentation property filled in. The request can
  // only delay the computation of the `detail` and `documentation` properties. Other properties
  // like `sortText`, `filterText`, `insertText`, `textEdit` and `additionalTextEdits` must be
  // provided in the `textDocument/completion` response and must not be changed during resolve.
  rpc Completion(CompletionRequest) returns (CompletionResponse) {
    option (google.api.http) = {
      post: "/textDocument/Completion:completion"
      body: "*"
    };
  }

  // CompletionItemResolve request is the request is sent from the client to the server to resolve
  // additional information for a given completion item.
  rpc CompletionItemResolve(CompletionItemResolveRequest) returns (CompletionItemResolveResponse) {
    option (google.api.http) = {
      post: "/completionItem/resolve:completionItemResolve"
      body: "*"
    };
  }

  // Hover Request is the hover request is sent from the client to the server to request hover
  // information at a given text document position.
  rpc Hover(HoverRequest) returns (HoverResponse) {
    option (google.api.http) = {
      post: "/textDocument/hover:hover"
      body: "*"
    };
  }

  // SignatureHelp request is the signature help request is sent from the client to the server to
  // request signature information at a given cursor position.
  rpc SignatureHelp(SignatureHelpRequest) returns (SignatureHelpResponse) {
    option (google.api.http) = {
      post: "/textDocument/signatureHelp:signatureHelp"
      body: "*"
    };
  }

  // GotoDeclaration request is the go to declaration request is sent from the client to the server
  // to resolve the declaration location of a symbol at a given text document position.
  //
  // The result type [LocationLinks][LocationLinks] got introduced with version 3.14.0 and depends
  // on the corresponding client capability `textDocument.declaration.linkSupport`.
  //
  // @since 3.14.0
  rpc GotoDeclaration(DeclarationRequest) returns (DeclarationResponse) {
    option (google.api.http) = {
      post: "/textDocument/declaration:declaration"
      body: "*"
    };
  }

  // GotoDefinition request is the go to definition request is sent from the client to the server to
  // resolve the definition location of a symbol at a given text document position.
  //
  // The result type [LocationLinks][LocationLinks] got introduced with version 3.14.0 and depends
  // on the corresponding client capability `textDocument.definition.linkSupport`.
  rpc GotoDefinition(DefinitionRequest) returns (DefinitionResponse) {
    option (google.api.http) = {
      post: "/textDocument/definition:definition"
      body: "*"
    };
  }

  // GotoTypeDefinition request is the go to type definition request is sent from the client to the
  // server to resolve the type definition location of a symbol at a given text document position.
  //
  // The result type [LocationLinks][LocationLinks] got introduced with version 3.14.0 and depends
  // on the corresponding client capability `textDocument.typeDefinition.linkSupport`.
  //
  // @since 3.6.0
  rpc GotoTypeDefinition(TypeDefinitionRequest) returns (TypeDefinitionResponse) {
    option (google.api.http) = {
      post: "/textDocument/definition:definition"
      body: "*"
    };
  }

  // GotoImplementation request is the go to implementation request is sent from the client to the
  // server to resolve the implementation location of a symbol at a given text document position.
  //
  // The result type [LocationLinks][LocationLinks] got introduced with version 3.14.0 and depends
  // on the corresponding client capability `textDocument.implementation.linkSupport`.
  //
  // @since 3.6.0
  rpc GotoImplementation(ImplementationRequest) returns (ImplementationResponse) {
    option (google.api.http) = {
      post: "/textDocument/implementation:implementation"
      body: "*"
    };
  }

  // FindReferences request is the references request is sent from the client to the server to
  // resolve project-wide references for the symbol denoted by the given text document position.
  rpc FindReferences(ReferenceRequest) returns (ReferenceResponse) {
    option (google.api.http) = {
      post: "/textDocument/references:references"
      body: "*"
    };
  }

  // DocumentHighlights request is the document highlight request is sent from the client to the
  // server to resolve a document highlights for a given text document position.
  //
  // For programming languages this usually highlights all references to the symbol scoped to this
  // file. However we kept `textDocument/documentHighlight` and `textDocument/references` separate
  // requests since the first one is allowed to be more fuzzy.
  //
  // Symbol matches usually have a DocumentHighlightKind of `Read` or `Write` whereas fuzzy or
  // textual matches use `Text` as the kind.
  rpc DocumentHighlights(DocumentHighlightRequest) returns (DocumentHighlightsResponse) {
    option (google.api.http) = {
      post: "/textDocument/documentHighlight:documentHighlight"
      body: "*"
    };
  }

  // DocumentSymbols request is the document symbol request is sent from the client to the server.
  //
  // The returned result is either
  //
  // - SymbolInformation[] which is a flat list of all symbols found in a given text document. Then
  // neither the symbolâ€™s location range nor the symbolâ€™s container name should be used to infer a
  // hierarchy.
  //
  // - DocumentSymbol[] which is a hierarchy of symbols found in a given text document.
  rpc DocumentSymbols(DocumentSymbolRequest) returns (DocumentSymbolResponse) {
    option (google.api.http) = {
      post: "/textDocument/documentSymbol:documentSymbol"
      body: "*"
    };
  }

  // CodeAction request is the code action request is sent from the client to the server to compute
  // commands for a given text document and range.
  //
  // These commands are typically code fixes to either fix problems or to beautify/refactor code.
  //
  // The result of a `textDocument/codeAction` request is an array of `Command` literals which are
  // typically presented in the user interface. To ensure that a server is useful in many clients
  // the commands specified in a code actions should be handled by the server and not by the client
  // (see `workspace/executeCommand` and `ServerCapabilities.executeCommandProvider`). If the client
  // supports providing edits with a code action then the mode should be used.
  //
  // When the command is selected the server should be contacted again (via the
  // `workspace/executeCommand`) request to execute the command.
  //
  // Since version 3.8.0: support for CodeAction literals to enable the following scenarios:
  //
  // - the ability to directly return a workspace edit from the code action request. This avoids
  // having another server roundtrip to execute an actual code action. However server providers
  // should be aware that if the code action is expensive to compute or the edits are huge it might
  // still be beneficial if the result is simply a command and the actual edit is only computed when
  // needed.
  //
  // - the ability to group code actions using a kind. Clients are allowed to ignore that
  // information. However it allows them to better group code action for example into corresponding
  // menus (e.g. all refactor code actions into a refactor menu).
  //
  // Clients need to announce their support for code action literals (e.g. literals of type
  // `CodeAction`) and code action kinds via the corresponding client capability
  // `codeAction.codeActionLiteralSupport`.
  rpc CodeAction(CodeActionRequest) returns (CodeActionResponse) {
    option (google.api.http) = {
      post: "/textDocument/codeAction:codeAction"
      body: "*"
    };
  }

  // CodeLens request is the code lens request is sent from the client to the server to compute code
  // lenses for a given text document.
  rpc CodeLens(CodeLensRequest) returns (CodeLensResponse) {
    option (google.api.http) = {
      post: "/textDocument/codeLens:codeLens"
      body: "*"
    };
  }

  // CodeLensResolve request is the code lens resolve request is sent from the client to the server
  // to resolve the command for a given code lens item.
  rpc CodeLensResolve(CodeLensResolveRequest) returns (CodeLensResolveResponse) {
    option (google.api.http) = {
      post: "/codeLens/resolve:codeLensResolve"
      body: "*"
    };
  }

  // DocumentLink request is the document links request is sent from the client to the server to
  // request the location of links in a document.
  rpc DocumentLink(DocumentLinkRequest) returns (DocumentLinkResponse) {
    option (google.api.http) = {
      post: "/textDocument/documentLink:documentLink"
      body: "*"
    };
  }

  // DocumentLinkResolve request is the document link resolve request is sent from the client to the
  // server to resolve the target of a given document link.
  rpc DocumentLinkResolve(DocumentLinkResolveRequest) returns (DocumentLinkResolveResponse) {
    option (google.api.http) = {
      post: "/documentLink/resolve:documentLinkResolve"
      body: "*"
    };
  }

  // DocumentColor request is the document color request is sent from the client to the server to
  // list all color references found in a given text document. Along with the range, a color value
  // in RGB is returned.
  //
  // Clients can use the result to decorate color references in an editor. For example:
  //
  // - Color boxes showing the actual color next to the reference
  //
  // - Show a color picker when a color reference is edited
  //
  // @since 3.6.0
  rpc DocumentColor(DocumentColorRequest) returns (DocumentColorResponse) {
    option (google.api.http) = {
      post: "/textDocument/documentColor:documentColor"
      body: "*"
    };
  }

  // ColorPresentation request is the color presentation request is sent from the client to the
  // server to obtain a list of presentations for a color value at a given location. Clients can use
  // the result to
  //
  // - modify a color reference.
  // - show in a color picker and let users pick one of the presentations
  //
  // This request has no special capabilities and registration options since it is send as a resolve
  // request for the `textDocument/documentColor` request.
  //
  // @since 3.6.0
  rpc ColorPresentation(ColorPresentationRequest) returns (ColorPresentationResponse) {
    option (google.api.http) = {
      post: "/textDocument/colorPresentation:colorPresentation"
      body: "*"
    };
  }

  // DocumentFormatting request is the document formatting request is sent from the client to the
  // server to format a whole document.
  rpc DocumentFormatting(DocumentFormattingRequest) returns (DocumentFormattingResponse) {
    option (google.api.http) = {
      post: "/textDocument/formatting:formatting"
      body: "*"
    };
  }

  // DocumentRangeFormatting Request is the document range formatting request is sent from the
  // client to the server to format a given range in a document.
  rpc DocumentRangeFormatting(DocumentRangeFormattingRequest)
      returns (DocumentRangeFormattingResponse) {
    option (google.api.http) = {
      post: "/textDocument/rangeFormatting:rangeFormatting"
      body: "*"
    };
  }

  // OnTypeFormatting request is the document on type formatting request is sent from the client to
  // the server to format parts of the document during typing.
  rpc OnTypeFormatting(DocumentOnTypeFormattingRequest) returns (DocumentOnTypeFormattingResponse) {
    option (google.api.http) = {
      post: "/textDocument/onTypeFormatting:onTypeFormatting"
      body: "*"
    };
  }

  // Rename request is the rename request is sent from the client to the server to ask the server to
  // compute a workspace change so that the client can perform a workspace-wide rename of a symbol.
  rpc Rename(RenameRequest) returns (RenameResponse) {
    option (google.api.http) = {
      post: "/textDocument/rename:rename"
      body: "*"
    };
  }

  // PrepareRename request is the prepare rename request is sent from the client to the server to
  // setup and test the validity of a rename operation at a given location.
  //
  // @since 3.12.0
  rpc PrepareRename(PrepareRenameRequest) returns (PrepareRenameResponse) {
    option (google.api.http) = {
      post: "/textDocument/prepareRename:prepareRename"
      body: "*"
    };
  }

  // FoldingRange request is the folding range request is sent from the client to the server to
  // return all folding ranges found in a given text document.
  //
  // @since 3.10.0
  rpc FoldingRange(FoldingRangeRequest) returns (FoldingRangeResponse) {
    option (google.api.http) = {
      post: "/textDocument/foldingRange:foldingRange"
      body: "*"
    };
  }

  // SelectionRange request is the selection range request is sent from the client to the server to
  // return suggested selection ranges at an array of given positions.
  //
  // A selection range is a range around the cursor position which the user might be interested in
  // selecting. A selection range in the return array is for the position in the provided parameters
  // at the same index. Therefore positions[i] must be contained in result[i].range.
  //
  // Typically, but not necessary, selection ranges correspond to the nodes of the syntax tree.
  //
  // @since 3.15.0
  rpc SelectionRange(SelectionRangeRequest) returns (SelectionRangeResponse) {
    option (google.api.http) = {
      post: "/textDocument/selectionRange:selectionRange"
      body: "*"
    };
  }

  // PrepareCallHierarchy request is the call hierarchy request is sent from the client to the
  // server to return a call hierarchy for the language element of given text document positions.
  //
  // The call hierarchy requests are executed in two steps:
  //
  // - first a call hierarchy item is resolved for the given text document position
  //
  // - for a call hierarchy item the incoming or outgoing call hierarchy items are resolved.
  //
  // @since 3.16.0
  rpc PrepareCallHierarchy(CallHierarchyPrepareRequest) returns (CallHierarchyPrepareResponse) {
    option (google.api.http) = {
      post: "/textDocument/prepareCallHierarchy:prepareCallHierarchy"
      body: "*"
    };
  }

  // CallHierarchyIncomingCalls request is sent from the client to the server to resolve incoming
  // calls for a given call hierarchy item.
  //
  // The request doesnâ€™t define its own client and server capabilities. It is only issued if a
  // server registers for the `textDocument/prepareCallHierarchy` request.
  //
  // @since 3.16.0
  rpc CallHierarchyIncomingCalls(CallHierarchyIncomingCallsRequest)
      returns (CallHierarchyIncomingCallsResponse) {
    option (google.api.http) = {
      post: "/callHierarchy/incomingCalls:callHierarchyIncomingCalls"
      body: "*"
    };
  }

  // CallHierarchyOutgoingCalls is the request is sent from the client to the server to resolve
  // outgoing calls for a given call hierarchy item.
  //
  // The request doesnâ€™t define its own client and server capabilities. It is only issued if a
  // server registers for the textDocument/prepareCallHierarchy request.
  //
  // @since 3.16.0
  rpc CallHierarchyOutgoingCalls(CallHierarchyOutgoingCallsRequest)
      returns (CallHierarchyOutgoingCallsResponse) {
    option (google.api.http) = {
      post: "/callHierarchy/outgoingCalls:callHierarchyOutgoingCalls"
      body: "*"
    };
  }
}

// CancelRequest represents a cancel notification params.
message CancelRequest {
  // Required. The request id to cancel.
  int32 id = 1 [(google.api.field_behavior) = REQUIRED];
}

// ProgressToken is the report progress token.
message ProgressToken {
  // Required.
  int32 token = 1 [(google.api.field_behavior) = REQUIRED];
}

// ProgressRequest represents a progress notification params.
//
// @since 3.15.0
message ProgressRequest {
  // Required. The progress token provided by the client or server.
  ProgressToken token = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. The progress data.
  google.protobuf.Any value = 2 [(google.api.field_behavior) = REQUIRED];
}

// WorkDoneProgressParams a parameter literal used to pass a work done progress token.
message WorkDoneProgressParams {
  // An optional token that a server can use to report work done progress.
  ProgressToken work_done_token = 1 [(google.api.field_behavior) = REQUIRED];
}

// PartialResultParams a parameter literal used to pass a partial result token.
message PartialResultParams {
  // An optional token that a server can use to report partial results (e.g. streaming) to
  // the client.
  int32 partial_result_token = 1;
}

// InitializeRequest is the sent as the first request from the client to the server. If the server
// receives a request or notification before the initialize request it should act as follows:
//
// - For a request the response should be an error with code: -32002. The message can be picked by
// the server.
// - Notifications should be dropped, except for the exit notification. This will allow the exit of
// a server without an initialize request.
//
// Until the server has responded to the initialize request with an InitializeResponse, the client
// must not send any additional requests or notifications to the server.
//
// In addition the server is not allowed to send any requests or notifications to the client until
// it has responded with an InitializeResponse, with the exception that during the initialize
// request the server is allowed to send the notifications window/showMessage, window/logMessage and
// telemetry/event as well as the window/showMessageRequest request to the client.
//
// In case the client sets up a progress token in the initialize params (e.g. property
// workDoneToken) the server is also allowed to use that token (and only that token) using the
// $/progress notification sent from the server to the client.
//
// The initialize request may only be sent once.
message InitializeRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;

  // Required. The process Id of the parent process that started
  // the server. Is null if the process has not been started by another process.
  // If the parent process is not alive then the server should exit (see exit notification) its
  // process.
  int32 process_id = 2 [(google.api.field_behavior) = REQUIRED];

  // (-- api-linter: core::0140::abbreviations=disabled
  //     api-linter: core::0123::resource-annotation=disabled --)
  message ClientInfo {
    // The name of the client as defined by the client.
    string name = 1 [(google.api.field_behavior) = REQUIRED];

    // Optional. The client's version as defined by the client.
    google.protobuf.StringValue version = 2;
  }

  // Optional. Information about the client.
  //
  // @since 3.15.0
  ClientInfo client_info = 3;

  // Optional. The rootPath of the workspace. Is null
  // if no folder is open.
  //
  // Use rootUri instead of.
  google.protobuf.StringValue root_path = 4 [deprecated = true];

  // The rootUri of the workspace. Is null if no
  // folder is open. If both `rootPath` and `rootUri` are set
  // `rootUri` wins.
  //
  // nullable
  lsp.uri.DocumentURI root_uri = 5 [(google.api.field_behavior) = REQUIRED];

  // Optional. User provided initialization options.
  google.protobuf.Any initialization_options = 6;

  // Required. The capabilities provided by the client (editor or tool)
  ClientCapabilities capabilities = 7 [(google.api.field_behavior) = REQUIRED];

  // Optional. The initial trace setting. If omitted trace is disabled ('off').
  lsp.protocol.TraceValue trace = 8;

  // Optional. The workspace folders configured in the client when the server starts.
  // This property is only available if the client supports workspace folders.
  // It can be `null` if the client supports workspace folders but none are
  // configured.
  //
  // @since 3.6.0
  //
  // nullable
  repeated WorkspaceFolder workspace_folders = 9;
}

// InitializedRequest is the initialized notification is sent from the client to the server after
// the client received the result of the initialize request but before the client is sending any
// other request or notification to the server. The server can use the initialized notification for
// example to dynamically register capabilities. The initialized notification may only be sent once.
message InitializedRequest {}

// LogTraceRequest represents a `$/logTrace` notification params.
message LogTraceRequest {
  // The message to be logged.
  string message = 1;

  // Optional. Additional information that can be computed if the `trace` configuration is set to
  // `'verbose'`.
  google.protobuf.StringValue verbose = 2;
}

// SetTraceRequest represents a `$/setTrace` notification params.
message SetTraceRequest {
  // The new value that should be assigned to the trace setting.
  lsp.protocol.TraceValue value = 1 [(google.api.field_behavior) = REQUIRED];
}

// ShowMessageResponse represents a ShowMessage response.
message ShowMessageResponse {
  oneof show_message_response {
    MessageActionItem message_action_item = 1;

    google.protobuf.NullValue empty = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// WorkspaceFoldersResponse represents a WorkspaceFolders response.
message WorkspaceFoldersResponse {
  message WorkspaceFolders {
    repeated WorkspaceFolder workspace_folders = 1;
  }

  oneof workspace_folders_response {
    WorkspaceFolders workspace_folders = 1;

    google.protobuf.NullValue empty = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// ConfigurationResponse represents a Configuration response.
message ConfigurationResponse {
  message Anys {
    repeated google.protobuf.Any anys = 1;
  }

  oneof configuration_response {
    Anys anys = 1;

    lsp.jsonrpc2.Error error = 2;
  }
}

// WorkspaceSymbolsResponse represents a WorkspaceSymbols response.
message WorkspaceSymbolsResponse {
  message SymbolInformations {
    repeated SymbolInformation symbol_informations = 1;
  }

  oneof workspace_symbols_response {
    SymbolInformations symbol_informations = 1;

    lsp.jsonrpc2.Error error = 2;
  }
}

// ExecuteCommandResponse represents a ExecuteCommand response.
message ExecuteCommandResponse {
  oneof execute_command {
    google.protobuf.Any any = 1;

    lsp.jsonrpc2.Error error = 2;
  }
}

// TextEdits represents a list of TextEdit.
message TextEdits {
  repeated TextEdit text_edit = 1;
}

// WillSaveTextDocumentResponse represents a WillSaveTextDocument response.
message WillSaveTextDocumentResponse {
  oneof will_save_text_document_response {
    TextEdits text_edits = 1;

    lsp.jsonrpc2.Error error = 2;
  }
}

// CompletionItems represents a list of CompletionItem.
message CompletionItems {
  repeated CompletionItems completion_items = 1;
}

// CompletionResponse represents a Completion response.
message CompletionResponse {
  oneof completion_response {
    CompletionItems completion_items = 1;

    CompletionList completion_list = 2;

    google.protobuf.NullValue empty = 3;

    lsp.jsonrpc2.Error error = 4;
  }
}

// HoverResponse represents a Hover response.
message HoverResponse {
  oneof completion_response {
    Hover hover = 1;

    google.protobuf.NullValue empty = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// CompletionItemResolveRequest represents a CompletionItemResolve request.
message CompletionItemResolveRequest {
  CompletionItems completion_items = 1;
}

// CompletionItemResolveRequest represents a CompletionItemResolve response.
message CompletionItemResolveResponse {
  oneof completion_item_resolve_response {
    CompletionItems completion_items = 1;

    lsp.jsonrpc2.Error error = 2;
  }
}

// SignatureHelpResponse represents a SignatureHelp response.
message SignatureHelpResponse {
  oneof completion_item_resolve_response {
    SignatureHelp signature_help = 1;

    google.protobuf.NullValue empty = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// Locations represents a list of Location.
message Locations {
  repeated Locations locations = 1;
}

// LocationLinks represents a list of LocationLink.
message LocationLinks {
  repeated LocationLinks location_links = 1;
}

// DeclarationResponse represents a Declaration response.
message DeclarationResponse {
  message Result {
    Location location = 1;

    Locations locations = 2;

    LocationLinks location_links = 3;

    google.protobuf.NullValue empty = 4;
  }

  message PartialResult {
    Locations locations = 1;

    LocationLinks location_links = 2;
  }

  oneof declaration_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// DefinitionResponse represents a Definition response.
message DefinitionResponse {
  message Result {
    Location location = 1;

    Locations locations = 2;

    LocationLinks location_links = 3;

    google.protobuf.NullValue empty = 4;
  }

  message PartialResult {
    Locations locations = 1;

    LocationLinks location_links = 2;
  }

  oneof definition_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// TypeDefinitionResponse represents a TypeDefinition response.
message TypeDefinitionResponse {
  message Result {
    Location location = 1;

    Locations locations = 2;

    LocationLinks location_links = 3;

    google.protobuf.NullValue empty = 4;
  }

  message PartialResult {
    Locations locations = 1;

    LocationLinks location_links = 2;
  }

  oneof type_definition_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// ImplementationResponse represents a Implementation response.
message ImplementationResponse {
  message Result {
    Location location = 1;

    Locations locations = 2;

    LocationLinks location_links = 3;

    google.protobuf.NullValue empty = 4;
  }

  message PartialResult {
    Locations locations = 1;

    LocationLinks location_links = 2;
  }

  oneof implementation_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// ReferenceResponse represents a Reference response.
message ReferenceResponse {
  message Result {
    Locations locations = 1;

    google.protobuf.NullValue empty = 2;
  }

  message PartialResult {
    Locations locations = 1;
  }

  oneof reference_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// DocumentHighlightsResponse represents a DocumentHighlights response.
message DocumentHighlightsResponse {
  message Result {
    repeated DocumentHighlight document_highlights = 1;

    google.protobuf.NullValue empty = 2;
  }

  message PartialResult {
    repeated DocumentHighlight document_highlights = 1;
  }

  oneof document_highlights_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// DocumentSymbolResponse represents a DocumentSymbol response.
message DocumentSymbolResponse {
  message Result {
    repeated DocumentSymbol document_symbols = 1;

    repeated SymbolInformation symbol_informations = 2;

    google.protobuf.NullValue empty = 3;
  }

  message PartialResult {
    repeated DocumentSymbol document_symbols = 1;

    repeated SymbolInformation symbol_informations = 2;
  }

  oneof document_symbol_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// CodeActionResponse represents a CodeAction response.
message CodeActionResponse {
  message Result {
    repeated Command commands = 1;

    repeated CodeAction code_actions = 2;

    google.protobuf.NullValue empty = 3;
  }

  message PartialResult {
    repeated Command commands = 1;

    repeated CodeAction code_actions = 2;
  }

  oneof code_action_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// CodeLensResponse represents a CodeLens response.
message CodeLensResponse {
  message Result {
    repeated CodeLens code_lens = 1;

    google.protobuf.NullValue empty = 2;
  }

  message PartialResult {
    repeated CodeLens code_lens = 1;
  }

  oneof code_lens_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// CodeLensResolveRequest represents a CodeLensResolveRequest request.
message CodeLensResolveRequest {
  CodeLens code_lens = 1;
}

// CodeLensResolveResponse represents a CodeLensResolve response.
message CodeLensResolveResponse {
  oneof code_lens_resolve_response {
    CodeLens code_lens = 1;

    lsp.jsonrpc2.Error error = 3;
  }
}

// DocumentLinkResponse represents a DocumentLink response.
message DocumentLinkResponse {
  message Result {
    repeated DocumentLink document_links = 1;

    google.protobuf.NullValue empty = 2;
  }

  message PartialResult {
    repeated DocumentLink document_links = 1;
  }

  oneof document_link_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// DocumentLinkResolveRequest represents a DocumentLinkResolveRequest request.
message DocumentLinkResolveRequest {
  DocumentLink document_link = 1;
}

// DocumentLinkResolveResponse represents a DocumentLinkResolve response.
message DocumentLinkResolveResponse {
  oneof document_link_resolve_response {
    DocumentLink document_link = 1;

    lsp.jsonrpc2.Error error = 3;
  }
}

// DocumentColorResponse represents a DocumentColor response.
message DocumentColorResponse {
  message Result {
    repeated ColorInformation color_informations = 1;
  }

  message PartialResult {
    repeated ColorInformation color_informations = 1;
  }

  oneof document_color_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// ColorPresentationResponse represents a ColorPresentation response.
message ColorPresentationResponse {
  message Result {
    repeated ColorPresentation color_presentations = 1;
  }

  message PartialResult {
    repeated ColorPresentation color_presentations = 1;
  }

  oneof color_presentation_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// DocumentFormattingResponse represents a DocumentFormatting response.
message DocumentFormattingResponse {
  oneof document_formatting_response {
    TextEdit text_edit = 1;

    google.protobuf.NullValue empty = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// DocumentRangeFormattingResponse represents a DocumentRangeFormatting response.
message DocumentRangeFormattingResponse {
  oneof documentrange_formatting_response {
    TextEdit text_edit = 1;

    google.protobuf.NullValue empty = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// DocumentOnTypeFormattingResponse represents a OnTypeFormatting response.
message DocumentOnTypeFormattingResponse {
  oneof document_on_type_formatting_response {
    TextEdit text_edit = 1;

    google.protobuf.NullValue empty = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// RenameResponse represents a Rename response.
message RenameResponse {
  oneof rename_response {
    WorkspaceEdit workspace_edit = 1;

    google.protobuf.NullValue empty = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// PrepareRenameResponse represents a PrepareRename response.
message PrepareRenameResponse {
  message Result {
    Range range = 1;

    string place_holder = 2;
  }
  oneof prepare_rename_response {
    Range range = 1;

    Result result = 2;

    google.protobuf.NullValue empty = 3;

    lsp.jsonrpc2.Error error = 4;
  }
}

// FoldingRangeResponse represents a FoldingRange response.
message FoldingRangeResponse {
  message Result {
    repeated FoldingRange folding_ranges = 1;

    google.protobuf.NullValue empty = 2;
  }

  message PartialResult {
    repeated FoldingRange folding_ranges = 1;
  }

  oneof folding_range_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// SelectionRangeResponse represents a SelectionRangeResponse response.
message SelectionRangeResponse {
  message Result {
    repeated SelectionRange selection_ranges = 1;

    google.protobuf.NullValue empty = 2;
  }

  message PartialResult {
    repeated SelectionRange selection_ranges = 1;
  }

  oneof selection_range_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// CallHierarchyPrepareResponse represents a PrepareCallHierarchy response.
message CallHierarchyPrepareResponse {
  message Result {
    repeated CallHierarchyItem call_hierarchy_items = 1;

    google.protobuf.NullValue empty = 2;
  }

  oneof call_hierarchy_prepare_response {
    Result result = 1;

    lsp.jsonrpc2.Error error = 3;
  }
}

// CallHierarchyIncomingCallsResponse represents a CallHierarchyIncomingCalls response.
message CallHierarchyIncomingCallsResponse {
  message Result {
    repeated CallHierarchyIncomingCall call_hierarchy_incoming_calls = 1;

    google.protobuf.NullValue empty = 2;
  }

  message PartialResult {
    repeated CallHierarchyIncomingCall call_hierarchy_incoming_calls = 1;
  }

  oneof call_hierarchy_incoming_calls_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// CallHierarchyIncomingCallsResponse represents a CallHierarchyOutgoingCalls response.
message CallHierarchyOutgoingCallsResponse {
  message Result {
    repeated CallHierarchyOutgoingCall call_hierarchy_outgoing_calls = 1;

    google.protobuf.NullValue empty = 2;
  }

  message PartialResult {
    repeated CallHierarchyOutgoingCall call_hierarchy_outgoing_calls = 1;
  }

  oneof call_hierarchy_outgoing_calls_response {
    Result result = 1;

    PartialResult partial_result = 2;

    lsp.jsonrpc2.Error error = 3;
  }
}

// TextDocumentClientCapabilities define capabilities the editor / tool provides on text documents.
message TextDocumentClientCapabilities {
  TextDocumentSyncClientCapabilities synchronization = 1 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/completion` request.
  CompletionClientCapabilities completion = 2 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/hover` request.
  HoverClientCapabilities hover = 3 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/signatureHelp` request.
  SignatureHelpClientCapabilities signature_help = 4 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/declaration` request.
  //
  // @since 3.14.0
  DeclarationClientCapabilities declaration = 5 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/definition` request.
  DefinitionClientCapabilities definition = 6 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/typeDefinition` request.
  //
  // @since 3.6.0
  TypeDefinitionClientCapabilities type_definition = 7 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/implementation` request.
  //
  // @since 3.6.0
  ImplementationClientCapabilities implementation = 8 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/references` request.
  ReferenceClientCapabilities references = 9 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/documentHighlight` request.
  DocumentHighlightClientCapabilities document_highlight = 10
      [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/documentSymbol` request.
  DocumentSymbolClientCapabilities document_symbol = 11 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/codeAction` request.
  CodeActionClientCapabilities code_action = 12 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/codeLens` request.
  CodeLensClientCapabilities code_lens = 13 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/documentLink` request.
  DocumentLinkClientCapabilities document_link = 14 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/documentColor` and the
  // `textDocument/colorPresentation` request.
  //
  // @since 3.6.0
  DocumentColorClientCapabilities color_provider = 15 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/formatting` request.
  DocumentFormattingClientCapabilities formatting = 16 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/rangeFormatting` request.
  DocumentRangeFormattingClientCapabilities range_formatting = 17
      [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/onTypeFormatting` request.
  DocumentOnTypeFormattingClientCapabilities on_type_formatting = 18
      [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/rename` request.
  RenameClientCapabilities rename = 19 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/publishDiagnostics` notification.
  PublishDiagnosticsClientCapabilities publish_diagnostics = 20
      [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/foldingRange` request.
  //
  // @since 3.10.0
  FoldingRangeClientCapabilities folding_range = 21 [(google.api.field_behavior) = OPTIONAL];

  // Capabilities specific to the `textDocument/selectionRange` request.
  //
  // @since 3.15.0
  SelectionRangeClientCapabilities selection_range = 22 [(google.api.field_behavior) = OPTIONAL];
}

// ClientCapabilities define capabilities for dynamic registration, workspace and text document
// features the client supports.
//
// The experimental can be used to pass experimental capabilities under development. For future
// compatibility a ClientCapabilities object literal can have more properties set than currently
// defined. Servers receiving a ClientCapabilities object literal with unknown properties should
// ignore these properties. A missing property should be interpreted as an absence of the
// capability. If a missing property normally defines sub properties, all missing sub properties
// should be interpreted as an absence of the corresponding capability.
//
// Client capabilities got introduced with version 3.0 of the protocol. They therefore only describe
// capabilities that got introduced in 3.x or later. Capabilities that existed in the 2.x version of
// the protocol are still mandatory for clients. Clients cannot opt out of providing them. So even
// if a client omits the ClientCapabilities.textDocument.synchronization it is still required that
// the client provides text document synchronization (e.g. open, changed and close notifications).
message ClientCapabilities {
  // Workspace specific client capabilities.
  message Workspace {
    // Optional. The client supports applying batch edits to the workspace by supporting the request
    // 'workspace/applyEdit'.
    bool apply_edit = 1 [(google.api.field_behavior) = OPTIONAL];

    // Optional. Capabilities specific to `WorkspaceEdit`s.
    WorkspaceEditClientCapabilities workspace_edit = 2 [(google.api.field_behavior) = OPTIONAL];

    // Optional. Capabilities specific to the `workspace/didChangeConfiguration` notification.
    DidChangeConfigurationClientCapabilities did_change_configuration = 3
        [(google.api.field_behavior) = OPTIONAL];

    // Optional. Capabilities specific to the `workspace/didChangeWatchedFiles` notification.
    DidChangeWatchedFilesClientCapabilities did_change_watched_files = 4
        [(google.api.field_behavior) = OPTIONAL];

    // Optional. Capabilities specific to the `workspace/symbol` request.
    WorkspaceSymbolClientCapabilities symbol = 5 [(google.api.field_behavior) = OPTIONAL];

    // Optional. Capabilities specific to the `workspace/executeCommand` request.
    ExecuteCommandClientCapabilities execute_command = 6 [(google.api.field_behavior) = OPTIONAL];

    // Optional. The client has support for workspace folders.
    //
    // @since 3.6.0
    bool workspace_folders = 7 [(google.api.field_behavior) = OPTIONAL];

    // Optional. The client supports `workspace/configuration` requests.
    //
    // @since 3.6.0
    bool configuration = 8 [(google.api.field_behavior) = OPTIONAL];
  }

  // Window specific client capabilities.
  message Window {
    // Optional. Whether client supports handling progress notifications. If set servers are allowed
    // to report in `workDoneProgress` property in the request specific server capabilities.
    //
    // @since 3.15.0
    bool work_done_progress = 1;
  }

  // Optional. Workspace specific client capabilities.
  Workspace workspace = 1 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Text document specific client capabilities.
  TextDocumentClientCapabilities text_document = 2 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Window specific client capabilities.
  Window window = 3 [(google.api.field_behavior) = OPTIONAL];

  // Optional. Experimental client capabilities.
  google.protobuf.Any experimental = 4 [(google.api.field_behavior) = OPTIONAL];
}

// InitializeResponse result of Initialize.
message InitializeResponse {
  // The capabilities the language server provides.
  ServerCapabilities capabilities = 1;

  // Information about the server.
  //
  // @since 3.15.0
  // (-- api-linter: core::0123::resource-annotation=disabled --)
  message ServerInfo {
    // The name of the server as defined by the server.
    string name = 1 [(google.api.field_behavior) = REQUIRED];

    // Optional. The server's version as defined by the server.
    google.protobuf.StringValue version = 2;
  }

  // Optional. Information about the server.
  //
  // @since 3.15.0
  ServerInfo server_info = 2;
}

// InitializeError known error codes.
message InitializeErrorUnknownProtocolVersion {
  // If the protocol version provided by the client can't be handled by the server.
  //
  // This initialize error got replaced by client capabilities. There is
  // no version handshake in version 3.0x.
  int32 unknown_protocol_version = 1 [deprecated = true];
}

// InitializeError known error data for InitializeResponse response.
message InitializeErrorData {
  // Indicates whether the client execute the following retry logic:
  // (1) show the message provided by the ResponseError to the user
  // (2) user selects retry or cancel
  // (3) if user selected retry the initialize method is sent again.
  bool retry = 1 [(google.api.field_behavior) = REQUIRED];
}

// ServerCapabilities is the signal of server capabilities.
message ServerCapabilities {
  // Defines how text documents are synced. Is either a detailed structure defining each
  // notification or for backwards compatibility the TextDocumentSyncKind number. If omitted it
  // defaults to `TextDocumentSyncKind.None`.
  //
  // optional
  oneof text_document_sync {
    TextDocumentSyncOptions text_document_sync_options = 1;

    TextDocumentSyncKind text_document_sync_kind = 2;
  }

  // Optional. The server provides completion support.
  CompletionOptions completion_provider = 3;

  // The server provides hover support.
  //
  // optional
  oneof hover_provider {
    bool enable_hover_provider = 4;

    HoverOptions hover_options = 5;
  }

  // Optional. The server provides signature help support.
  SignatureHelpOptions signature_help_provider = 6;

  // The server provides go to declaration support.
  //
  // @since 3.14.0
  //
  // optional
  oneof declaration_provider {
    bool enable_declaration_provider = 7;

    DeclarationOptions declaration_options = 8;

    DeclarationRegistrationOptions declaration_registration_options = 9;
  }

  // The server provides goto definition support.
  //
  // optional
  oneof definition_provider {
    bool enable_definition_provider = 10;

    DefinitionOptions definition_options = 11;
  }

  // The server provides goto type definition support.
  //
  // @since 3.6.0
  //
  // optional
  oneof type_definition_provider {
    bool enable_type_definition_provider = 12;

    TypeDefinitionOptions type_definition_options = 13;

    TypeDefinitionRegistrationOptions type_definition_registration_options = 14;
  }

  // The server provides goto implementation support.
  //
  // @since 3.6.0
  //
  // optional
  oneof implementation_provider {
    bool enable_implementation_provider = 15;

    ImplementationOptions implementation_options = 16;

    ImplementationRegistrationOptions implementation_registration_options = 17;
  }

  // The server provides find references support.
  //
  // optional
  oneof references_provider {
    bool enable_references_provider = 18;

    ReferenceOptions reference_options = 19;
  }

  // The server provides document highlight support.
  //
  // optional
  oneof document_highlight_provider {
    bool enable_document_highlight_provider = 20;

    DocumentHighlightOptions document_highlight_options = 21;
  }

  // The server provides document symbol support.
  //
  // optional
  oneof document_symbol_provider {
    bool enable_document_symbol_provider = 22;

    DocumentSymbolOptions document_symbol_options = 23;
  }

  // The server provides code actions. The `CodeActionOptions` return type is only
  // valid if the client signals code action literal support via the property
  // `textDocument.codeAction.codeActionLiteralSupport`.
  //
  // optional
  oneof code_action_provider {
    bool enable_code_action_provider = 24;

    CodeActionOptions code_action_options = 25;
  }

  // Optional. The server provides code lens.
  CodeLensOptions codelens_provider = 26;

  // Optional. The server provides document link support.
  DocumentLinkOptions document_link_provider = 27;

  // The server provides color provider support.
  //
  // @since 3.6.0
  //
  // optional
  oneof color_provider {
    bool enable_color_provider = 28;

    DocumentColorOptions document_color_options = 29;

    DocumentColorRegistrationOptions document_color_registration_options = 30;
  }

  // The server provides document formatting.
  //
  // optional
  oneof document_formatting_provider {
    bool enable_document_formatting_provider = 31;

    DocumentFormattingOptions document_formatting_options = 32;
  }

  // The server provides document range formatting.
  //
  // optional
  oneof document_range_formatting_provider {
    bool enable_document_range_formatting_provider = 33;

    DocumentRangeFormattingOptions document_range_formatting_options = 34;
  }

  // Optional. The server provides document formatting on typing.
  DocumentOnTypeFormattingOptions document_on_type_formatting_provider = 35;

  // The server provides rename support. RenameOptions may only be
  // specified if the client states that it supports `prepareSupport` in its initial
  // `initialize` request.
  //
  // optional
  oneof rename_provider {
    bool enable_rename_provider = 36;

    RenameOptions rename_options = 37;
  }

  // The server provides folding provider support.
  //
  // @since 3.10.0
  //
  // optional
  oneof folding_range_provider {
    bool enable_folding_range_provider = 38;

    FoldingRangeOptions folding_range_options = 39;

    FoldingRangeRegistrationOptions folding_range_registration_options = 40;
  }

  // Optional. The server provides execute command support.
  ExecuteCommandOptions execute_command_provider = 41;

  // The server provides selection range support.
  //
  // @since 3.15.0
  //
  // optional
  oneof selection_range_provider {
    bool enable_selection_range_provider = 42;

    SelectionRangeOptions selection_range_options = 43;

    SelectionRangeRegistrationOptions selection_range_registration_options = 44;
  }

  // The server provides workspace symbol support.
  bool workspace_symbol_provider = 45;

  // Workspace specific server capabilities
  message Workspace {
    // Optional. The server supports workspace folder.
    //
    // @since 3.6.0
    WorkspaceFoldersServerCapabilities workspace_folders = 1;
  }

  // Optional.
  Workspace workspace = 46;

  // Optional. Experimental server capabilities.
  google.protobuf.Any experimental = 47;
}

// MessageType represents a ShowMessage and ShowMessageRequestRequest message type.
enum MessageType {
  // Conventional default for enums. Do not use this.
  MESSAGE_TYPE_UNSPECIFIED = 0;

  // An error message.
  ERROR = 1;

  // A warning message.
  WARNING = 2;

  // An information message.
  INFO = 3;

  // A log message.
  LOG = 4;
}

// ShowMessageRequestParams represents a `window/showMessage` notification params.
message ShowMessageRequestParams {
  // The message type. See [MessageType][MessageType].
  MessageType type = 1 [(google.api.field_behavior) = REQUIRED];

  // The actual message.
  string message = 2 [(google.api.field_behavior) = REQUIRED];
}

// MessageActionItem is the message action items to present.
message MessageActionItem {
  // A short title like 'Retry', 'Open Log' etc.
  string title = 1 [(google.api.field_behavior) = REQUIRED];
}

// ShowMessageRequestRequest represents a `window/showMessageRequest` request params.
message ShowMessageRequestRequest {
  // The message type. See [MessageType][MessageType].
  MessageType type = 1 [(google.api.field_behavior) = REQUIRED];

  // The actual message.
  string message = 2 [(google.api.field_behavior) = REQUIRED];

  // The message action items to present.
  repeated MessageActionItem actions = 3;
}

// LogMessageRequest represents a notification params.
message LogMessageRequest {
  // The message type. See [MessageType][MessageType].
  MessageType type = 1 [(google.api.field_behavior) = REQUIRED];

  // The actual message
  string message = 2 [(google.api.field_behavior) = REQUIRED];
}

// WorkDoneProgressCreateRequest represents a Creating Work Done Progress request params.
message WorkDoneProgressCreateRequest {
  // The token to be used to report progress.
  ProgressToken token = 1 [(google.api.field_behavior) = REQUIRED];
}

// WorkDoneProgressCancelRequest represents a canceling a work done progress notification params.
message WorkDoneProgressCancelRequest {
  // The token to be used to report progress.
  ProgressToken token = 1 [(google.api.field_behavior) = REQUIRED];
}

// TelemetryParams represents a `telemetry/event` notification params.
message TelemetryParams {
  // Optional.
  google.protobuf.Any params = 1 [(google.api.field_behavior) = OPTIONAL];
}

// Registration is the general parameters to register for a capability.
message Registration {
  // The id used to register the request. The id can be used to deregister
  // the request again.
  string id = 1 [(google.api.field_behavior) = REQUIRED];

  // The method / capability to register for.
  string method = 2 [(google.api.field_behavior) = REQUIRED];

  // Options necessary for the registration.
  google.protobuf.Any register_options = 3 [(google.api.field_behavior) = OPTIONAL];
}

// RegistrationParams represents a `client/registerCapability` request params.
message RegistrationParams {
  repeated Registration registrations = 1 [(google.api.field_behavior) = REQUIRED];
}

// Unregistration is the general parameters to unregister a capability.
message Unregistration {
  // The id used to unregister the request or notification. Usually an id
  // provided during the register request.
  string id = 1 [(google.api.field_behavior) = REQUIRED];

  // The method / capability to unregister for.
  string method = 2 [(google.api.field_behavior) = REQUIRED];
}

// UnregistrationParams represents a `client/unregisterCapability` request params.
message UnregistrationParams {
  // This should correctly be named `unregistrations`. However changing this
  // is a breaking change and needs to wait until we deliver a 4.x version
  // of the specification.
  repeated Unregistration unregisterations = 1 [(google.api.field_behavior) = REQUIRED];
}

// WorkspaceFoldersServerCapabilities is the an additional property of
// InitializeRequest.workspaceFolders.
message WorkspaceFoldersServerCapabilities {
  // Optional. The server has support for workspace folders
  bool supported = 1;

  // Whether the server wants to receive workspace folder
  // change notifications.
  //
  // If a string is provided, the string is treated as an ID
  // under which the notification is registered on the client
  // side. The ID can be used to unregister for these events
  // using the `client/unregisterCapability` request.
  oneof change_notifications {
    // The id of registered notification.
    string id = 2;

    // Whether the enable change notifications.
    bool enable = 3;
  }
}

// WorkspaceFolder represents a workspace root folder.
// (-- api-linter: core::0123::resource-annotation=disabled --)
message WorkspaceFolder {
  // The associated URI for this workspace folder.
  lsp.uri.DocumentURI uri = 1 [(google.api.field_behavior) = REQUIRED];

  // The name of the workspace folder. Used to refer to this
  // workspace folder in the user interface.
  string name = 2 [(google.api.field_behavior) = REQUIRED];
}

// WorkspaceFoldersChangeEvent is the workspace folder change event.
message WorkspaceFoldersChangeEvent {
  // The array of added workspace folders.
  repeated WorkspaceFolder added = 1 [(google.api.field_behavior) = REQUIRED];

  // The array of the removed workspace folders.
  repeated WorkspaceFolder removed = 2 [(google.api.field_behavior) = REQUIRED];
}

// DidChangeWorkspaceFoldersRequest represents a `workspace/didChangeWorkspaceFolders` notification
// params.
message DidChangeWorkspaceFoldersRequest {
  // The actual workspace folder change event.
  WorkspaceFoldersChangeEvent event = 1 [(google.api.field_behavior) = REQUIRED];
}

// DidChangeConfigurationClientCapabilities represents a client capabilities of
// `workspace/didChangeConfiguration` notification.
message DidChangeConfigurationClientCapabilities {
  // Optional. Did change configuration notification supports dynamic registration.
  bool dynamic_registration = 1;
}

// DidChangeConfigurationRequest represents a `workspace/didChangeConfiguration` notification
// params.
message DidChangeConfigurationRequest {
  // The actual changed settings
  google.protobuf.Any settings = 1 [(google.api.field_behavior) = REQUIRED];
}

// ConfigurationItem represents a configuration section to ask for and an additional scope URI.
message ConfigurationItem {
  // The scope to get the configuration section for.
  lsp.uri.DocumentURI scope_uri = 1;

  // The configuration section asked for.
  google.protobuf.StringValue section = 2;
}

// ConfigurationRequest represents a Configuration request params.
//
// @since 3.6.0
message ConfigurationRequest {
  repeated ConfigurationItem items = 1 [(google.api.field_behavior) = REQUIRED];
}

// DidChangeWatchedFilesClientCapabilities represents a client capabilities of
// `workspace/didChangeWatchedFiles` notification.
message DidChangeWatchedFilesClientCapabilities {
  // Optional. Did change watched files notification supports dynamic registration. Please note
  // that the current protocol doesn't support static configuration for file changes
  // from the server side.
  bool dynamic_registration = 1;
}

// FileSystemWatcher represents a watcher of file system.
message FileSystemWatcher {
  enum WatchKind {
    // Conventional default for enums. Do not use this.
    WATCH_KIND_UNSPECIFIED = 0;

    // Interested in create events.
    CREATE = 1;

    // Interested in change events
    CHANGE = 2;

    // Interested in delete events
    DELETE = 4;
  }

  // The  glob pattern to watch.
  //
  // Glob patterns can have the following syntax:
  // - `*` to match one or more characters in a path segment
  // - `?` to match on one character in a path segment
  // - `**` to match any number of path segments, including none
  // - `{}` to group conditions (e.g. `**â€‹/*.{ts,js}` matches all TypeScript and JavaScript files)
  // - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to
  // match on `example.0`, `example.1`, â€¦)
  // - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]`
  // to match on `example.a`, `example.b`, but not `example.0`)
  string glob_pattern = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional. The kind of events of interest. If omitted it defaults
  // to follows which is 7.
  //
  //  WatchKind.CREATE | WatchKind.CHANGE | WatchKind.DELETE
  WatchKind kind = 2 [(google.api.field_behavior) = OPTIONAL];
}

// DidChangeWatchedFilesRegistrationOptions describe options to be used when registering for file
// system change events.
message DidChangeWatchedFilesRegistrationOptions {
  // The watchers to register.
  repeated FileSystemWatcher watchers = 1 [(google.api.field_behavior) = REQUIRED];
}

// FileEvent an event describing a file change.
message FileEvent {
  // FileChangeType is the file event type.
  enum FileChangeType {
    // Conventional default for enums. Do not use this.
    FILE_CHANGE_TYPE_UNSPECIFIED = 0;

    // The file got created.
    CREATED = 1;

    // The file got changed.
    CHANGED = 2;

    // The file got deleted.
    DELETED = 3;
  }

  // The file's URI.
  lsp.uri.DocumentURI uri = 1 [(google.api.field_behavior) = REQUIRED];

  // The change type.
  FileChangeType type = 2 [(google.api.field_behavior) = REQUIRED];
}

// DidChangeWatchedFilesRequest is the parameters of a `workspace/didChangeWatchedFiles`
// notification.
message DidChangeWatchedFilesRequest {
  // The actual file events.
  repeated FileEvent changes = 1;
}

// WorkspaceSymbolClientCapabilities represents a client capabilities of
// `workspace/symbol` request.
message WorkspaceSymbolClientCapabilities {
  // Optional. Symbol request supports dynamic registration.
  bool dynamic_registration = 1;

  message SymbolKind {
    // The symbol kind values the client supports. When this
    // property exists the client also guarantees that it will
    // handle values outside its set gracefully and falls back
    // to a default value when unknown.
    //
    // If this property is not present the client only supports
    // the symbol kinds from `File` to `Array` as defined in
    // the initial version of the protocol.
    repeated SymbolKind value_set = 1;
  }

  // Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
  SymbolKind symbol_kind = 2;
}

// WorkspaceSymbolParams is the parameters of a `workspace/symbol` request.
message WorkspaceSymbolParams {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // A query string to filter symbols by. Clients may send an empty
  // string here to request all symbols.
  string query = 3 [(google.api.field_behavior) = REQUIRED];
}

// ExecuteCommandClientCapabilities represents a client capabilities of
// `workspace/executeCommand` request.
message ExecuteCommandClientCapabilities {
  // Optional. Execute command supports dynamic registration.
  bool dynamic_registration = 1;
}

message ExecuteCommandOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;

  // The commands to be executed on the server
  repeated string commands = 2;
}

// ExecuteCommandRegistrationOptions execute command registration options.
message ExecuteCommandRegistrationOptions {
  // extends
  ExecuteCommandOptions execute_command_options = 1;
}

// ExecuteCommandParams is the parameters of a `workspace/executeCommand` request.
message ExecuteCommandParams {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;

  // The identifier of the actual command handler.
  string command = 2 [(google.api.field_behavior) = REQUIRED];

  // Arguments that the command should be invoked with.
  // (-- api-linter: core::0140::reserved-words=disabled --)
  repeated google.protobuf.Any arguments = 3;
}

// ApplyWorkspaceEditRequest is the parameters of a `workspace/applyEdit` request.
message ApplyWorkspaceEditRequest {
  // An optional label of the workspace edit. This label is
  // presented in the user interface for example on an undo
  // stack to undo the workspace edit.
  google.protobuf.StringValue label = 1;

  // The edits to apply.
  WorkspaceEdit edit = 2;
}

// ApplyWorkspaceEditResponse is the parameters of a ApplyWorkspaceEdit response.
message ApplyWorkspaceEditResponse {
  // Indicates whether the edit was applied or not.
  bool applied = 1 [(google.api.field_behavior) = REQUIRED];

  // An optional textual description for why the edit was not applied.
  // This may be used may be used by the server for diagnostic
  // logging or to provide a suitable error for a request that
  // triggered the edit.
  google.protobuf.StringValue failure_reason = 2;
}

// TextDocumentSyncKind defines how the host (editor) should sync document changes to the language
// server.
// (-- api-linter: core::0126::unspecified=disabled --)
enum TextDocumentSyncKind {
  // Documents should not be synced at all.
  NONE = 0;

  // Documents are synced by always sending the full content
  // of the document.
  FULL = 1;

  // Documents are synced by sending the full content on open.
  // After that only incremental updates to the document are
  // send.
  INCREMENTAL = 2;
}

// TextDocumentSyncOptions represents a server capabilities option of textDocumentSync.
message TextDocumentSyncOptions {
  // Optional. Open and close notifications are sent to the server. If omitted open close
  // notification should not be sent.
  bool open_close = 1;

  // Optional. Change notifications are sent to the server. See
  // [TextDocumentSyncKind][TextDocumentSyncKind]. If omitted it defaults to
  // TextDocumentSyncKind.None.
  TextDocumentSyncKind change = 2;

  // Optional. If present will save notifications are sent to the server. If omitted the
  // notification should not be sent.
  bool will_save = 3;

  // Optional. If present will save wait until requests are sent to the server. If omitted the
  // request should not be sent.
  bool will_save_wait_until = 4;

  // If present save notifications are sent to the server. If omitted the notification should not be
  // sent.
  oneof save {
    bool enable = 5;
    SaveOptions save_options = 6;
  }
}

// DidOpenTextDocumentRequest is the parameters of a `textDocument/didOpen` notification.
message DidOpenTextDocumentRequest {
  // The document that was opened.
  TextDocumentItem text_document = 1 [(google.api.field_behavior) = REQUIRED];
}

// TextDocumentChangeRegistrationOptions describe options to be used when registering for text
// document change events.
message TextDocumentChangeRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;

  // How documents are synced to the server. See TextDocumentSyncKind.Full
  // and TextDocumentSyncKind.Incremental.
  TextDocumentSyncKind sync_kind = 2 [(google.api.field_behavior) = REQUIRED];
}

// DidChangeTextDocumentRequest is the parameters of a `textDocument/didChange` notification.
message DidChangeTextDocumentRequest {
  // The document that did change. The version number points
  // to the version after all provided content changes have
  // been applied.
  VersionedTextDocumentIdentifier text_document = 1 [(google.api.field_behavior) = REQUIRED];

  // The actual content changes. The content changes describe single state changes
  // to the document. So if there are two content changes c1 (at array index 0) and
  // c2 (at array index 1) for a document in state S then c1 moves the document from
  // S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
  // on the state S'.
  //
  // To mirror the content of a document using change events use the following approach:
  // - start with the same initial content
  // - apply the 'textDocument/didChange' notifications in the order you receive them.
  // - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
  //   you receive them.
  repeated TextDocumentContentChangeEvent content_changes = 2
      [(google.api.field_behavior) = REQUIRED];
}

// TextDocumentContentChangeEvent an event describing a change to a text document. If range and
// rangeLength are omitted the new text is considered to be the full content of the document.
message TextDocumentContentChangeEvent {
  message ContentChangeEvent {
    // The range of the document that changed.
    Range range = 1 [(google.api.field_behavior) = REQUIRED];

    // The optional length of the range that got replaced.
    //
    // Use range instead.
    int32 range_length = 2 [deprecated = true];

    // The new text for the provided range.
    string text = 3 [(google.api.field_behavior) = REQUIRED];
  }

  oneof text_document_content_change_event {
    ContentChangeEvent content_change_event = 1;

    // The new text of the whole document.
    string text = 2;
  }
}

// WillSaveTextDocumentRequest is the parameters send in a will save `textDocument/willSave`
// notification.
message WillSaveTextDocumentRequest {
  // The document that will be saved.
  TextDocumentIdentifier text_document = 1 [(google.api.field_behavior) = REQUIRED];

  // The [TextDocumentSaveReason][TextDocumentSaveReason].
  TextDocumentSaveReason reason = 2 [(google.api.field_behavior) = REQUIRED];
}

// TextDocumentSaveReason represents reasons why a text document is saved.
enum TextDocumentSaveReason {
  // Conventional default for enums. Do not use this.
  TEXT_DOCUMENT_SAVE_REASON_UNSPECIFIED = 0;

  // Manually triggered, e.g. by the user pressing save, by starting debugging,
  // or by an API call.
  MANUAL = 1;

  // Automatic after a delay.
  AFTERDELAY = 2;

  // When the editor lost focus.
  FOCUSOUT = 3;
}

// SaveOptions represents a server capabilities option of textDocumentSync.save.
message SaveOptions {
  // Optional. The client is supposed to include the content on save.
  bool include_text = 1;
}

// TextDocumentSaveRegistrationOptions represents a registration option of TextDocumentSave.
message TextDocumentSaveRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;

  // Optional. The client is supposed to include the content on save.
  bool include_text = 2;
}

// DidSaveTextDocumentRequest is the parameters of a `textDocument/didSave` notification.
message DidSaveTextDocumentRequest {
  // The document that was saved.
  TextDocumentIdentifier text_document = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional the content when saved. Depends on the includeText value
  // when the save notification was requested.
  google.protobuf.StringValue text = 2;
}

// DidCloseTextDocumentRequest is the parameters of a `textDocument/didClose` notification.
message DidCloseTextDocumentRequest {
  // The document that was closed.
  TextDocumentIdentifier text_document = 1 [(google.api.field_behavior) = REQUIRED];
}

// TextDocumentSyncClientCapabilities represents a client capabilities of `textDocument/didXXX`
// notification.
message TextDocumentSyncClientCapabilities {
  // Optional. Whether text document synchronization supports dynamic registration.
  bool dynamic_registration = 1;

  // Optional. The client supports sending will save notifications.
  bool will_save = 2;

  // Optional. The client supports sending a will save request and
  // waits for a response providing text edits which will
  // be applied to the document before it is saved.
  bool will_save_wait_until = 3;

  // Optional. The client supports did save notifications.
  bool did_save = 4;
}

// PublishDiagnosticsClientCapabilities represents a client capabilities of
// `textDocument/publishDiagnostics` notification.
message PublishDiagnosticsClientCapabilities {
  // Optional. Whether the clients accepts diagnostics with related information.
  bool related_information = 1;

  message TagSupport {
    // The tags supported by the client.
    repeated DiagnosticTag value_set = 2;
  }

  // Client supports the tag property to provide meta data about a diagnostic.
  // Clients supporting tags have to handle unknown tags gracefully.
  //
  // @since 3.15.0
  TagSupport tag_support = 3;

  // Optional. Whether the client interprets the version property of the
  // `textDocument/publishDiagnostics` notification's parameter.
  //
  // @since 3.15.0
  bool version_support = 4;
}

// PublishDiagnosticsRequest is the parameters of a `textDocument/publishDiagnostics` notification.
message PublishDiagnosticsRequest {
  // The URI for which diagnostic information is reported.
  lsp.uri.DocumentURI uri = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional the version number of the document the diagnostics are published for.
  //
  // @since 3.15.0
  int32 version = 2;

  // An array of diagnostic information items.
  repeated Diagnostic diagnostics = 3 [(google.api.field_behavior) = REQUIRED];
}

// CompletionClientCapabilities represents a client capabilities of
// `textDocument/completion` request.
message CompletionClientCapabilities {
  // Whether completion supports dynamic registration.
  bool dynamic_registration = 1;

  message CompletionItem {
    // Optional. Client supports snippets as insert text.
    //
    // A snippet can define tab stops and placeholders with `$1`, `$2`
    // and `${3:foo}`. `$0` defines the final tab stop, it defaults to
    // the end of the snippet. Placeholders with equal identifiers are linked,
    // that is typing in one will update others too.
    bool snippet_support = 1;

    // Optional. Client supports commit characters on a completion item.
    bool commit_characters_support = 2;

    // Client supports the follow content formats for the documentation
    // property. The order describes the preferred format of the client.
    repeated MarkupKind documentation_format = 3;

    // Optional. Client supports the deprecated property on a completion item.
    bool deprecated_support = 4;

    // Optional. Client supports the preselect property on a completion item.
    bool preselect_support = 5;

    message TagSupport {
      // The tags supported by the client.
      repeated CompletionItemTag value_set = 1;
    }

    // Client supports the tag property on a completion item. Clients supporting
    // tags have to handle unknown tags gracefully. Clients especially need to
    // preserve unknown tags when sending a completion item back to the server in
    // a resolve call.
    //
    // @since 3.15.0
    TagSupport tag_support = 6;

    // Optional. Client support insert replace edit to control different behavior if a
    // completion item is inserted in the text or should replace text.
    //
    // @since 3.16.0 - Proposed state
    bool insert_replace_support = 7;

    // Optional. Client supports to resolve `additionalTextEdits` in the `completionItem/resolve`
    // request. So servers can postpone computing them.
    //
    // @since 3.16.0 - Proposed state
    bool resolve_additional_text_edits_support = 8;
  }

  // The client supports the following `CompletionItem` specific
  // capabilities.
  CompletionItem completion_item = 2;

  message CompletionItemKind {
    // The completion item kind values the client supports. When this
    // property exists the client also guarantees that it will
    // handle values outside its set gracefully and falls back
    // to a default value when unknown.
    //
    // If this property is not present the client only supports
    // the completion items kinds from `Text` to `Reference` as defined in
    // the initial version of the protocol.
    repeated CompletionItemKind value_set = 1;
  }

  CompletionItemKind completion_item_kind = 3;

  // Optional. The client supports to send additional context information for a
  // `textDocument/completion` request.
  bool context_support = 4;
}

// CompletionOptions represents a server capabilities option of completionProvider.
message CompletionOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;

  // Most tools trigger completion request automatically without explicitly requesting
  // it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
  // starts to type an identifier. For example if the user types `c` in a JavaScript file
  // code complete will automatically pop up present `console` besides others as a
  // completion item. Characters that make up identifiers don't need to be listed here.
  //
  // If code complete should automatically be trigger on characters not being valid inside
  // an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.
  repeated string trigger_characters = 2;

  // The list of all possible characters that commit a completion. This field can be used
  // if clients don't support individual commit characters per completion item. See
  // `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`.
  //
  // If a server provides both `allCommitCharacters` and commit characters on an individual
  // completion item the ones on the completion item win.
  //
  // @since 3.2.0
  repeated string all_commit_characters = 3;

  // Optional. The server provides support to resolve additional
  // information for a completion item.
  bool resolve_provider = 4;
}

// CompletionRegistrationOptions represents a registration option of Completion.
message CompletionRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  CompletionOptions completion_options = 2;
}

// CompletionRequest is the parameters of a `textDocument/completion` request.
message CompletionRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;
  // extends
  PartialResultParams partial_result_params = 3;

  // The completion context. This is only available if the client specifies
  // to send this using `ClientCapabilities.textDocument.completion.contextSupport === true`
  CompletionContext context = 4;
}

// CompletionTriggerKind how a completion was triggered.
enum CompletionTriggerKind {
  // Conventional default for enums. Do not use this.
  COMPLETION_TRIGGER_KIND_UNSPECIFIED = 0;

  // Completion was triggered by typing an identifier (24x7 code
  // complete), manual invocation (e.g Ctrl+Space) or via API.
  INVOKED = 1;

  // Completion was triggered by a trigger character specified by
  // the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
  TRIGGER_CHARACTER = 2;

  // Completion was re-triggered as the current completion list is incomplete.
  TRIGGER_FOR_INCOMPLETE_COMPLETIONS = 3;
}

// CompletionContext contains additional information about the context in which a completion request
// is triggered.
message CompletionContext {
  // How the completion was triggered.
  CompletionTriggerKind trigger_kind = 1 [(google.api.field_behavior) = REQUIRED];

  // The trigger character (a single character) that has trigger code complete.
  // Is undefined if `triggerKind !== CompletionTriggerKind.TriggerCharacter`
  google.protobuf.StringValue trigger_character = 2;
}

// CompletionList represents a collection of [completion items](#CompletionItem) to be presented
// in the editor.
message CompletionList {
  // Optional. This list it not complete. Further typing should result in recomputing
  // this list.
  bool is_incomplete = 1;

  // The completion items.
  repeated CompletionItem items = 2;
}

// InsertTextFormat defines whether the insert text in a completion item should be interpreted as
// plain text or a snippet.
enum InsertTextFormat {
  // Conventional default for enums. Do not use this.
  INSERT_TEXT_FORMAT_UNSPECIFIED = 0;

  // The primary text to be inserted is treated as a plain string.
  PLAINTEXT = 1;

  // The primary text to be inserted is treated as a snippet.
  //
  // A snippet can define tab stops and placeholders with `$1`, `$2`
  // and `${3:foo}`. `$0` defines the final tab stop, it defaults to
  // the end of the snippet. Placeholders with equal identifiers are linked,
  // that is typing in one will update others too.
  //
  // (-- Add `_FORMAT` suffix for avoid `Note that enum values use C++ scoping rules, meaning that
  // enum values are siblings of their type, not children of it.` warning on
  // [CompletionItemKind][CompletionItemKind]. --)
  SNIPPET_FORMAT = 2;
}

// CompletionItemTag completion item tags are extra annotations that tweak the rendering of a
// completion item.
//
// @since 3.15.0
enum CompletionItemTag {
  // Conventional default for enums. Do not use this.
  COMPLETION_ITEM_TAG_UNSPECIFIED = 0;

  // Render a completion as obsolete, usually using a strike-out.
  DEPRECATED_TAG = 1;
}

// CompletionItem is the completion items.
message CompletionItem {
  // The label of this completion item. By default
  // also the text that is inserted when selecting
  // this completion.
  string label = 1 [(google.api.field_behavior) = REQUIRED];

  // The kind of this completion item. Based of the kind
  // an icon is chosen by the editor. The standardized set
  // of available values is defined in `CompletionItemKind`.
  CompletionItemKind kind = 2;

  // Tags for this completion item.
  //
  // @since 3.15.0
  repeated CompletionItemTag tags = 3;

  // A human-readable string with additional information
  // about this item, like type or symbol information.
  google.protobuf.StringValue detail = 4;

  // A human-readable string that represents a doc-comment.
  oneof documentation {
    MarkupContent markup_content = 5;

    string content = 6;
  }

  // Indicates if this item is deprecated.
  //
  // Use tags instead if supported.
  bool deprecated = 7 [deprecated = true]; // optional

  // Optional. Select this item when showing.
  //
  // *Note* that only one completion item can be selected and that the
  // tool / client decides which item that is. The rule is that the *first*
  // item of those that match best is selected.
  bool preselect = 8;

  // A string that should be used when comparing this item
  // with other items. When `falsy` the label is used.
  google.protobuf.StringValue sort_text = 9;

  // A string that should be used when filtering a set of
  // completion items. When `falsy` the label is used.
  google.protobuf.StringValue filter_text = 10;

  // A string that should be inserted into a document when selecting
  // this completion. When `falsy` the label is used.
  //
  // The `insertText` is subject to interpretation by the client side.
  // Some tools might not take the string literally. For example
  // VS Code when code complete is requested in this example `con<cursor position>`
  // and a completion item with an `insertText` of `console` is provided it
  // will only insert `sole`. Therefore it is recommended to use `textEdit` instead
  // since it avoids additional client side interpretation.
  google.protobuf.StringValue insert_text = 11;

  // The format of the insert text. The format applies to both the `insertText` property
  // and the `newText` property of a provided `textEdit`. If omitted defaults to
  // `InsertTextFormat.PlainText`.
  InsertTextFormat insert_text_format = 12;

  // An edit which is applied to a document when selecting this completion. When an edit is provided
  // the value of `insertText` is ignored.
  //
  // NOTE: The range of the edit must be a single line range and it must contain the position at
  // which completion has been requested.
  TextEdit text_edit = 13;

  // An optional array of additional text edits that are applied when
  // selecting this completion. Edits must not overlap (including the same insert position)
  // with the main edit nor with themselves.
  //
  // Additional text edits should be used to change text unrelated to the current cursor position
  // (for example adding an import statement at the top of the file if the completion item will
  // insert an unqualified type).
  repeated TextEdit additional_text_edits = 14;

  // An optional set of characters that when pressed while this completion is active will accept it
  // first and then type that character. *Note* that all commit characters should have `length=1`
  // and that superfluous characters will be ignored.
  repeated string commit_characters = 15;

  // Optional. An optional command that is executed *after* inserting this completion. *Note* that
  // additional modifications to the current document should be described with the
  // additionalTextEdits-property.
  Command command = 16;

  // A data entry field that is preserved on a completion item between
  // a completion and a completion resolve request.
  google.protobuf.Any data = 17;
}

// CompletionItemKind is the kind of a completion entry.
enum CompletionItemKind {
  // Conventional default for enums. Do not use this.
  COMPLETION_ITEM_KIND_UNSPECIFIED = 0;

  // (-- Add COMPLETION_ prefix for conflicted SymbolKind enumerations --)

  COMPLETION_TEXT = 1;
  COMPLETION_METHOD = 2;
  COMPLETION_FUNCTION = 3;
  COMPLETION_CONSTRUCTOR = 4;
  COMPLETION_FIELD = 5;
  COMPLETION_VARIABLE = 6;
  COMPLETION_CLASS = 7;
  COMPLETION_INTERFACE = 8;
  COMPLETION_MODULE = 9;
  COMPLETION_PROPERTY = 10;
  COMPLETION_UNIT = 11;
  COMPLETION_VALUE = 12;
  COMPLETION_ENUM = 13;
  COMPLETION_KEYWORD = 14;
  COMPLETION_SNIPPET = 15;
  COMPLETION_COLOR = 16;
  COMPLETION_FILE = 17;
  COMPLETION_REFERENCE = 18;
  COMPLETION_FOLDER = 19;
  COMPLETION_ENUMMEMBER = 20;
  COMPLETION_CONSTANT = 21;
  COMPLETION_STRUCT = 22;
  COMPLETION_EVENT = 23;
  COMPLETION_OPERATOR = 24;
  COMPLETION_TYPEPARAMETER = 25;
}

// HoverClientCapabilities represents a client capabilities of `textDocument/hover` request.
message HoverClientCapabilities {
  // Optional. Whether hover supports dynamic registration.
  bool dynamic_registration = 1;

  // Client supports the follow content formats for the content
  // property. The order describes the preferred format of the client.
  repeated MarkupKind content_format = 2;
}

// HoverOptions represents a server capabilities option of hoverProvider.
message HoverOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// CompletionRegistrationOptions represents a registration option of Hover.
message HoverRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  HoverOptions hover_options = 2;
}

// HoverRequest is the parameters of a `textDocument/hover` request.
message HoverRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;
}

// Hover is the result of a hover request.
message Hover {
  message MarkedStrings {
    repeated MarkedString marked_string = 1;
  }

  // The hover's content
  oneof contents {
    MarkedString marked_string = 1;

    MarkedStrings marked_strings = 2;

    MarkupContent markup_content = 3;
  }

  // An optional range is a range inside a text document
  // that is used to visualize a hover, e.g. by changing the background color.
  Range range = 4;
}

// MarkedString can be used to render human readable text. It is either a markdown string
// or a code-block that provides a language and a code snippet. The language identifier
// is semantically equal to the optional language identifier in fenced code blocks in GitHub
// issues. See
// https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting
//
// The pair of a language and a value is an equivalent to markdown:
//
// ```${language}
// ${value}
// ```
//
// Note that markdown strings will be sanitized - that means html will be escaped.
//
// Deprecated: use MarkupContent instead.
message MarkedString {
  message CodeBlock {
    // (-- api-linter: core::0143::standardized-codes=disabled --)
    string language = 1;

    string value = 2;
  }

  oneof marked_string {
    string text = 1;

    CodeBlock code_block = 2;
  }
}

// SignatureHelpClientCapabilities represents a client capabilities of `textDocument/signatureHelp`
// request.
message SignatureHelpClientCapabilities {
  // Optional. Whether signature help supports dynamic registration.
  bool dynamic_registration = 1;

  // The client supports the following `SignatureInformation`
  // specific properties.
  message SignatureInformation {
    // Client supports the follow content formats for the documentation
    // property. The order describes the preferred format of the client.
    repeated MarkupKind documentation_format = 1;

    message ParameterInformation {
      // Optional. The client supports processing label offsets instead of a
      // simple label string.
      //
      // @since 3.14.0
      bool label_offset_support = 1;
    }

    // Client capabilities specific to parameter information.
    ParameterInformation parameter_information = 2;

    // Optional. The client support the `activeParameter` property on `SignatureInformation`
    // literal.
    //
    // @since 3.16.0 - proposed state
    bool active_parameter_support = 3;
  };

  SignatureInformation signature_information = 2;

  // Optional. The client supports to send additional context information for a
  // `textDocument/signatureHelp` request. A client that opts into
  // contextSupport will also support the `retriggerCharacters` on
  // `SignatureHelpOptions`.
  //
  // @since 3.15.0
  bool context_support = 3;
}

// SignatureHelpOptions represents a server capabilities option of signatureHelpProvider.
message SignatureHelpOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;

  // The characters that trigger signature help
  // automatically.
  repeated string trigger_characters = 2;

  // List of characters that re-trigger signature help.
  //
  // These trigger characters are only active when signature help is already showing. All trigger
  // characters are also counted as re-trigger characters.
  //
  // @since 3.15.0
  repeated string retrigger_characters = 3;
}

// SignatureHelpRegistrationOptions represents a registration option of SignatureHelp.
message SignatureHelpRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  SignatureHelpOptions signature_help_options = 2;
}

// SignatureHelpRequest is the parameters of a `textDocument/signatureHelp` request.
message SignatureHelpRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;

  // The signature help context. This is only available if the client specifies
  // to send this using the client capability `textDocument.signatureHelp.contextSupport === true`
  //
  // @since 3.15.0
  SignatureHelpContext context = 3;
}

// Additional information about the context in which a signature help request was triggered.
//
// @since 3.15.0
message SignatureHelpContext {
  // SignatureHelpTriggerKind how a signature help was triggered.
  //
  // @since 3.15.0
  enum SignatureHelpTriggerKind {
    // Conventional default for enums. Do not use this.
    SIGNATURE_HELP_TRIGGER_KIND_UNSPECIFIED = 0;

    // Signature help was invoked manually by the user or by a command.
    INVOKED = 1;

    // Signature help was triggered by a trigger character.
    TRIGGER_CHARACTER = 2;

    // Signature help was triggered by the cursor moving or by the document content changing.
    CONTENT_CHANGE = 3;
  }

  // Action that caused signature help to be triggered.
  SignatureHelpTriggerKind trigger_kind = 1 [(google.api.field_behavior) = REQUIRED];

  // Character that caused signature help to be triggered.
  //
  // This is undefined when `trigger_kind !== SignatureHelpTriggerKind.TriggerCharacter`
  string trigger_character = 2;

  // `true` if signature help was already showing when it was triggered.
  //
  // Retriggers occur when the signature help is already active and can be caused by actions such as
  // typing a trigger character, a cursor move, or document content changes.
  bool is_retrigger = 3 [(google.api.field_behavior) = REQUIRED];

  // The currently active `SignatureHelp`.
  //
  // The `activeSignatureHelp` has its `SignatureHelp.activeSignature` field updated based on
  // the user navigating through available signatures.
  SignatureHelp active_signature_help = 4;
}

// SignatureHelp represents the signature of something
// callable. There can be multiple signature but only one
// active and only one active parameter.
message SignatureHelp {
  // One or more signatures. If no signatures are available the signature help
  // request should return `null`.
  repeated SignatureInformation signatures = 1 [(google.api.field_behavior) = REQUIRED];

  // The active signature. If omitted or the value lies outside the
  // range of `signatures` the value defaults to zero or is ignore if
  // the `SignatureHelp` as no signatures.
  //
  // Whenever possible implementors should make an active decision about
  // the active signature and shouldn't rely on a default value.
  //
  // In future version of the protocol this property might become
  // mandatory to better express this.
  google.protobuf.Int32Value active_signature = 2;

  // The active parameter of the active signature. If omitted or the value
  // lies outside the range of `signatures[activeSignature].parameters`
  // defaults to 0 if the active signature has parameters. If
  // the active signature has no parameters it is ignored.
  // In future version of the protocol this property might become
  // mandatory to better express the active parameter if the
  // active signature does have any.
  google.protobuf.Int32Value active_parameter = 3;
}

// SignatureInformation represents the signature of something callable. A signature
// can have a label, like a function-name, a doc-comment, and
// a set of parameters.
message SignatureInformation {
  // The label of this signature. Will be shown in
  // the UI.
  string label = 1 [(google.api.field_behavior) = REQUIRED];

  // The human-readable doc-comment of this signature. Will be shown
  // in the UI but can be omitted.
  oneof documentation {
    string markup = 2;

    MarkupContent markup_content = 3;
  }

  // The parameters of this signature.
  repeated ParameterInformation parameters = 4;

  // The index of the active parameter.
  //
  // If provided, this is used in place of `SignatureHelp.activeParameter`.
  //
  // @since 3.16.0 - proposed state
  google.protobuf.Int32Value active_parameter = 5;
}

// ParameterInformation represents a parameter of a callable-signature. A parameter can
// have a label and a doc-comment.
// (-- api-linter: core::0123::resource-annotation=disabled --)
message ParameterInformation {
  message Offset {
    int32 start = 1 [(google.api.field_behavior) = REQUIRED];

    int32 end = 2 [(google.api.field_behavior) = REQUIRED];
  }

  // The label of this parameter information.
  //
  // Either a string or an inclusive start and exclusive end offsets within its containing
  // signature label. (see SignatureInformation.label). The offsets are based on a UTF-16
  // string representation as `Position` and `Range` does.
  //
  // NOTE: a label of type string should be a substring of its containing signature label.
  // Its intended use case is to highlight the parameter label part in the
  // `SignatureInformation.label`.
  oneof label {
    string name = 1;

    Offset offset = 2;
  }

  // The human-readable doc-comment of this parameter. Will be shown
  // in the UI but can be omitted.
  oneof documentation {
    string markup = 3;

    MarkupContent markup_content = 4;
  }
}

// DeclarationClientCapabilities represents a client capabilities of `textDocument/declaration`
// request.
message DeclarationClientCapabilities {
  // Optional. Whether declaration supports dynamic registration. If this is set to `true`
  // the client supports the new `DeclarationRegistrationOptions` return value
  // for the corresponding server capability as well.
  bool dynamic_registration = 1;

  // Optional. The client supports additional metadata in the form of declaration links.
  bool link_support = 2;
}

// DeclarationOptions represents a server capabilities option of declarationProvider.
message DeclarationOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// SignatureHelpRegistrationOptions represents a registration option of Declaration.
message DeclarationRegistrationOptions {
  // extends
  DeclarationOptions declaration_options = 1;
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 2;
  // extends
  StaticRegistrationOptions static_registration_options = 3;
}

// DeclarationRequest is the parameters of a `textDocument/declaration` request.
message DeclarationRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;
  // extends
  PartialResultParams partial_result_params = 3;
}

// DefinitionClientCapabilities represents a client capabilities of `textDocument/definition`
// request.
message DefinitionClientCapabilities {
  // Optional. Whether definition supports dynamic registration.
  bool dynamic_registration = 1;

  // Optional. The client supports additional metadata in the form of definition links.
  //
  // @since 3.14.0
  bool link_support = 2;
}

// DefinitionOptions represents a server capabilities option of definitionProvider.
message DefinitionOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// DefinitionRegistrationOptions represents a registration option of Definition.
message DefinitionRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  DefinitionOptions definition_options = 2;
}

// DefinitionRequest is the parameters of a `textDocument/definition` request.
message DefinitionRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;
  // extends
  PartialResultParams partial_result_params = 3;
}

// TypeDefinitionClientCapabilities represents a client capabilities of
// `textDocument/typeDefinition` request.
message TypeDefinitionClientCapabilities {
  // Optional. Whether implementation supports dynamic registration. If this is set to `true`
  // the client supports the new `TypeDefinitionRegistrationOptions` return value
  // for the corresponding server capability as well.
  bool dynamic_registration = 1;

  // Optional. The client supports additional metadata in the form of definition links.
  //
  // @since 3.14.0
  bool link_support = 2;
}

// TypeDefinitionOptions represents a server capabilities option of typeDefinitionProvider.
message TypeDefinitionOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// TypeDefinitionRegistrationOptions represents a registration option of TypeDefinition.
message TypeDefinitionRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  TypeDefinitionOptions type_definition_options = 2;
  // extends
  StaticRegistrationOptions static_registration_options = 3;
}

// TypeDefinitionRequest is the parameters of a `textDocument/typeDefinition` request.
message TypeDefinitionRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;
  // extends
  PartialResultParams partial_result_params = 3;
}

// ImplementationClientCapabilities represents a client capabilities of
// `textDocument/implementation` request.
message ImplementationClientCapabilities {
  // Optional. Whether implementation supports dynamic registration. If this is set to `true`
  // the client supports the new `ImplementationRegistrationOptions` return value
  // for the corresponding server capability as well.
  bool dynamic_registration = 1;

  // Optional. The client supports additional metadata in the form of definition links.
  //
  // @since 3.14.0
  bool link_support = 2;
}

// ImplementationOptions represents a server capabilities option of implementationProvider.
message ImplementationOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// ImplementationRegistrationOptions represents a registration option of Implementation.
message ImplementationRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  ImplementationOptions implementation_options = 2;
  // extends
  StaticRegistrationOptions static_registration_options = 3;
}

// ImplementationRequest is the parameters of a `textDocument/implementation` request.
message ImplementationRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;
  // extends
  PartialResultParams partial_result_params = 3;
}

// ImplementationClientCapabilities represents a client capabilities of `textDocument/references`
// request.
message ReferenceClientCapabilities {
  // Optional. Whether references supports dynamic registration.
  bool dynamic_registration = 1;
}

// ReferenceOptions represents a server capabilities option of referenceProvider.
message ReferenceOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// ReferenceRegistrationOptions represents a registration option of Reference.
message ReferenceRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  ReferenceOptions reference_options = 2;
}

// ReferenceRequest is the parameters of a `textDocument/references` request.
message ReferenceRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;
  // extends
  PartialResultParams partial_result_params = 3;

  ReferenceContext context = 4 [(google.api.field_behavior) = REQUIRED];
}

// ReferenceContext whether the references supports include the declaration
message ReferenceContext {
  // Include the declaration of the current symbol.
  bool include_declaration = 1 [(google.api.field_behavior) = REQUIRED];
}

// DocumentHighlightClientCapabilities represents a client capabilities of
// `textDocument/documentHighlight` request.
message DocumentHighlightClientCapabilities {
  // Optional. Whether document highlight supports dynamic registration.
  bool dynamic_registration = 1;
}

// DocumentHighlightOptions represents a server capabilities option of documentHighlightProvider.
message DocumentHighlightOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// DocumentHighlightRegistrationOptions represents a registration option of DocumentHighlight.
message DocumentHighlightRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  DocumentHighlightOptions document_highlight_options = 2;
}

// DocumentHighlightRequest is the parameters of a `textDocument/documentHighlight` request.
message DocumentHighlightRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;
  // extends
  PartialResultParams partial_result_params = 3;
}

// DocumentHighlight is a document highlight is a range inside a text document which deserves
// special attention. Usually a document highlight is visualized by changing
// the background color of its range.
message DocumentHighlight {
  // DocumentHighlightKind is a document highlight kind.
  enum DocumentHighlightKind {
    // Conventional default for enums. Do not use this.
    DOCUMENT_HIGHLIGHT_KIND_UNSPECIFIED = 0;

    // A textual occurrence.
    TEXT = 1;

    // Read-access of a symbol, like reading a variable.
    READ = 2;

    // Write-access of a symbol, like writing to a variable.
    WRITE = 3;
  }

  // The range this highlight applies to.
  Range range = 1 [(google.api.field_behavior) = REQUIRED];

  // Optional. The highlight kind, default is DocumentHighlightKind.Text.
  DocumentHighlightKind kind = 2;
}

// DocumentSymbolClientCapabilities represents a client capabilities of
// `textDocument/documentSymbol` request.
message DocumentSymbolClientCapabilities {
  message SymbolKind {
    // The symbol kind values the client supports. When this
    // property exists the client also guarantees that it will
    // handle values outside its set gracefully and falls back
    // to a default value when unknown.
    //
    // If this property is not present the client only supports
    // the symbol kinds from `File` to `Array` as defined in
    // the initial version of the protocol.
    repeated SymbolKind value_set = 1;
  }

  // Optional. Whether document symbol supports dynamic registration.
  bool dynamic_registration = 1;

  // Specific capabilities for the `SymbolKind` in the `textDocument/documentSymbol` request.
  SymbolKind symbol_kind = 2;

  // Optional. The client supports hierarchical document symbols.
  bool hierarchical_document_symbol_support = 3;
}

// DocumentSymbolOptions represents a server capabilities option of documentSymbolProvider.
message DocumentSymbolOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// DocumentSymbolRegistrationOptions represents a registration option of DocumentSymbol.
message DocumentSymbolRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  DocumentSymbolOptions document_symbol_options = 2;
}

// DocumentSymbolRequest is the parameters of a `textDocument/documentSymbol` request.
message DocumentSymbolRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // The text document.
  TextDocumentIdentifier text_document = 3 [(google.api.field_behavior) = REQUIRED];
}

// SymbolKind is a symbol kind.
enum SymbolKind {
  // Conventional default for enums. Do not use this.
  SYMBOL_KIND_UNSPECIFIED = 0;

  // (-- Add SYMBOL_ prefix for conflicted CompletionItemKind enumerations --)

  SYMBOL_FILE = 1;
  SYMBOL_MODULE = 2;
  SYMBOL_NAMESPACE = 3;
  SYMBOL_PACKAGE = 4;
  SYMBOL_CLASS = 5;
  SYMBOL_METHOD = 6;
  SYMBOL_PROPERTY = 7;
  SYMBOL_FIELD = 8;
  SYMBOL_CONSTRUCTOR = 9;
  SYMBOL_ENUM = 10;
  SYMBOL_INTERFACE = 11;
  SYMBOL_FUNCTION = 12;
  SYMBOL_VARIABLE = 13;
  SYMBOL_CONSTANT = 14;
  SYMBOL_STRING = 15;
  SYMBOL_NUMBER = 16;
  SYMBOL_BOOLEAN = 17;
  SYMBOL_ARRAY = 18;
  SYMBOL_OBJECT = 19;
  SYMBOL_KEY = 20;
  SYMBOL_NULL = 21;
  SYMBOL_ENUMMEMBER = 22;
  SYMBOL_STRUCT = 23;
  SYMBOL_EVENT = 24;
  SYMBOL_OPERATOR = 25;
  SYMBOL_TYPEPARAMETER = 26;
}

// DocumentSymbol represents programming constructs like variables, classes, interfaces etc. that
// appear in a document. Document symbols can be hierarchical and they have two ranges: one that
// encloses its definition and one that points to its most interesting range, e.g. the range of an
// identifier.
// (-- api-linter: core::0123::resource-annotation=disabled --)
message DocumentSymbol {
  // The name of this symbol. Will be displayed in the user interface and therefore must not be
  // an empty string or a string only consisting of white spaces.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // More detail for this symbol, e.g the signature of a function.
  string detail = 2;

  // The kind of this symbol.
  SymbolKind kind = 3 [(google.api.field_behavior) = REQUIRED];

  // Optional. Indicates if this symbol is deprecated.
  bool deprecated = 4;

  // The range enclosing this symbol not including leading/trailing whitespace but everything else
  // like comments. This information is typically used to determine if the clients cursor is
  // inside the symbol to reveal in the symbol in the UI.
  Range range = 5 [(google.api.field_behavior) = REQUIRED];

  // The range that should be selected and revealed when this symbol is being picked, e.g the name
  // of a function. Must be contained by the `range`.
  Range selection_range = 6 [(google.api.field_behavior) = REQUIRED];

  // Children of this symbol, e.g. properties of a class.
  repeated DocumentSymbol children = 7;
}

// SymbolTag are extra annotations that tweak the rendering of a symbol.
//
// @since 3.15
enum SymbolTag {
  // Conventional default for enums. Do not use this.
  SYMBOL_TAG_UNSPECIFIED = 0;

  // Render a symbol as obsolete, usually using a strike-out.
  DEPRECATED_SYMBOL_TAG = 1;
}

// SymbolInformation represents information about programming constructs like variables, classes,
// interfaces etc.
// (-- api-linter: core::0123::resource-annotation=disabled --)
message SymbolInformation {
  // The name of this symbol.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The kind of this symbol.
  SymbolKind kind = 2 [(google.api.field_behavior) = REQUIRED];

  // Optional. Indicates if this symbol is deprecated.
  bool deprecated = 3;

  // The location of this symbol. The location's range is used by a tool
  // to reveal the location in the editor. If the symbol is selected in the
  // tool the range's start information is used to position the cursor. So
  // the range usually spans more then the actual symbol's name and does
  // normally include things like visibility modifiers.
  //
  // The range doesn't have to denote a node range in the sense of a abstract
  // syntax tree. It can therefore not be used to re-construct a hierarchy of
  // the symbols.
  Location location = 4 [(google.api.field_behavior) = REQUIRED];

  // Optional. The name of the symbol containing this symbol. This information is for
  // user interface purposes (e.g. to render a qualifier in the user interface
  // if necessary). It can't be used to re-infer a hierarchy for the document
  // symbols.
  // (-- api-linter: core::0123::resource-annotation=disabled
  //     api-linter: core::0122::name-suffix=disabled --)
  string container_name = 5;
}

// CodeActionClientCapabilities represents a client capabilities of `textDocument/codeAction`
// request.
message CodeActionClientCapabilities {
  message CodeActionLiteralSupport {
    message CodeActionKind {
      // The code action kind values the client supports. When this
      // property exists the client also guarantees that it will
      // handle values outside its set gracefully and falls back
      // to a default value when unknown.
      repeated CodeActionKind value_set = 1;
    }

    // The code action kind is supported with the following value
    // set.
    CodeActionKind code_action_kind = 1;
  }

  // Optional. Whether code action supports dynamic registration.
  bool dynamic_registration = 1;

  // The client supports code action literals as a valid
  // response of the `textDocument/codeAction` request.
  //
  // @since 3.8.0
  CodeActionLiteralSupport code_action_literal_support = 2;

  // Optional. Whether code action supports the `isPreferred` property.
  //
  // @since 3.15.0
  bool is_preferred_support = 3;
}

// CodeActionOptions represents a server capabilities option of codeActionProvider.
message CodeActionOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;

  // CodeActionKinds that this server may return.
  //
  // The list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server
  // may list out every specific kind they provide.
  repeated CodeActionKind code_action_kinds = 2;
}

// CodeActionRegistrationOptions represents a registration option of CodeAction.
message CodeActionRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  CodeActionOptions code_action_options = 2;
}

// CodeActionRequest params for the CodeActionRequest.
message CodeActionRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // The document in which the command was invoked.
  TextDocumentIdentifier text_document = 3 [(google.api.field_behavior) = REQUIRED];

  // The range for which the command was invoked.
  Range range = 4 [(google.api.field_behavior) = REQUIRED];

  // Context carrying additional information.
  CodeActionContext context = 5 [(google.api.field_behavior) = REQUIRED];
}

// CodeActionKind is the kind of a code action.
//
// Kinds are a hierarchical list of identifiers separated by `.`, e.g.
// `"refactor.extract.function"`.
//
// The set of kinds is open and client needs to announce the kinds it supports to the server during
// initialization.
//
// A set of predefined code action kinds.
// (-- api-linter: core::0126::unspecified=disabled --)
enum CodeActionKind {
  // Empty kind.
  EMPTY = 0;

  // Base kind for quickfix actions: 'quickfix'.
  QUICKFIX = 1;

  // Base kind for refactoring actions: 'refactor'.
  REFACTOR = 2;

  // Base kind for refactoring extraction actions: 'refactor.extract'.
  //
  // Example extract actions:
  //
  // - Extract method
  // - Extract function
  // - Extract variable
  // - Extract interface from class
  // - ...
  REFACTOR_EXTRACT = 3;

  // Base kind for refactoring inline actions: 'refactor.inline'.
  //
  // Example inline actions:
  //
  // - Inline function
  // - Inline variable
  // - Inline constant
  // - ...
  REFACTOR_INLINE = 4;

  // Base kind for refactoring rewrite actions: 'refactor.rewrite'.
  //
  // Example rewrite actions:
  //
  // - Convert JavaScript function to class
  // - Add or remove parameter
  // - Encapsulate field
  // - Make method static
  // - Move method to base class
  // - ...
  REFACTOR_REWRITE = 5;

  // Base kind for source actions: `source`.
  //
  // Source code actions apply to the entire file.
  SOURCE = 6;

  // Base kind for an organize imports source action: `source.organizeImports`.
  SOURCE_ORGANIZE_IMPORTS = 7;
}

// CodeActionContext contains additional diagnostic information about the context in which
// a code action is run.
message CodeActionContext {
  // An array of diagnostics known on the client side overlapping the range provided to the
  // `textDocument/codeAction` request. They are provided so that the server knows which
  // errors are currently presented to the user for the given range. There is no guarantee
  // that these accurately reflect the error state of the resource. The primary parameter
  // to compute code actions is the provided range.
  repeated Diagnostic diagnostics = 1 [(google.api.field_behavior) = REQUIRED];

  // Requested kind of actions to return.
  //
  // Actions not of this kind are filtered out by the client before being shown. So servers
  // can omit computing them.
  repeated CodeActionKind only = 2;
}

// CodeAction is a code action represents a change that can be performed in code, e.g. to fix a
// problem or to refactor code.
//
// A CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is
// applied first, then the `command` is executed.
message CodeAction {
  // A short, human-readable, title for this code action.
  string title = 1 [(google.api.field_behavior) = REQUIRED];

  // The kind of the code action.
  //
  // Used to filter code actions.
  CodeActionKind kind = 2;

  // The diagnostics that this code action resolves.
  repeated Diagnostic diagnostics = 3;

  // Optional. Marks this as a preferred action. Preferred actions are used by the `auto fix`
  // command and can be targeted by keybindings.
  //
  // A quick fix should be marked preferred if it properly addresses the underlying error.
  // A refactoring should be marked preferred if it is the most reasonable choice of actions to
  // take.
  //
  // @since 3.15.0
  bool is_preferred = 4;

  // Optional. The workspace edit this code action performs.
  WorkspaceEdit edit = 5;

  // Optional. A command this code action executes. If a code action
  // provides an edit and a command, first the edit is
  // executed and then the command.
  Command command = 6;
}

// CodeLensClientCapabilities represents a client capabilities of `textDocument/codeLens` request.
message CodeLensClientCapabilities {
  // Optional. Whether code lens supports dynamic registration.
  bool dynamic_registration = 1;
}

// CodeLensOptions represents a server capabilities option of codeLensProvider.
message CodeLensOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;

  // Optional. Code lens has a resolve provider as well.
  bool resolve_provider = 2;
}

// CodeLensRegistrationOptions represents a registration option of CodeLens.
message CodeLensRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  CodeLensOptions code_lens_options = 2;
}

// CodeLensRequest is the parameters of a `textDocument/codeLens` request.
message CodeLensRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // The document to request code lens for.
  TextDocumentIdentifier text_document = 3 [(google.api.field_behavior) = REQUIRED];
}

// CodeLens is a code lens represents a command that should be shown along with
// source text, like the number of references, a way to run tests, etc.
//
// A code lens is _unresolved_ when no command is associated to it. For performance
// reasons the creation of a code lens and resolving should be done in two stages.
message CodeLens {
  // The range in which this code lens is valid. Should only span a single line.
  Range range = 1 [(google.api.field_behavior) = REQUIRED];

  // The command this code lens represents.
  Command command = 2;

  // A data entry field that is preserved on a code lens item between
  // a code lens and a code lens resolve request.
  google.protobuf.Any data = 3;
}

// DocumentLinkClientCapabilities represents a client capabilities of `textDocument/documentLink`
// request.
message DocumentLinkClientCapabilities {
  // Optional. Whether document link supports dynamic registration.
  bool dynamic_registration = 1;

  // Optional. Whether the client supports the `tooltip` property on `DocumentLink`.
  //
  // @since 3.15.0
  bool tooltip_support = 2;
}

// DocumentLinkOptions represents a server capabilities option of documentLinkProvider.
message DocumentLinkOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;

  // Optional. Document links have a resolve provider as well.
  bool resolve_provider = 2;
}

// DocumentLinkRegistrationOptions represents a registration option of DocumentLink.
message DocumentLinkRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  DocumentLinkOptions document_link_options = 2;
}

// DocumentLinkRequest is the parameters of a `textDocument/documentLink` request.
message DocumentLinkRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // The document to provide document links for.
  TextDocumentIdentifier text_document = 3 [(google.api.field_behavior) = REQUIRED];
}

// DocumentLink is a document link is a range in a text document that links to an internal or
// external resource, like another text document or a web site.
message DocumentLink {
  // The range this link applies to.
  Range range = 1 [(google.api.field_behavior) = REQUIRED];

  // The uri this link points to. If missing a resolve request is sent later.
  lsp.uri.DocumentURI target = 2;

  // The tooltip text when you hover over this link.
  //
  // If a tooltip is provided, is will be displayed in a string that includes instructions on how to
  // trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary depending on OS,
  // user settings, and localization.
  //
  // @since 3.15.0
  google.protobuf.StringValue tooltip = 3;

  // A data entry field that is preserved on a document link between a
  // DocumentLinkRequest and a DocumentLinkResolveRequest.
  google.protobuf.Any data = 4;
}

// DocumentColorClientCapabilities represents a client capabilities of `textDocument/documentColor`
// request.
message DocumentColorClientCapabilities {
  // Optional. Whether document color supports dynamic registration.
  bool dynamic_registration = 1;
}

// DocumentColorOptions represents a server capabilities option of documentColorProvider.
message DocumentColorOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// DocumentColorRegistrationOptions represents a registration option of DocumentColor.
message DocumentColorRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  StaticRegistrationOptions static_registration_options = 2;
  // extends
  DocumentColorOptions document_color_options = 3;
}

// DocumentColorRequest is the parameters of a `textDocument/documentColor` request.
message DocumentColorRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // The text document.
  TextDocumentIdentifier text_document = 3 [(google.api.field_behavior) = REQUIRED];
}

// ColorInformation represents a color information.
message ColorInformation {
  // The range in the document where this color appears.
  Range range = 1 [(google.api.field_behavior) = REQUIRED];

  // The actual color value for this color range.
  Color color = 2 [(google.api.field_behavior) = REQUIRED];
}

// Color represents a color in RGBA space.
message Color {
  // The red component of this color in the range [0-1].
  //
  // readonly
  int32 red = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The green component of this color in the range [0-1].
  //
  // readonly
  int32 green = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The blue component of this color in the range [0-1].
  //
  // readonly
  int32 blue = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The alpha component of this color in the range [0-1].
  //
  // readonly
  int32 alpha = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// ColorPresentationRequest is the parameters of a `textDocument/colorPresentation` request.
message ColorPresentationRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // The text document.
  TextDocumentIdentifier text_document = 3 [(google.api.field_behavior) = REQUIRED];

  // The color information to request presentations for.
  Color color = 4 [(google.api.field_behavior) = REQUIRED];

  // The range where the color would be inserted. Serves as a context.
  Range range = 5 [(google.api.field_behavior) = REQUIRED];
}

// ColorPresentation represents a respeonse of `textDocument/colorPresentation`.
message ColorPresentation {
  // The label of this color presentation. It will be shown on the color
  // picker header. By default this is also the text that is inserted when selecting
  // this color presentation.
  string label = 1 [(google.api.field_behavior) = REQUIRED];

  // An [edit][TextEdit] which is applied to a document when selecting
  // this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
  // is used.
  TextEdit text_edit = 2;

  // An optional array of additional [text edits](#TextEdit) that are applied when
  // selecting this color presentation. Edits must not overlap with the main
  // [edit][ColorPresentation.textEdit] nor with themselves.
  repeated TextEdit additional_text_edits = 3;
}

// DocumentFormattingClientCapabilities represents a client capabilities of
// `textDocument/formatting` request.
message DocumentFormattingClientCapabilities {
  // Optional. Whether formatting supports dynamic registration.
  bool dynamic_registration = 1;
}

// DocumentFormattingOptions represents a server capabilities option of documentFormattingProvider.
message DocumentFormattingOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// DocumentFormattingRegistrationOptions represents a registration option of DocumentFormatting.
message DocumentFormattingRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  DocumentFormattingOptions document_formatting_options = 2;
}

// DocumentFormattingRequest is the parameters of a `textDocument/formatting` request.
message DocumentFormattingRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;

  // The document to format.
  TextDocumentIdentifier text_document = 2 [(google.api.field_behavior) = REQUIRED];

  // The format options.
  FormattingOptions options = 3 [(google.api.field_behavior) = REQUIRED];
}

// FormattingOptions value-object describing what options formatting should use.
message FormattingOptions {
  // Size of a tab in spaces.
  int32 tab_size = 1;

  // Prefer spaces over tabs.
  bool insert_spaces = 2 [(google.api.field_behavior) = REQUIRED];

  // Optional. Trim trailing whitespace on a line.
  //
  // @since 3.15.0
  bool trim_trailing_whitespace = 3;

  // Optional. Insert a newline character at the end of the file if one does not exist.
  //
  // @since 3.15.0
  bool insert_final_newline = 4;

  // Optional. Trim all newlines after the final newline at the end of the file.
  //
  // @since 3.15.0
  bool trim_final_newlines = 5;

  // (-- api-linter: core::0123::resource-annotation=disabled --)
  message Value {
    oneof value {
      bool enable = 6;

      int32 number = 7;

      string name = 8;
    }
  }

  // Signature for further properties.
  map<string, Value> key = 9;
}

// DocumentRangeFormattingClientCapabilities represents a client capabilities of
// `textDocument/rangeFormatting` request.
message DocumentRangeFormattingClientCapabilities {
  // Optional. Whether formatting supports dynamic registration.
  bool dynamic_registration = 1;
}

// DocumentRangeFormattingOptions represents a server capabilities option of
// documentRangeFormattingProvider.
message DocumentRangeFormattingOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// DocumentRangeFormattingRegistrationOptions represents a registration option of
// DocumentRangeFormatting.
message DocumentRangeFormattingRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  DocumentFormattingOptions document_formatting_options = 2;
}

// DocumentRangeFormattingRequest is the parameters of a `textDocument/rangeFormatting` request.
message DocumentRangeFormattingRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;

  // The document to format.
  TextDocumentIdentifier text_document = 2 [(google.api.field_behavior) = REQUIRED];

  // The range to format
  Range range = 3 [(google.api.field_behavior) = REQUIRED];

  // The format options
  FormattingOptions options = 4 [(google.api.field_behavior) = REQUIRED];
}

// DocumentOnTypeFormattingClientCapabilities represents a client capabilities of
// `textDocument/onTypeFormatting` request.
message DocumentOnTypeFormattingClientCapabilities {
  // Optional. Whether on type formatting supports dynamic registration.
  bool dynamic_registration = 1;
}

// DocumentOnTypeFormattingOptions represents a server capabilities option of
// documentOnTypeFormattingProvider.
message DocumentOnTypeFormattingOptions {
  // A character on which formatting should be triggered, like `}`.
  string first_trigger_character = 1 [(google.api.field_behavior) = REQUIRED];

  // More trigger characters.
  repeated google.protobuf.StringValue more_trigger_character = 2;
}

// DocumentOnTypeFormattingRegistrationOptions represents a registration option of
// DocumentOnTypeFormatting.
message DocumentOnTypeFormattingRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  DocumentOnTypeFormattingOptions document_on_type_formatting_options = 2;
}

// DocumentOnTypeFormattingRequest is the parameters of a `textDocument/onTypeFormatting` request.
message DocumentOnTypeFormattingRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;

  // The character that has been typed.
  string ch = 2 [(google.api.field_behavior) = REQUIRED];

  // The format options.
  FormattingOptions options = 3 [(google.api.field_behavior) = REQUIRED];
}

// RenameClientCapabilities represents a client capabilities of `textDocument/rename` request.
message RenameClientCapabilities {
  // Optional. Whether rename supports dynamic registration.
  bool dynamic_registration = 1;

  // Optional. Client supports testing for validity of rename operations
  // before execution.
  //
  // @since version 3.12.0
  bool prepare_support = 2;
}

// RenameOptions represents a server capabilities option of renameProvider.
message RenameOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;

  // Optional. Renames should be checked and tested before being executed.
  bool prepare_provider = 2;
}

// RenameRegistrationOptions represents a registration option of Rename.
message RenameRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;
  // extends
  RenameOptions rename_options = 2;
}

// RenameRequest is the parameters of a `textDocument/rename` request.
message RenameRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;

  // The new name of the symbol. If the given name is not valid the
  // request must return a [ResponseError](#ResponseError) with an
  // appropriate message set.
  //
  // (-- api-linter: core::0122::name-suffix=disabled --)
  string new_name = 3 [(google.api.field_behavior) = REQUIRED];
}

// PrepareRenameRequest is the parameters of a `textDocument/prepareRename` request.
message PrepareRenameRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
}

// FoldingRangeClientCapabilities represents a client capabilities of `textDocument/foldingRange`
// request.
message FoldingRangeClientCapabilities {
  // Optional. Whether implementation supports dynamic registration for folding range providers. If
  // this is set to `true` the client supports the new `FoldingRangeRegistrationOptions` return
  // value for the corresponding server capability as well.
  bool dynamic_registration = 1;

  // The maximum number of folding ranges that the client prefers to receive per document. The value
  // serves as a hint, servers are free to follow the limit.
  google.protobuf.Int32Value range_limit = 2;

  // Optional. If set, the client signals that it only supports folding complete lines. If set,
  // client will ignore specified `startCharacter` and `endCharacter` properties in a FoldingRange.
  bool line_folding_only = 3;
}

// FoldingRangeOptions represents a server capabilities option of foldingRangeProvider.
message FoldingRangeOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// FoldingRangeRegistrationOptions represents a registration option of FoldingRange.
message FoldingRangeRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;

  FoldingRangeOptions folding_range_options = 2;

  // extends
  StaticRegistrationOptions static_registration_options = 3;
}

// FoldingRangeRequest is the parameters of a `textDocument/foldingRange` request.
message FoldingRangeRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // The text document.
  TextDocumentIdentifier text_document = 3 [(google.api.field_behavior) = REQUIRED];
}

// FoldingRangeKind Enum of known range kinds.
enum FoldingRangeKind {
  // Conventional default for enums. Do not use this.
  FOLDING_RANGE_KIND_UNSPECIFIED = 0;

  // Folding range for a comment.
  //
  // string: 'comment'
  COMMENT_RANGE = 1;

  // Folding range for a imports or includes.
  //
  // string: 'imports'
  IMPORTS_RANGE = 2;

  // Folding range for a region (e.g. `#region`).
  //
  // string: 'region'
  REGION_RANGE = 3;
}

// FoldingRange represents a folding range.
message FoldingRange {
  // The zero-based line number from where the folded range starts.
  int32 start_line = 1 [(google.api.field_behavior) = REQUIRED];

  // The zero-based character offset from where the folded range starts. If not defined, defaults to
  // the length of the start line.
  google.protobuf.Int32Value start_character = 2;

  // The zero-based line number where the folded range ends.
  int32 end_line = 3 [(google.api.field_behavior) = REQUIRED];

  // The zero-based character offset before the folded range ends. If not defined, defaults to the
  // length of the end line.
  google.protobuf.Int32Value end_character = 4;

  // Describes the kind of the folding range such as `comment` or `region`. The kind
  // is used to categorize folding ranges and used by commands like 'Fold all comments'. See
  // [FoldingRangeKind][FoldingRangeKind] for an enumeration of standardized kinds.
  FoldingRangeKind kind = 5;
}

// FoldingRangeClientCapabilities represents a client capabilities of `textDocument/selectionRange`
// request.
message SelectionRangeClientCapabilities {
  // Optional. Whether implementatirn supports dynamic registration for selection range providers.
  // If this is set to `true` the client supports the new `SelectionRangeRegistrationOptions` return
  // value for the corresponding server capability as well.
  bool dynamic_registration = 1;
}

// SelectionRangeOptions represents a server capabilities option of selectionRangeProvider.
message SelectionRangeOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// SelectionRangeRegistrationOptions represents a registration option of SelectionRange.
message SelectionRangeRegistrationOptions {
  SelectionRangeOptions selection_range_options = 1;

  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 2;
  // extends
  StaticRegistrationOptions static_registration_options = 3;
}

// SelectionRangeRequest is the parameters of a `textDocument/selectionRange` request.
message SelectionRangeRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // The text document.
  TextDocumentIdentifier text_document = 3 [(google.api.field_behavior) = REQUIRED];

  // The positions inside the text document.
  repeated Position positions = 4;
}

// SelectionRange represents a range of selection.
message SelectionRange {
  // The [range][Range] of this selection range.
  Range range = 1 [(google.api.field_behavior) = REQUIRED];

  // The parent selection range containing this range. Therefore `parent.range` must contain
  // `this.range`.
  SelectionRange parent = 2;
}

// CallHierarchyClientCapabilities represents a client capabilities of
// `textDocument/prepareCallHierarchy` request.
//
// @since 3.16.0
message CallHierarchyClientCapabilities {
  // Optional. Whether implementation supports dynamic registration. If this is set to `true`
  // the client supports the new
  // `([TextDocumentRegistrationOptions][TextDocumentRegistrationOptions] &
  // [StaticRegistrationOptions][StaticRegistrationOptions])` return value for the corresponding
  // server capability as well.
  bool dynamic_registration = 1;
}

// CallHierarchyOptions represents a server capabilities option of callHierarchyProvider.
//
// @since 3.16.0
message CallHierarchyOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;
}

// CallHierarchyRegistrationOptions represents a registration option of CallHierarchy.
//
// @since 3.16.0
message CallHierarchyRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;

  CallHierarchyOptions call_hierarchy_options = 2;

  // extends
  StaticRegistrationOptions static_registration_options = 3;
}

// CallHierarchyPrepareRequest is the parameters of a `textDocument/prepareCallHierarchy` request.
//
// @since 3.16.0
message CallHierarchyPrepareRequest {
  // extends
  TextDocumentPositionParams text_document_position_params = 1;
  // extends
  WorkDoneProgressParams work_done_progress_params = 2;
}

// CallHierarchyItem represents a item of call hierarchy.
//
// @since 3.16.0
// (-- api-linter: core::0123::resource-annotation=disabled --)
message CallHierarchyItem {
  // The name of this item.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The kind of this item.
  SymbolKind kind = 2 [(google.api.field_behavior) = REQUIRED];

  // Tags for this item.
  repeated SymbolTag tags = 3;

  // More detail for this item, e.g. the signature of a function.
  google.protobuf.StringValue detail = 4;

  // The resource identifier of this item.
  lsp.uri.DocumentURI uri = 5 [(google.api.field_behavior) = REQUIRED];

  // The range enclosing this symbol not including leading/trailing whitespace but everything else,
  // e.g. comments and code.
  Range range = 6 [(google.api.field_behavior) = REQUIRED];

  // The range that should be selected and revealed when this symbol is being picked, e.g. the name
  // of a function. Must be contained by the [`range`][CallHierarchyItem.range].
  Range selection_range = 7 [(google.api.field_behavior) = REQUIRED];
}

// CallHierarchyIncomingCallsRequest is the parameters of a `textDocument/incomingCalls` request.
//
// @since 3.16.0
message CallHierarchyIncomingCallsRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  CallHierarchyItem item = 3 [(google.api.field_behavior) = REQUIRED];
}

// CallHierarchyIncomingCall represents a item of call hierarchy incoming call.
//
// @since 3.16.0
message CallHierarchyIncomingCall {
  // The item that makes the call.
  // (-- api-linter: core::0140::reserved-words=disabled
  //     api-linter: core::0140::prepositions=disabled --)
  CallHierarchyItem from = 1 [(google.api.field_behavior) = REQUIRED];

  // The ranges at which the calls appear. This is relative to the caller
  // denoted by [`this.from`][CallHierarchyIncomingCall.from].
  // (-- api-linter: core::0140::prepositions=disabled --)
  repeated Range from_ranges = 2 [(google.api.field_behavior) = REQUIRED];
}

// CallHierarchyOutgoingCallsRequest is the parameters of a `callHierarchy/outgoingCalls` request.
//
// @since 3.16.0
message CallHierarchyOutgoingCallsRequest {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  CallHierarchyItem item = 3 [(google.api.field_behavior) = REQUIRED];
}

// CallHierarchyOutgoingCall represents a item of call hierarchy outgoing call.
//
// @since 3.16.0
message CallHierarchyOutgoingCall {
  // The item that is called.
  // (-- api-linter: core::0140::prepositions=disabled --)
  CallHierarchyItem to = 1 [(google.api.field_behavior) = REQUIRED];

  // The range at which this item is called. This is the range relative to the caller, e.g the item
  // passed to
  // [`provideCallHierarchyOutgoingCalls`][CallHierarchyItemProvider.provideCallHierarchyOutgoingCalls]
  // and not [`this.to`][CallHierarchyOutgoingCall.to].
  // (-- api-linter: core::0140::prepositions=disabled --)
  repeated Range from_ranges = 2 [(google.api.field_behavior) = REQUIRED];
}

// SemanticTokenTypes represents a semantic token type.
//
// (-- api-linter: core::0192::only-leading-comments=disabled --)
enum SemanticTokenTypes {
  // Conventional default for enums. Do not use this.
  SEMANTIC_TOKEN_TYPES_UNSPECIFIED = 0;

  NAMESPACE = 1;      // 'namespace',
  TYPE = 2;           // 'type',
  CLASS = 3;          // 'class',
  ENUM = 4;           // 'enum',
  INTERFACE = 5;      // 'interface',
  STRUCT = 6;         // 'struct',
  TYPE_PARAMETER = 7; // 'typeParameter',
  PARAMETER = 8;      // 'parameter',
  VARIABLE = 9;       // 'variable',
  PROPERTY = 10;      // 'property',
  ENUMMEMBER = 11;    // 'enumMember',
  EVENT = 12;         // 'event',
  FUNCTION = 13;      // 'function',
  MEMBER = 14;        // 'member',
  MACRO = 15;         // 'macro',
  KEYWORD = 16;       // 'keyword',
  MODIFIER = 17;      // 'modifier',
  COMMENT = 18;       // 'comment',
  STRING = 19;        // 'string',
  NUMBER = 20;        // 'number',
  REGEXP = 21;        // 'regexp',
  OPERATOR = 22;      // 'operator'
}

// SemanticTokenModifiers represents a semantic token modifiers.
//
// (-- api-linter: core::0192::only-leading-comments=disabled --)
enum SemanticTokenModifiers {
  // Conventional default for enums. Do not use this.
  SEMANTIC_TOKEN_MODIFIERS_UNSPECIFIED = 0;

  DECLARATION = 1;      // 'declaration',
  DEFINITION = 2;       // 'definition',
  READONLY = 3;         //  'readonly',
  STATIC = 4;           //  'static',
  DEPRECATED = 5;       //  'deprecated',
  ABSTRACT = 6;         //  'abstract',
  ASYNC = 7;            //  'async',
  MODIFICATION = 8;     //  'modification',
  DOCUMENTATION = 9;    //  'documentation',
  DEFAULT_LIBRARY = 10; //  'defaultLibrary'
}

// SemanticTokensLegend represents a legend of semantic tokens.
//
// @since 3.16.0
message SemanticTokensLegend {
  // The token types a server uses.
  repeated SemanticTokenTypes token_types = 1;

  // The token modifiers a server uses.
  repeated SemanticTokenModifiers token_modifiers = 2;
}

// TokenFormat represents a format of token.
enum TokenFormat {
  // Conventional default for enums. Do not use this.
  TOKEN_FORMAT_UNSPECIFIED = 0;

  // string: 'relative'
  RELATIVE = 1;
}

// SemanticTokensClientCapabilities represents a client capabilities of
// `textDocument/semanticTokens/*` request.
//
// @since 3.16.0
message SemanticTokensClientCapabilities {
  // Optional. Whether implementation supports dynamic registration. If this is set to `true`
  // the client supports the new
  // `([TextDocumentRegistrationOptions][TextDocumentRegistrationOptions] &
  // [StaticRegistrationOptions][StaticRegistrationOptions])` return value for the corresponding
  // server capability as well.
  bool dynamic_registration = 1;

  message Requests {
    oneof range {
      bool enable_range = 2;

      google.protobuf.NullValue empty = 3;
    }

    oneof full {
      bool enable_full = 4;

      bool delta = 5;
    }
  }

  // Which requests the client supports and might send to the server.
  Requests requests = 2 [(google.api.field_behavior) = REQUIRED];

  // The token types that the client supports.
  repeated SemanticTokenTypes token_types = 3 [(google.api.field_behavior) = REQUIRED];

  // The token modifiers that the client supports.
  repeated SemanticTokenModifiers token_modifiers = 4 [(google.api.field_behavior) = REQUIRED];

  // The formats the clients supports.
  repeated TokenFormat formats = 5 [(google.api.field_behavior) = REQUIRED];
}

// SemanticTokensOptions represents a server capabilities option of semanticTokensProvider.
//
// @since 3.16.0
message SemanticTokensOptions {
  // extends
  WorkDoneProgressOptions work_done_progress_options = 1;

  // The legend used by the server
  SemanticTokensLegend legend = 2 [(google.api.field_behavior) = REQUIRED];

  oneof range {
    bool enable_range = 3;

    google.protobuf.NullValue empty = 4;
  }

  oneof full {
    bool enable_full = 5;

    bool delta = 6;
  }
}

// SemanticTokensRegistrationOptions represents a registration option of SemanticTokens.
//
// @since 3.16.0
message SemanticTokensRegistrationOptions {
  // extends
  TextDocumentRegistrationOptions text_document_registration_options = 1;

  SemanticTokensOptions semantic_tokens_options = 2;

  // extends
  StaticRegistrationOptions static_registration_options = 3;
}

// SemanticTokensParams is the parameters of a `textDocument/semanticTokens/full` request.
//
// @since 3.16.0
message SemanticTokensParams {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // The text document.
  TextDocumentIdentifier text_document = 3 [(google.api.field_behavior) = REQUIRED];
}

// SemanticTokens represents a list of semantic token.
//
// @since 3.16.0
message SemanticTokens {
  // An optional result id. If provided and clients support delta updating
  // the client will include the result id in the next semantic token request.
  // A server can then instead of computing all semantic tokens again simply
  // send a delta.
  google.protobuf.StringValue result_id = 1;

  // The actual tokens.
  repeated int32 data = 2 [(google.api.field_behavior) = REQUIRED];
}

// SemanticTokensPartialResult represents a partial result of `textDocument/semanticTokens/full`
// request.
//
// @since 3.16.0
message SemanticTokensPartialResult {
  repeated int32 data = 1 [(google.api.field_behavior) = REQUIRED];
}

// SemanticTokensDeltaParams is the parameters of a `textDocument/semanticTokens/full/delta`
// request.
//
// @since 3.16.0
message SemanticTokensDeltaParams {
  // extends
  WorkDoneProgressParams work_done_progress_params = 1;
  // extends
  PartialResultParams partial_result_params = 2;

  // The text document.
  TextDocumentIdentifier text_document = 3 [(google.api.field_behavior) = REQUIRED];

  // The previous result id.
  string previous_result_id = 4 [(google.api.field_behavior) = REQUIRED];
}

// SemanticTokensDelta represents a list of semantic delta token.
message SemanticTokensDelta {
  // readonly
  string result_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // The semantic token edits to transform a previous result into a new result.
  repeated SemanticTokensEdit edits = 2 [(google.api.field_behavior) = REQUIRED];
}

// SemanticTokensEdit represents a semantic token edit.
message SemanticTokensEdit {
  // The start offset of the edit.
  int32 start = 1 [(google.api.field_behavior) = REQUIRED];

  // The count of elements to remove.
  int32 delete_count = 2 [(google.api.field_behavior) = REQUIRED];

  // The elements to insert.
  repeated int32 data = 3;
}

// SemanticTokensDeltaPartialResult represents a partial result of
// `textDocument/semanticTokens/full/delta` request.
message SemanticTokensDeltaPartialResult {
  repeated SemanticTokensEdit edits = 2 [(google.api.field_behavior) = REQUIRED];
}
