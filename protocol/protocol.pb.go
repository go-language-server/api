// Copyright 2020 The Go Language Server Authors
// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: protocol/protocol.proto

package protocol

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"

	uri "go.lsp.dev/api/uri"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// DiagnosticSeverity represents a diagnostic severity level.
type DiagnosticSeverity int32

const (
	// Conventional default for enums. Do not use this.
	DiagnosticSeverity_DIAGNOSTIC_SEVERITY_UNSPECIFIED DiagnosticSeverity = 0
	// Reports an error.
	DiagnosticSeverity_ERROR DiagnosticSeverity = 1
	// Reports a warning.
	DiagnosticSeverity_WARNING DiagnosticSeverity = 2
	// Reports an information.
	// (-- api-linter: core::0140::abbreviations=disabled --)
	DiagnosticSeverity_INFORMATION DiagnosticSeverity = 3
	// Reports a hint.
	DiagnosticSeverity_HINT DiagnosticSeverity = 4
)

// Enum value maps for DiagnosticSeverity.
var (
	DiagnosticSeverity_name = map[int32]string{
		0: "DIAGNOSTIC_SEVERITY_UNSPECIFIED",
		1: "ERROR",
		2: "WARNING",
		3: "INFORMATION",
		4: "HINT",
	}
	DiagnosticSeverity_value = map[string]int32{
		"DIAGNOSTIC_SEVERITY_UNSPECIFIED": 0,
		"ERROR":                           1,
		"WARNING":                         2,
		"INFORMATION":                     3,
		"HINT":                            4,
	}
)

func (x DiagnosticSeverity) Enum() *DiagnosticSeverity {
	p := new(DiagnosticSeverity)
	*p = x
	return p
}

func (x DiagnosticSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_protocol_proto_enumTypes[0].Descriptor()
}

func (DiagnosticSeverity) Type() protoreflect.EnumType {
	return &file_protocol_protocol_proto_enumTypes[0]
}

func (x DiagnosticSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticSeverity.Descriptor instead.
func (DiagnosticSeverity) EnumDescriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{0}
}

// DiagnosticTag is the diagnostic tags.
//
// @since 3.15.0
type DiagnosticTag int32

const (
	// Conventional default for enums. Do not use this.
	DiagnosticTag_DIAGNOSTIC_TAG_UNSPECIFIED DiagnosticTag = 0
	// Unused or unnecessary code.
	//
	// Clients are allowed to render diagnostics with this tag faded out instead of having
	// an error squiggle.
	DiagnosticTag_UNNECESSARY DiagnosticTag = 1
	// Deprecated or obsolete code.
	//
	// Clients are allowed to rendered diagnostics with this tag strike through.
	DiagnosticTag_DEPRECATED DiagnosticTag = 2
)

// Enum value maps for DiagnosticTag.
var (
	DiagnosticTag_name = map[int32]string{
		0: "DIAGNOSTIC_TAG_UNSPECIFIED",
		1: "UNNECESSARY",
		2: "DEPRECATED",
	}
	DiagnosticTag_value = map[string]int32{
		"DIAGNOSTIC_TAG_UNSPECIFIED": 0,
		"UNNECESSARY":                1,
		"DEPRECATED":                 2,
	}
)

func (x DiagnosticTag) Enum() *DiagnosticTag {
	p := new(DiagnosticTag)
	*p = x
	return p
}

func (x DiagnosticTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticTag) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_protocol_proto_enumTypes[1].Descriptor()
}

func (DiagnosticTag) Type() protoreflect.EnumType {
	return &file_protocol_protocol_proto_enumTypes[1]
}

func (x DiagnosticTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticTag.Descriptor instead.
func (DiagnosticTag) EnumDescriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{1}
}

// ResourceOperationKind is the kind of resource operations supported by the client.
type ResourceOperationKind int32

const (
	// Conventional default for enums. Do not use this.
	ResourceOperationKind_RESOURCE_OPERATION_KIND_UNSPECIFIED ResourceOperationKind = 0
	// Supports creating new files and folders.
	ResourceOperationKind_CREATE ResourceOperationKind = 1
	// Supports renaming existing files and folders.
	ResourceOperationKind_RENAME ResourceOperationKind = 2
	// Supports deleting existing files and folders.
	ResourceOperationKind_DELETE ResourceOperationKind = 3
)

// Enum value maps for ResourceOperationKind.
var (
	ResourceOperationKind_name = map[int32]string{
		0: "RESOURCE_OPERATION_KIND_UNSPECIFIED",
		1: "CREATE",
		2: "RENAME",
		3: "DELETE",
	}
	ResourceOperationKind_value = map[string]int32{
		"RESOURCE_OPERATION_KIND_UNSPECIFIED": 0,
		"CREATE":                              1,
		"RENAME":                              2,
		"DELETE":                              3,
	}
)

func (x ResourceOperationKind) Enum() *ResourceOperationKind {
	p := new(ResourceOperationKind)
	*p = x
	return p
}

func (x ResourceOperationKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceOperationKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_protocol_proto_enumTypes[2].Descriptor()
}

func (ResourceOperationKind) Type() protoreflect.EnumType {
	return &file_protocol_protocol_proto_enumTypes[2]
}

func (x ResourceOperationKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceOperationKind.Descriptor instead.
func (ResourceOperationKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{2}
}

type FailureHandlingKind int32

const (
	// Conventional default for enums. Do not use this.
	FailureHandlingKind_FAILURE_HANDLING_KIND_UNSPECIFIED FailureHandlingKind = 0
	// Applying the workspace change is simply aborted if one of the changes provided
	// fails. All operations executed before the failing operation stay executed.
	FailureHandlingKind_ABORT FailureHandlingKind = 1
	// All operations are executed transactional. That means they either all
	// succeed or no changes at all are applied to the workspace.
	FailureHandlingKind_TRANSACTIONAL FailureHandlingKind = 2
	// If the workspace edit contains only textual file changes they are executed transactional.
	// If resource changes (create, rename or delete file) are part of the change the failure
	// handling strategy is abort.
	FailureHandlingKind_TEXT_ONLY_TRANSACTIONAL FailureHandlingKind = 3
	// The client tries to undo the operations already executed. But there is no
	// guarantee that this is succeeding.
	FailureHandlingKind_UNDO FailureHandlingKind = 4
)

// Enum value maps for FailureHandlingKind.
var (
	FailureHandlingKind_name = map[int32]string{
		0: "FAILURE_HANDLING_KIND_UNSPECIFIED",
		1: "ABORT",
		2: "TRANSACTIONAL",
		3: "TEXT_ONLY_TRANSACTIONAL",
		4: "UNDO",
	}
	FailureHandlingKind_value = map[string]int32{
		"FAILURE_HANDLING_KIND_UNSPECIFIED": 0,
		"ABORT":                             1,
		"TRANSACTIONAL":                     2,
		"TEXT_ONLY_TRANSACTIONAL":           3,
		"UNDO":                              4,
	}
)

func (x FailureHandlingKind) Enum() *FailureHandlingKind {
	p := new(FailureHandlingKind)
	*p = x
	return p
}

func (x FailureHandlingKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureHandlingKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_protocol_proto_enumTypes[3].Descriptor()
}

func (FailureHandlingKind) Type() protoreflect.EnumType {
	return &file_protocol_protocol_proto_enumTypes[3]
}

func (x FailureHandlingKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureHandlingKind.Descriptor instead.
func (FailureHandlingKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{3}
}

// MarkupKind describes the content type that a client supports in various
// result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
//
// Please note that `MarkupKinds` must not start with a `$`. This kinds
// are reserved for internal usage.
type MarkupKind int32

const (
	// Conventional default for enums. Do not use this.
	MarkupKind_MARKUP_KIND_UNSPECIFIED MarkupKind = 0
	// Plain text is supported as a content format
	MarkupKind_PLAIN_TEXT MarkupKind = 1
	// Markdown is supported as a content format
	MarkupKind_MARKDOWN MarkupKind = 2
)

// Enum value maps for MarkupKind.
var (
	MarkupKind_name = map[int32]string{
		0: "MARKUP_KIND_UNSPECIFIED",
		1: "PLAIN_TEXT",
		2: "MARKDOWN",
	}
	MarkupKind_value = map[string]int32{
		"MARKUP_KIND_UNSPECIFIED": 0,
		"PLAIN_TEXT":              1,
		"MARKDOWN":                2,
	}
)

func (x MarkupKind) Enum() *MarkupKind {
	p := new(MarkupKind)
	*p = x
	return p
}

func (x MarkupKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarkupKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_protocol_proto_enumTypes[4].Descriptor()
}

func (MarkupKind) Type() protoreflect.EnumType {
	return &file_protocol_protocol_proto_enumTypes[4]
}

func (x MarkupKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarkupKind.Descriptor instead.
func (MarkupKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{4}
}

// TraceValue represents the level of verbosity with which the server systematically reports its
// execution trace using $/logTrace notifications. The initial trace value is set by the client at
// initialization and can be modified later using the $/setTrace notification.
type TraceValue int32

const (
	// Conventional default for enums. Do not use this.
	TraceValue_TRACE_VALUE_UNSPECIFIED TraceValue = 0
	// trace is off.
	TraceValue_OFF TraceValue = 1
	// message trace level.
	TraceValue_MESSAGE TraceValue = 2
	// verbose trace level.
	TraceValue_VERBOSE TraceValue = 3
)

// Enum value maps for TraceValue.
var (
	TraceValue_name = map[int32]string{
		0: "TRACE_VALUE_UNSPECIFIED",
		1: "OFF",
		2: "MESSAGE",
		3: "VERBOSE",
	}
	TraceValue_value = map[string]int32{
		"TRACE_VALUE_UNSPECIFIED": 0,
		"OFF":                     1,
		"MESSAGE":                 2,
		"VERBOSE":                 3,
	}
)

func (x TraceValue) Enum() *TraceValue {
	p := new(TraceValue)
	*p = x
	return p
}

func (x TraceValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceValue) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_protocol_proto_enumTypes[5].Descriptor()
}

func (TraceValue) Type() protoreflect.EnumType {
	return &file_protocol_protocol_proto_enumTypes[5]
}

func (x TraceValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TraceValue.Descriptor instead.
func (TraceValue) EnumDescriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{5}
}

// DocumentURI are transferred as strings. The URI’s format is defined in
// http://tools.ietf.org/html/rfc3986.
type DocumentURI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentUri string `protobuf:"bytes,1,opt,name=document_uri,json=documentUri,proto3" json:"document_uri,omitempty"`
}

func (x *DocumentURI) Reset() {
	*x = DocumentURI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentURI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentURI) ProtoMessage() {}

func (x *DocumentURI) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentURI.ProtoReflect.Descriptor instead.
func (*DocumentURI) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *DocumentURI) GetDocumentUri() string {
	if x != nil {
		return x.DocumentUri
	}
	return ""
}

// Position in a text document expressed as zero-based line and zero-based character offset.
// A position is between two characters like an ‘insert’ cursor in a editor.
// Special values like for example -1 to denote the end of a line are not supported.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Line position in a document (zero-based).
	Line int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// Character offset on a line in a document (zero-based). Assuming that the line is
	// represented as a string, the `character` value represents the gap between the
	// `character` and `character + 1`.
	//
	// If the character value is greater than the line length it defaults back to the
	// line length.
	//
	// The offsets are based on a UTF-16 string representation.
	Character int32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *Position) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetCharacter() int32 {
	if x != nil {
		return x.Character
	}
	return 0
}

// Range in a text document expressed as (zero-based) start and end positions.
//
// A range is comparable to a selection in an editor. Therefore the end position is exclusive.
// If you want to specify a range that contains a line including the line ending character(s)
// then use an end position denoting the start of the next line.
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range's start position.
	Start *Position `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// The range's end position.
	End *Position `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *Range) GetStart() *Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Range) GetEnd() *Position {
	if x != nil {
		return x.End
	}
	return nil
}

// Location represents a location inside a resource, such as a line inside a text file.
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text document's uri.
	Uri *uri.URI `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// The location's range.
	Range *Range `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *Location) GetUri() *uri.URI {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *Location) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// LocationLink represents a link between a source and a target location.
type LocationLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The span of the origin of this link.
	//
	// Used as the underlined span for mouse interaction. Defaults to the word range at
	// the mouse position.
	OriginSelectionRange *Range `protobuf:"bytes,1,opt,name=origin_selection_range,json=originSelectionRange,proto3" json:"origin_selection_range,omitempty"`
	// The target resource identifier of this link.
	TargetUri *uri.URI `protobuf:"bytes,2,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
	// The full target range of this link.
	//
	// If the target for example is a symbol then target range is the range enclosing this symbol not
	// including leading/trailing whitespace but everything else like comments. This information is
	// typically used to highlight the range in the editor.
	TargetRange *Range `protobuf:"bytes,3,opt,name=target_range,json=targetRange,proto3" json:"target_range,omitempty"`
	// The range that should be selected and revealed when this link is being followed, e.g the name
	// of a function. Must be contained by the the `targetRange`. See also
	// [DocumentSymbol#range][DocumentSymbol].
	TargetSelectionRange *Range `protobuf:"bytes,4,opt,name=target_selection_range,json=targetSelectionRange,proto3" json:"target_selection_range,omitempty"`
}

func (x *LocationLink) Reset() {
	*x = LocationLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationLink) ProtoMessage() {}

func (x *LocationLink) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationLink.ProtoReflect.Descriptor instead.
func (*LocationLink) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *LocationLink) GetOriginSelectionRange() *Range {
	if x != nil {
		return x.OriginSelectionRange
	}
	return nil
}

func (x *LocationLink) GetTargetUri() *uri.URI {
	if x != nil {
		return x.TargetUri
	}
	return nil
}

func (x *LocationLink) GetTargetRange() *Range {
	if x != nil {
		return x.TargetRange
	}
	return nil
}

func (x *LocationLink) GetTargetSelectionRange() *Range {
	if x != nil {
		return x.TargetSelectionRange
	}
	return nil
}

// Diagnostic represents a diagnostic, such as a compiler error or warning. Diagnostic objects are
// only valid in the scope of a resource.
type Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range at which the message applies.
	Range *Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// Optional. The diagnostic's severity. Can be omitted. If omitted it is up to the
	// client to interpret diagnostics as error, warning, info or hint.
	Severity DiagnosticSeverity `protobuf:"varint,2,opt,name=severity,proto3,enum=protocol.DiagnosticSeverity" json:"severity,omitempty"`
	// Optional. The diagnostic's code, which might appear in the user interface.
	Code *wrappers.Int32Value `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Optional. A human-readable string describing the source of this
	// diagnostic, e.g. 'typescript' or 'super lint'.
	Source *wrappers.StringValue `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// The diagnostic's message.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// Optional. Additional metadata about the diagnostic.
	//
	// @since 3.15.0
	Tags []DiagnosticTag `protobuf:"varint,6,rep,packed,name=tags,proto3,enum=protocol.DiagnosticTag" json:"tags,omitempty"`
	// Optional. An array of related diagnostic information, e.g. when symbol-names within
	// a scope collide all definitions can be marked via this property.
	// (-- api-linter: core::0140::abbreviations=disabled --)
	RelatedInformation []*DiagnosticRelatedInformation `protobuf:"bytes,7,rep,name=related_information,json=relatedInformation,proto3" json:"related_information,omitempty"`
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage() {}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *Diagnostic) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Diagnostic) GetSeverity() DiagnosticSeverity {
	if x != nil {
		return x.Severity
	}
	return DiagnosticSeverity_DIAGNOSTIC_SEVERITY_UNSPECIFIED
}

func (x *Diagnostic) GetCode() *wrappers.Int32Value {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Diagnostic) GetSource() *wrappers.StringValue {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Diagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Diagnostic) GetTags() []DiagnosticTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Diagnostic) GetRelatedInformation() []*DiagnosticRelatedInformation {
	if x != nil {
		return x.RelatedInformation
	}
	return nil
}

// DiagnosticRelatedInformation represents a related message and source code location for a
// diagnostic.
//
// This should be used to point to code locations that cause or are related to a diagnostics,
// e.g when duplicating a symbol in a scope.
// (-- api-linter: core::0140::abbreviations=disabled --)
type DiagnosticRelatedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The location of this related diagnostic information.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// The message of this related diagnostic information.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DiagnosticRelatedInformation) Reset() {
	*x = DiagnosticRelatedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticRelatedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticRelatedInformation) ProtoMessage() {}

func (x *DiagnosticRelatedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticRelatedInformation.ProtoReflect.Descriptor instead.
func (*DiagnosticRelatedInformation) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *DiagnosticRelatedInformation) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DiagnosticRelatedInformation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Command represents a reference to a command.
//
// Provides a title which will be used to represent a command in the UI. Commands are identified by
// a string identifier. The recommended way to handle commands is to implement their execution on
// the server side if the client and server provides the corresponding capabilities.
// Alternatively the tool extension code could handle the command.
//
// The protocol currently doesn’t specify a set of well-known commands.
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title of the command, like `save`.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// The identifier of the actual command handler.
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// Arguments that the command handler should be
	// invoked with.
	// (-- api-linter: core::0140::reserved-words=disabled --)
	Arguments []*any.Any `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *Command) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Command) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Command) GetArguments() []*any.Any {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// TextEdit is a textual edit applicable to a text document.
type TextEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range of the text document to be manipulated. To insert
	// text into a document create a range where start === end.
	Range *Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// The string to be inserted. For delete operations use an
	// empty string.
	NewText string `protobuf:"bytes,2,opt,name=new_text,json=newText,proto3" json:"new_text,omitempty"`
}

func (x *TextEdit) Reset() {
	*x = TextEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextEdit) ProtoMessage() {}

func (x *TextEdit) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextEdit.ProtoReflect.Descriptor instead.
func (*TextEdit) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *TextEdit) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *TextEdit) GetNewText() string {
	if x != nil {
		return x.NewText
	}
	return ""
}

// TextDocumentEdit describes textual changes on a single text document.
//
// The text document is referred to as a VersionedTextDocumentIdentifier to allow clients to check
// the text document version before an edit is applied. A TextDocumentEdit describes all changes on
// a version Si and after they are applied move the document to version Si+1. So the creator of a
// TextDocumentEdit doesn’t need to sort the array of edits or do any kind of ordering. However the
// edits must be non overlapping.
type TextDocumentEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text document to change.
	TextDocument *VersionedTextDocumentIdentifier `protobuf:"bytes,1,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// The edits to be applied.
	Edits []*TextEdit `protobuf:"bytes,2,rep,name=edits,proto3" json:"edits,omitempty"`
}

func (x *TextDocumentEdit) Reset() {
	*x = TextDocumentEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentEdit) ProtoMessage() {}

func (x *TextDocumentEdit) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentEdit.ProtoReflect.Descriptor instead.
func (*TextDocumentEdit) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *TextDocumentEdit) GetTextDocument() *VersionedTextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *TextDocumentEdit) GetEdits() []*TextEdit {
	if x != nil {
		return x.Edits
	}
	return nil
}

// CreateFileOptions is the options to create a file.
type CreateFileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Overwrite existing file. Overwrite wins over `ignoreIfExists`.
	Overwrite bool `protobuf:"varint,1,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	// Optional. Ignore if exists.
	IgnoreIfExists bool `protobuf:"varint,2,opt,name=ignore_if_exists,json=ignoreIfExists,proto3" json:"ignore_if_exists,omitempty"`
}

func (x *CreateFileOptions) Reset() {
	*x = CreateFileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileOptions) ProtoMessage() {}

func (x *CreateFileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileOptions.ProtoReflect.Descriptor instead.
func (*CreateFileOptions) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *CreateFileOptions) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *CreateFileOptions) GetIgnoreIfExists() bool {
	if x != nil {
		return x.IgnoreIfExists
	}
	return false
}

// CreateFile create file operation.
type CreateFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of CreateFile message.
	// (-- api-linter: core::0192::only-leading-comments=disabled --)
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"` // always 'create'
	// The resource to create.
	Uri *uri.URI `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// Optional. Additional options
	Options *CreateFileOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateFile) Reset() {
	*x = CreateFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFile) ProtoMessage() {}

func (x *CreateFile) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFile.ProtoReflect.Descriptor instead.
func (*CreateFile) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{11}
}

func (x *CreateFile) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CreateFile) GetUri() *uri.URI {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *CreateFile) GetOptions() *CreateFileOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// RenameFileOptions is the options to rename a file.
type RenameFileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Overwrite target if existing. Overwrite wins over `ignoreIfExists`.
	Overwrite bool `protobuf:"varint,1,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	// Optional. Ignores if target exists.
	IgnoreIfExists bool `protobuf:"varint,2,opt,name=ignore_if_exists,json=ignoreIfExists,proto3" json:"ignore_if_exists,omitempty"`
}

func (x *RenameFileOptions) Reset() {
	*x = RenameFileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameFileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFileOptions) ProtoMessage() {}

func (x *RenameFileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFileOptions.ProtoReflect.Descriptor instead.
func (*RenameFileOptions) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{12}
}

func (x *RenameFileOptions) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *RenameFileOptions) GetIgnoreIfExists() bool {
	if x != nil {
		return x.IgnoreIfExists
	}
	return false
}

// RenameFile rename file operation.
type RenameFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of RenameFile message.
	//
	// always 'rename'
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// The old (existing) location.
	OldUri *uri.URI `protobuf:"bytes,2,opt,name=old_uri,json=oldUri,proto3" json:"old_uri,omitempty"`
	// The new location.
	NewUri *uri.URI `protobuf:"bytes,3,opt,name=new_uri,json=newUri,proto3" json:"new_uri,omitempty"`
	// Optional. Rename options.
	Options *RenameFileOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *RenameFile) Reset() {
	*x = RenameFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFile) ProtoMessage() {}

func (x *RenameFile) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFile.ProtoReflect.Descriptor instead.
func (*RenameFile) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{13}
}

func (x *RenameFile) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RenameFile) GetOldUri() *uri.URI {
	if x != nil {
		return x.OldUri
	}
	return nil
}

func (x *RenameFile) GetNewUri() *uri.URI {
	if x != nil {
		return x.NewUri
	}
	return nil
}

func (x *RenameFile) GetOptions() *RenameFileOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// DeleteFileOptions is the options to delete a file.
type DeleteFileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Delete the content recursively if a folder is denoted.
	Recursive bool `protobuf:"varint,1,opt,name=recursive,proto3" json:"recursive,omitempty"`
	// Optional. Ignore the operation if the file doesn't exist.
	IgnoreIfExists bool `protobuf:"varint,2,opt,name=ignore_if_exists,json=ignoreIfExists,proto3" json:"ignore_if_exists,omitempty"`
}

func (x *DeleteFileOptions) Reset() {
	*x = DeleteFileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileOptions) ProtoMessage() {}

func (x *DeleteFileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileOptions.ProtoReflect.Descriptor instead.
func (*DeleteFileOptions) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteFileOptions) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *DeleteFileOptions) GetIgnoreIfExists() bool {
	if x != nil {
		return x.IgnoreIfExists
	}
	return false
}

// DeleteFile delete file operation.
type DeleteFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of DeleteFile message.
	//
	// always 'delete'
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// The file to delete.
	Uri *uri.URI `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// Optional. Delete options.
	Options *DeleteFileOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *DeleteFile) Reset() {
	*x = DeleteFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFile) ProtoMessage() {}

func (x *DeleteFile) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFile.ProtoReflect.Descriptor instead.
func (*DeleteFile) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteFile) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DeleteFile) GetUri() *uri.URI {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *DeleteFile) GetOptions() *DeleteFileOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// FileResourceChange allow servers to create, rename and delete files and folders via the client.
//
// Note that the names talk about files but the operations are supposed to work on files and
// folders. This is in line with other naming in the Language Server Protocol (see file watchers
// which can watch files and folders).
//
// New in version 3.13.
type FileResourceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to File:
	//	*FileResourceChange_CreateFile
	//	*FileResourceChange_RenameFile
	//	*FileResourceChange_DeleteFile
	File isFileResourceChange_File `protobuf_oneof:"file"`
}

func (x *FileResourceChange) Reset() {
	*x = FileResourceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileResourceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResourceChange) ProtoMessage() {}

func (x *FileResourceChange) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResourceChange.ProtoReflect.Descriptor instead.
func (*FileResourceChange) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{16}
}

func (m *FileResourceChange) GetFile() isFileResourceChange_File {
	if m != nil {
		return m.File
	}
	return nil
}

func (x *FileResourceChange) GetCreateFile() *CreateFile {
	if x, ok := x.GetFile().(*FileResourceChange_CreateFile); ok {
		return x.CreateFile
	}
	return nil
}

func (x *FileResourceChange) GetRenameFile() *RenameFile {
	if x, ok := x.GetFile().(*FileResourceChange_RenameFile); ok {
		return x.RenameFile
	}
	return nil
}

func (x *FileResourceChange) GetDeleteFile() *DeleteFile {
	if x, ok := x.GetFile().(*FileResourceChange_DeleteFile); ok {
		return x.DeleteFile
	}
	return nil
}

type isFileResourceChange_File interface {
	isFileResourceChange_File()
}

type FileResourceChange_CreateFile struct {
	// CreateFile create file operation.
	CreateFile *CreateFile `protobuf:"bytes,1,opt,name=create_file,json=createFile,proto3,oneof"`
}

type FileResourceChange_RenameFile struct {
	// RenameFile rename file operation.
	RenameFile *RenameFile `protobuf:"bytes,2,opt,name=rename_file,json=renameFile,proto3,oneof"`
}

type FileResourceChange_DeleteFile struct {
	// DeleteFile delete file operation.
	DeleteFile *DeleteFile `protobuf:"bytes,3,opt,name=delete_file,json=deleteFile,proto3,oneof"`
}

func (*FileResourceChange_CreateFile) isFileResourceChange_File() {}

func (*FileResourceChange_RenameFile) isFileResourceChange_File() {}

func (*FileResourceChange_DeleteFile) isFileResourceChange_File() {}

// WorkspaceEdit a workspace edit represents changes to many resources managed in the workspace. The
// edit should either provide changes or documentChanges. If the client can handle versioned
// document edits and if documentChanges are present, the latter are preferred over changes.
type WorkspaceEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds changes to existing resources.
	//
	// The map key is uri.URI
	// (-- api-linter: core::0192::only-leading-comments=disabled --)
	Changes map[string]*WorkspaceEdit_TextEdits `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// document_changes Depending on the client capability
	// `workspace.workspaceEdit.resourceOperations` document changes are either an array of
	// `TextDocumentEdit`s to express changes to n different text documents where each text document
	// edit addresses a specific version of a text document. Or it can contain above
	// `TextDocumentEdit`s mixed with create, rename and delete file / folder operations.
	//
	// Whether a client supports versioned document edits is expressed via
	// `workspace.workspaceEdit.documentChanges` client capability.
	//
	// If a client neither supports `documentChanges` nor `workspace.workspaceEdit.resourceOperations`
	// then only plain `TextEdit`s using the `changes` property are supported.
	//
	// Types that are assignable to DocumentChanges:
	//	*WorkspaceEdit_TextDocumentEdits_
	//	*WorkspaceEdit_CreateFiles_
	//	*WorkspaceEdit_RenameFiles_
	//	*WorkspaceEdit_DeleteFiles_
	DocumentChanges isWorkspaceEdit_DocumentChanges `protobuf_oneof:"document_changes"`
}

func (x *WorkspaceEdit) Reset() {
	*x = WorkspaceEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceEdit) ProtoMessage() {}

func (x *WorkspaceEdit) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceEdit.ProtoReflect.Descriptor instead.
func (*WorkspaceEdit) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{17}
}

func (x *WorkspaceEdit) GetChanges() map[string]*WorkspaceEdit_TextEdits {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (m *WorkspaceEdit) GetDocumentChanges() isWorkspaceEdit_DocumentChanges {
	if m != nil {
		return m.DocumentChanges
	}
	return nil
}

func (x *WorkspaceEdit) GetTextDocumentEdits() *WorkspaceEdit_TextDocumentEdits {
	if x, ok := x.GetDocumentChanges().(*WorkspaceEdit_TextDocumentEdits_); ok {
		return x.TextDocumentEdits
	}
	return nil
}

func (x *WorkspaceEdit) GetCreateFiles() *WorkspaceEdit_CreateFiles {
	if x, ok := x.GetDocumentChanges().(*WorkspaceEdit_CreateFiles_); ok {
		return x.CreateFiles
	}
	return nil
}

func (x *WorkspaceEdit) GetRenameFiles() *WorkspaceEdit_RenameFiles {
	if x, ok := x.GetDocumentChanges().(*WorkspaceEdit_RenameFiles_); ok {
		return x.RenameFiles
	}
	return nil
}

func (x *WorkspaceEdit) GetDeleteFiles() *WorkspaceEdit_DeleteFiles {
	if x, ok := x.GetDocumentChanges().(*WorkspaceEdit_DeleteFiles_); ok {
		return x.DeleteFiles
	}
	return nil
}

type isWorkspaceEdit_DocumentChanges interface {
	isWorkspaceEdit_DocumentChanges()
}

type WorkspaceEdit_TextDocumentEdits_ struct {
	TextDocumentEdits *WorkspaceEdit_TextDocumentEdits `protobuf:"bytes,2,opt,name=text_document_edits,json=textDocumentEdits,proto3,oneof"`
}

type WorkspaceEdit_CreateFiles_ struct {
	CreateFiles *WorkspaceEdit_CreateFiles `protobuf:"bytes,3,opt,name=create_files,json=createFiles,proto3,oneof"`
}

type WorkspaceEdit_RenameFiles_ struct {
	RenameFiles *WorkspaceEdit_RenameFiles `protobuf:"bytes,4,opt,name=rename_files,json=renameFiles,proto3,oneof"`
}

type WorkspaceEdit_DeleteFiles_ struct {
	DeleteFiles *WorkspaceEdit_DeleteFiles `protobuf:"bytes,5,opt,name=delete_files,json=deleteFiles,proto3,oneof"`
}

func (*WorkspaceEdit_TextDocumentEdits_) isWorkspaceEdit_DocumentChanges() {}

func (*WorkspaceEdit_CreateFiles_) isWorkspaceEdit_DocumentChanges() {}

func (*WorkspaceEdit_RenameFiles_) isWorkspaceEdit_DocumentChanges() {}

func (*WorkspaceEdit_DeleteFiles_) isWorkspaceEdit_DocumentChanges() {}

// WorkspaceEditClientCapabilities ResourceOperationKind and FailureHandlingKind and the client
// capability workspace.workspaceEdit.resourceOperations as well as
// workspace.workspaceEdit.failureHandling.
//
// New in version 3.13.
//
// The capabilities of a workspace edit has evolved over the time. Clients can describe their
// support using the following client capability:
// - property path (optional): workspace.workspaceEdit
// - property type: WorkspaceEditClientCapabilities defined as follows.
type WorkspaceEditClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The client supports versioned document changes in `WorkspaceEdit`s.
	DocumentChanges bool `protobuf:"varint,1,opt,name=document_changes,json=documentChanges,proto3" json:"document_changes,omitempty"`
	// The resource operations the client supports. Clients should at least
	// support 'create', 'rename' and 'delete' files and folders.
	//
	// @since 3.13.0
	ResourceOperations []ResourceOperationKind `protobuf:"varint,2,rep,packed,name=resource_operations,json=resourceOperations,proto3,enum=protocol.ResourceOperationKind" json:"resource_operations,omitempty"`
	// Optional. The failure handling strategy of a client if applying the workspace edit
	// fails.
	//
	// @since 3.13.0
	FailureHandling FailureHandlingKind `protobuf:"varint,3,opt,name=failure_handling,json=failureHandling,proto3,enum=protocol.FailureHandlingKind" json:"failure_handling,omitempty"`
}

func (x *WorkspaceEditClientCapabilities) Reset() {
	*x = WorkspaceEditClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceEditClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceEditClientCapabilities) ProtoMessage() {}

func (x *WorkspaceEditClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceEditClientCapabilities.ProtoReflect.Descriptor instead.
func (*WorkspaceEditClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{18}
}

func (x *WorkspaceEditClientCapabilities) GetDocumentChanges() bool {
	if x != nil {
		return x.DocumentChanges
	}
	return false
}

func (x *WorkspaceEditClientCapabilities) GetResourceOperations() []ResourceOperationKind {
	if x != nil {
		return x.ResourceOperations
	}
	return nil
}

func (x *WorkspaceEditClientCapabilities) GetFailureHandling() FailureHandlingKind {
	if x != nil {
		return x.FailureHandling
	}
	return FailureHandlingKind_FAILURE_HANDLING_KIND_UNSPECIFIED
}

// TextDocumentIdentifier text documents are identified using a URI. On the protocol level, URIs are
// passed as strings. The corresponding JSON structure looks like this:
// (-- api-linter: core::0140::abbreviations=disabled --)
type TextDocumentIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text document's URI.
	Uri *uri.URI `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *TextDocumentIdentifier) Reset() {
	*x = TextDocumentIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentIdentifier) ProtoMessage() {}

func (x *TextDocumentIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentIdentifier.ProtoReflect.Descriptor instead.
func (*TextDocumentIdentifier) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{19}
}

func (x *TextDocumentIdentifier) GetUri() *uri.URI {
	if x != nil {
		return x.Uri
	}
	return nil
}

// TextDocumentItem an item to transfer a text document from the client to the server.
type TextDocumentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text document's URI.
	Uri *uri.URI `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// The text document's language identifier.
	LanguageId string `protobuf:"bytes,2,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	// The version number of this document (it will increase after each
	// change, including undo/redo).
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// The content of the opened text document.
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextDocumentItem) Reset() {
	*x = TextDocumentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentItem) ProtoMessage() {}

func (x *TextDocumentItem) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentItem.ProtoReflect.Descriptor instead.
func (*TextDocumentItem) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{20}
}

func (x *TextDocumentItem) GetUri() *uri.URI {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *TextDocumentItem) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *TextDocumentItem) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TextDocumentItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// (-- api-linter: core::0140::abbreviations=disabled --)
type VersionedTextDocumentIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TextDocumentIdentifier text documents are identified using a URI. On the protocol level, URIs
	// are passed as strings.
	TextDocumentIdentifier *TextDocumentIdentifier `protobuf:"bytes,1,opt,name=text_document_identifier,json=textDocumentIdentifier,proto3" json:"text_document_identifier,omitempty"`
	// Optional. The version number of this document. If a versioned text document identifier
	// is sent from the server to the client and the file is not open in the editor
	// (the server has not received an open notification before) the server can send
	// `null` to indicate that the version is known and the content on disk is the
	// master (as speced with document content ownership).
	//
	// The version number of a document will increase after each change, including
	// undo/redo. The number doesn't need to be consecutive.
	Version bool `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionedTextDocumentIdentifier) Reset() {
	*x = VersionedTextDocumentIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedTextDocumentIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedTextDocumentIdentifier) ProtoMessage() {}

func (x *VersionedTextDocumentIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedTextDocumentIdentifier.ProtoReflect.Descriptor instead.
func (*VersionedTextDocumentIdentifier) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{21}
}

func (x *VersionedTextDocumentIdentifier) GetTextDocumentIdentifier() *TextDocumentIdentifier {
	if x != nil {
		return x.TextDocumentIdentifier
	}
	return nil
}

func (x *VersionedTextDocumentIdentifier) GetVersion() bool {
	if x != nil {
		return x.Version
	}
	return false
}

// TextDocumentPositionParams was TextDocumentPosition in 1.0 with inlined parameters.
// A parameter literal used in requests to pass a text document and a position inside that document.
type TextDocumentPositionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text document.
	TextDocument *TextDocumentIdentifier `protobuf:"bytes,1,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// The position inside the text document.
	Position *Position `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *TextDocumentPositionParams) Reset() {
	*x = TextDocumentPositionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentPositionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentPositionParams) ProtoMessage() {}

func (x *TextDocumentPositionParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentPositionParams.ProtoReflect.Descriptor instead.
func (*TextDocumentPositionParams) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{22}
}

func (x *TextDocumentPositionParams) GetTextDocument() *TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *TextDocumentPositionParams) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

// DocumentFilter is a document filter denotes a document through properties like language, scheme
// or pattern. An example is a filter that applies to TypeScript files on disk. Another example is a
// filter the applies to JSON files with name package.json:
type DocumentFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A language id, like `typescript`.
	//
	// (-- api-linter: core::0143::standardized-codes=disabled --)
	Language *wrappers.StringValue `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// Optional. A URI [scheme](#uri.Scheme), like `file` or `untitled`.
	Scheme *wrappers.StringValue `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// Optional. A glob pattern, like `*.{ts,js}`.
	//
	// Glob patterns can have the following syntax:
	// - `*` to match one or more characters in a path segment
	// - `?` to match on one character in a path segment
	// - `**` to match any number of path segments, including none
	// - `{}` to group conditions (e.g. `**/*.{ts,js}` matches all TypeScript and JavaScript files)
	// - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to
	// match on `example.0`, `example.1`, …)
	// - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]`
	// to match on `example.a`, `example.b`, but not `example.0`)
	Pattern *wrappers.StringValue `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *DocumentFilter) Reset() {
	*x = DocumentFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentFilter) ProtoMessage() {}

func (x *DocumentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentFilter.ProtoReflect.Descriptor instead.
func (*DocumentFilter) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{23}
}

func (x *DocumentFilter) GetLanguage() *wrappers.StringValue {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *DocumentFilter) GetScheme() *wrappers.StringValue {
	if x != nil {
		return x.Scheme
	}
	return nil
}

func (x *DocumentFilter) GetPattern() *wrappers.StringValue {
	if x != nil {
		return x.Pattern
	}
	return nil
}

// StaticRegistrationOptions can be used to register a feature in the initialize result with a given
// server control ID to be able to un-register the feature later on. Static registration options to
// be returned in the initialize request.
type StaticRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The id used to register the request. The id can be used to deregister
	// the request again. See also Registration#id.
	Id *wrappers.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StaticRegistrationOptions) Reset() {
	*x = StaticRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRegistrationOptions) ProtoMessage() {}

func (x *StaticRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRegistrationOptions.ProtoReflect.Descriptor instead.
func (*StaticRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{24}
}

func (x *StaticRegistrationOptions) GetId() *wrappers.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

// TextDocumentRegistrationOptions options to dynamically register for requests for a set of text
// documents.
type TextDocumentRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A document selector to identify the scope of the registration. If set to null
	// the document selector provided on the client side will be used.
	//
	// Types that are assignable to DocumentSelector:
	//	*TextDocumentRegistrationOptions_Selector
	//	*TextDocumentRegistrationOptions_Empty
	DocumentSelector isTextDocumentRegistrationOptions_DocumentSelector `protobuf_oneof:"document_selector"`
}

func (x *TextDocumentRegistrationOptions) Reset() {
	*x = TextDocumentRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentRegistrationOptions) ProtoMessage() {}

func (x *TextDocumentRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentRegistrationOptions.ProtoReflect.Descriptor instead.
func (*TextDocumentRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{25}
}

func (m *TextDocumentRegistrationOptions) GetDocumentSelector() isTextDocumentRegistrationOptions_DocumentSelector {
	if m != nil {
		return m.DocumentSelector
	}
	return nil
}

func (x *TextDocumentRegistrationOptions) GetSelector() *TextDocumentRegistrationOptions_DocumentSelector {
	if x, ok := x.GetDocumentSelector().(*TextDocumentRegistrationOptions_Selector); ok {
		return x.Selector
	}
	return nil
}

func (x *TextDocumentRegistrationOptions) GetEmpty() _struct.NullValue {
	if x, ok := x.GetDocumentSelector().(*TextDocumentRegistrationOptions_Empty); ok {
		return x.Empty
	}
	return _struct.NullValue_NULL_VALUE
}

type isTextDocumentRegistrationOptions_DocumentSelector interface {
	isTextDocumentRegistrationOptions_DocumentSelector()
}

type TextDocumentRegistrationOptions_Selector struct {
	Selector *TextDocumentRegistrationOptions_DocumentSelector `protobuf:"bytes,1,opt,name=selector,proto3,oneof"`
}

type TextDocumentRegistrationOptions_Empty struct {
	Empty _struct.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

func (*TextDocumentRegistrationOptions_Selector) isTextDocumentRegistrationOptions_DocumentSelector() {
}

func (*TextDocumentRegistrationOptions_Empty) isTextDocumentRegistrationOptions_DocumentSelector() {}

// MarkupContent is a MarkupContent literal represents a string value which content can be
// represented in different formats. Currently plaintext and markdown are supported formats. A
// MarkupContent is usually used in documentation properties of result literals like CompletionItem
// or SignatureInformation.
//
// A `MarkupContent` literal represents a string value which content is interpreted base on its
// kind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.
//
// If the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.
// See https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting
//
// Here is an example how such a string can be constructed using JavaScript / TypeScript:
//
// ```markdown
// ```typescript
// let markdown: MarkdownContent = {
//  kind: MarkupKind.Markdown,
//      value: [
//      	'# Header',
//      	'Some text',
//      	'```typescript',
//      	'someCode();',
//      	'```'
//      ].join('\n')
// };
// ```
// ```
//
// NOTE: clients might sanitize the return markdown. A client could decide to
// remove HTML from the markdown to avoid script execution.
type MarkupContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the Markup.
	Kind MarkupKind `protobuf:"varint,1,opt,name=kind,proto3,enum=protocol.MarkupKind" json:"kind,omitempty"`
	// The content itself.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MarkupContent) Reset() {
	*x = MarkupContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkupContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkupContent) ProtoMessage() {}

func (x *MarkupContent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkupContent.ProtoReflect.Descriptor instead.
func (*MarkupContent) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{26}
}

func (x *MarkupContent) GetKind() MarkupKind {
	if x != nil {
		return x.Kind
	}
	return MarkupKind_MARKUP_KIND_UNSPECIFIED
}

func (x *MarkupContent) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// WorkDoneProgressBegin to start progress reporting a $/progress notification with the payload must
// be sent.
//
// @since 3.15.0
type WorkDoneProgressBegin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WorkDoneProgressBegin kind.
	//
	// always 'begin'
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Mandatory title of the progress operation. Used to briefly inform about
	// the kind of operation being performed.
	//
	// Examples: "Indexing" or "Linking dependencies".
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Optional. Controls if a cancel button should show to allow the user to cancel the
	// long running operation. Clients that don't support cancellation are allowed
	// to ignore the setting.
	Cancellable bool `protobuf:"varint,3,opt,name=cancellable,proto3" json:"cancellable,omitempty"`
	// Optional, more detailed associated progress message. Contains
	// complementary information to the `title`.
	//
	// Examples: "3/25 files", "project/src/module2", "node_modules/some_dep".
	// If unset, the previous progress message (if any) is still valid.
	Message *wrappers.StringValue `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// Optional progress percentage to display (value 100 is considered 100%).
	// If not provided infinite progress is assumed and clients are allowed
	// to ignore the `percentage` value in subsequent in report notifications.
	//
	// The value should be steadily rising. Clients are free to ignore values
	// that are not following this rule.
	Percentage *wrappers.Int32Value `protobuf:"bytes,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *WorkDoneProgressBegin) Reset() {
	*x = WorkDoneProgressBegin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkDoneProgressBegin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkDoneProgressBegin) ProtoMessage() {}

func (x *WorkDoneProgressBegin) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkDoneProgressBegin.ProtoReflect.Descriptor instead.
func (*WorkDoneProgressBegin) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{27}
}

func (x *WorkDoneProgressBegin) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WorkDoneProgressBegin) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WorkDoneProgressBegin) GetCancellable() bool {
	if x != nil {
		return x.Cancellable
	}
	return false
}

func (x *WorkDoneProgressBegin) GetMessage() *wrappers.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *WorkDoneProgressBegin) GetPercentage() *wrappers.Int32Value {
	if x != nil {
		return x.Percentage
	}
	return nil
}

// WorkDoneProgressReport reporting progress is done using the payload.
type WorkDoneProgressReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WorkDoneProgressReport kind.
	//
	// always 'report'
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Optional. Controls enablement state of a cancel button. This property is only valid if a cancel
	// button got requested in the `WorkDoneProgressStart` payload.
	//
	// Clients that don't support cancellation or don't support control the button's
	// enablement state are allowed to ignore the setting.
	Cancellable bool `protobuf:"varint,2,opt,name=cancellable,proto3" json:"cancellable,omitempty"`
	// Optional, more detailed associated progress message. Contains
	// complementary information to the `title`.
	//
	// Examples: "3/25 files", "project/src/module2", "node_modules/some_dep".
	// If unset, the previous progress message (if any) is still valid.
	Message *wrappers.StringValue `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Optional progress percentage to display (value 100 is considered 100%).
	// If not provided infinite progress is assumed and clients are allowed
	// to ignore the `percentage` value in subsequent in report notifications.
	//
	// The value should be steadily rising. Clients are free to ignore values
	// that are not following this rule.
	Percentage *wrappers.Int32Value `protobuf:"bytes,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *WorkDoneProgressReport) Reset() {
	*x = WorkDoneProgressReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkDoneProgressReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkDoneProgressReport) ProtoMessage() {}

func (x *WorkDoneProgressReport) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkDoneProgressReport.ProtoReflect.Descriptor instead.
func (*WorkDoneProgressReport) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{28}
}

func (x *WorkDoneProgressReport) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WorkDoneProgressReport) GetCancellable() bool {
	if x != nil {
		return x.Cancellable
	}
	return false
}

func (x *WorkDoneProgressReport) GetMessage() *wrappers.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *WorkDoneProgressReport) GetPercentage() *wrappers.Int32Value {
	if x != nil {
		return x.Percentage
	}
	return nil
}

// WorkDoneProgressEnd signaling the end of a progress reporting is done using the payload.
type WorkDoneProgressEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WorkDoneProgressEnd kind.
	//
	// always 'end'
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Optional, a final message indicating to for example indicate the outcome
	// of the operation.
	Message *wrappers.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *WorkDoneProgressEnd) Reset() {
	*x = WorkDoneProgressEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkDoneProgressEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkDoneProgressEnd) ProtoMessage() {}

func (x *WorkDoneProgressEnd) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkDoneProgressEnd.ProtoReflect.Descriptor instead.
func (*WorkDoneProgressEnd) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{29}
}

func (x *WorkDoneProgressEnd) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WorkDoneProgressEnd) GetMessage() *wrappers.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

// WorkDoneProgressOptions options to signal work done progress support in server capabilities.
type WorkDoneProgressOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	WorkDoneProgress bool `protobuf:"varint,1,opt,name=work_done_progress,json=workDoneProgress,proto3" json:"work_done_progress,omitempty"`
}

func (x *WorkDoneProgressOptions) Reset() {
	*x = WorkDoneProgressOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkDoneProgressOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkDoneProgressOptions) ProtoMessage() {}

func (x *WorkDoneProgressOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkDoneProgressOptions.ProtoReflect.Descriptor instead.
func (*WorkDoneProgressOptions) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{30}
}

func (x *WorkDoneProgressOptions) GetWorkDoneProgress() bool {
	if x != nil {
		return x.WorkDoneProgress
	}
	return false
}

type WorkspaceEdit_TextEdits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextEdits []*TextEdit `protobuf:"bytes,1,rep,name=text_edits,json=textEdits,proto3" json:"text_edits,omitempty"`
}

func (x *WorkspaceEdit_TextEdits) Reset() {
	*x = WorkspaceEdit_TextEdits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceEdit_TextEdits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceEdit_TextEdits) ProtoMessage() {}

func (x *WorkspaceEdit_TextEdits) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceEdit_TextEdits.ProtoReflect.Descriptor instead.
func (*WorkspaceEdit_TextEdits) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{17, 0}
}

func (x *WorkspaceEdit_TextEdits) GetTextEdits() []*TextEdit {
	if x != nil {
		return x.TextEdits
	}
	return nil
}

type WorkspaceEdit_TextDocumentEdits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextDocumentEdits []*TextDocumentEdit `protobuf:"bytes,1,rep,name=text_document_edits,json=textDocumentEdits,proto3" json:"text_document_edits,omitempty"`
}

func (x *WorkspaceEdit_TextDocumentEdits) Reset() {
	*x = WorkspaceEdit_TextDocumentEdits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceEdit_TextDocumentEdits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceEdit_TextDocumentEdits) ProtoMessage() {}

func (x *WorkspaceEdit_TextDocumentEdits) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceEdit_TextDocumentEdits.ProtoReflect.Descriptor instead.
func (*WorkspaceEdit_TextDocumentEdits) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{17, 1}
}

func (x *WorkspaceEdit_TextDocumentEdits) GetTextDocumentEdits() []*TextDocumentEdit {
	if x != nil {
		return x.TextDocumentEdits
	}
	return nil
}

type WorkspaceEdit_CreateFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateFiles []*CreateFile `protobuf:"bytes,1,rep,name=create_files,json=createFiles,proto3" json:"create_files,omitempty"`
}

func (x *WorkspaceEdit_CreateFiles) Reset() {
	*x = WorkspaceEdit_CreateFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceEdit_CreateFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceEdit_CreateFiles) ProtoMessage() {}

func (x *WorkspaceEdit_CreateFiles) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceEdit_CreateFiles.ProtoReflect.Descriptor instead.
func (*WorkspaceEdit_CreateFiles) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{17, 2}
}

func (x *WorkspaceEdit_CreateFiles) GetCreateFiles() []*CreateFile {
	if x != nil {
		return x.CreateFiles
	}
	return nil
}

type WorkspaceEdit_RenameFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RenameFiles []*RenameFile `protobuf:"bytes,1,rep,name=rename_files,json=renameFiles,proto3" json:"rename_files,omitempty"`
}

func (x *WorkspaceEdit_RenameFiles) Reset() {
	*x = WorkspaceEdit_RenameFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceEdit_RenameFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceEdit_RenameFiles) ProtoMessage() {}

func (x *WorkspaceEdit_RenameFiles) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceEdit_RenameFiles.ProtoReflect.Descriptor instead.
func (*WorkspaceEdit_RenameFiles) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{17, 3}
}

func (x *WorkspaceEdit_RenameFiles) GetRenameFiles() []*RenameFile {
	if x != nil {
		return x.RenameFiles
	}
	return nil
}

type WorkspaceEdit_DeleteFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteFiles []*DeleteFile `protobuf:"bytes,1,rep,name=delete_files,json=deleteFiles,proto3" json:"delete_files,omitempty"`
}

func (x *WorkspaceEdit_DeleteFiles) Reset() {
	*x = WorkspaceEdit_DeleteFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceEdit_DeleteFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceEdit_DeleteFiles) ProtoMessage() {}

func (x *WorkspaceEdit_DeleteFiles) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceEdit_DeleteFiles.ProtoReflect.Descriptor instead.
func (*WorkspaceEdit_DeleteFiles) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{17, 4}
}

func (x *WorkspaceEdit_DeleteFiles) GetDeleteFiles() []*DeleteFile {
	if x != nil {
		return x.DeleteFiles
	}
	return nil
}

// DocumentSelector is a document selector is the combination of one or more document filters.
type TextDocumentRegistrationOptions_DocumentSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentSelector []*DocumentFilter `protobuf:"bytes,1,rep,name=document_selector,json=documentSelector,proto3" json:"document_selector,omitempty"`
}

func (x *TextDocumentRegistrationOptions_DocumentSelector) Reset() {
	*x = TextDocumentRegistrationOptions_DocumentSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_protocol_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentRegistrationOptions_DocumentSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentRegistrationOptions_DocumentSelector) ProtoMessage() {}

func (x *TextDocumentRegistrationOptions_DocumentSelector) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_protocol_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentRegistrationOptions_DocumentSelector.ProtoReflect.Descriptor instead.
func (*TextDocumentRegistrationOptions_DocumentSelector) Descriptor() ([]byte, []int) {
	return file_protocol_protocol_proto_rawDescGZIP(), []int{25, 0}
}

func (x *TextDocumentRegistrationOptions_DocumentSelector) GetDocumentSelector() []*DocumentFilter {
	if x != nil {
		return x.DocumentSelector
	}
	return nil
}

var File_protocol_protocol_proto protoreflect.FileDescriptor

var file_protocol_protocol_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x75,
	0x72, 0x69, 0x2f, 0x75, 0x72, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x0b,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x49, 0x12, 0x26, 0x0a, 0x0c, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x72, 0x69, 0x22, 0x46, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x05, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x57,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72, 0x69, 0x2e, 0x55, 0x52,
	0x49, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2a, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x45, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72, 0x69, 0x2e, 0x55, 0x52, 0x49, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x69, 0x12, 0x37, 0x0a,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x1c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x77, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x56, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x53, 0x0a,
	0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x22, 0x5b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x66, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x7d,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72, 0x69, 0x2e, 0x55, 0x52, 0x49, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a,
	0x11, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72, 0x69, 0x2e, 0x55, 0x52, 0x49, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x55, 0x72, 0x69, 0x12, 0x26, 0x0a, 0x07, 0x6e, 0x65,
	0x77, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72,
	0x69, 0x2e, 0x55, 0x52, 0x49, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x55,
	0x72, 0x69, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x66,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72, 0x69,
	0x2e, 0x55, 0x52, 0x49, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x35,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0xf6, 0x06, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x5b, 0x0a, 0x13, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x11, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x48,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x09,
	0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x73, 0x1a, 0x5f, 0x0a, 0x11,
	0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x73, 0x12, 0x4a, 0x0a, 0x13, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x11, 0x74, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x73, 0x1a, 0x46, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x46, 0x0a, 0x0b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x0b, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x46, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x1f, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x22, 0x39, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x75, 0x72, 0x69,
	0x2e, 0x55, 0x52, 0x49, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x91,
	0x01, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x75, 0x72, 0x69, 0x2e, 0x55, 0x52, 0x49, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x1f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x18, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x16, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c,
	0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x49, 0x0a, 0x19,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x1f, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x59, 0x0a, 0x10, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a,
	0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x0d, 0x4d, 0x61, 0x72,
	0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x17,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x16, 0x57, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x22, 0x66, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x17,
	0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2a, 0x6c, 0x0a, 0x12, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x44,
	0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x4e,
	0x54, 0x10, 0x04, 0x2a, 0x50, 0x0a, 0x0d, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x54, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54,
	0x49, 0x43, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4e, 0x45, 0x43, 0x45, 0x53, 0x53,
	0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x27,
	0x0a, 0x23, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x81, 0x01, 0x0a, 0x13,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x48,
	0x41, 0x4e, 0x44, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42,
	0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x4e, 0x44, 0x4f, 0x10, 0x04, 0x2a,
	0x47, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a,
	0x17, 0x4d, 0x41, 0x52, 0x4b, 0x55, 0x50, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4c,
	0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41,
	0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x45, 0x52,
	0x42, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x42, 0x6e, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x73,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x0d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x17, 0x67, 0x6f, 0x2e,
	0x6c, 0x73, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x04, 0x4c, 0x53, 0x50, 0x50, 0xaa, 0x02,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0xba, 0x02, 0x04, 0x4c, 0x53, 0x50, 0x50,
	0xca, 0x02, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0xea, 0x02, 0x08, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_protocol_proto_rawDescOnce sync.Once
	file_protocol_protocol_proto_rawDescData = file_protocol_protocol_proto_rawDesc
)

func file_protocol_protocol_proto_rawDescGZIP() []byte {
	file_protocol_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_protocol_proto_rawDescData)
	})
	return file_protocol_protocol_proto_rawDescData
}

var (
	file_protocol_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
	file_protocol_protocol_proto_msgTypes  = make([]protoimpl.MessageInfo, 38)
	file_protocol_protocol_proto_goTypes   = []interface{}{
		(DiagnosticSeverity)(0),                                  // 0: protocol.DiagnosticSeverity
		(DiagnosticTag)(0),                                       // 1: protocol.DiagnosticTag
		(ResourceOperationKind)(0),                               // 2: protocol.ResourceOperationKind
		(FailureHandlingKind)(0),                                 // 3: protocol.FailureHandlingKind
		(MarkupKind)(0),                                          // 4: protocol.MarkupKind
		(TraceValue)(0),                                          // 5: protocol.TraceValue
		(*DocumentURI)(nil),                                      // 6: protocol.DocumentURI
		(*Position)(nil),                                         // 7: protocol.Position
		(*Range)(nil),                                            // 8: protocol.Range
		(*Location)(nil),                                         // 9: protocol.Location
		(*LocationLink)(nil),                                     // 10: protocol.LocationLink
		(*Diagnostic)(nil),                                       // 11: protocol.Diagnostic
		(*DiagnosticRelatedInformation)(nil),                     // 12: protocol.DiagnosticRelatedInformation
		(*Command)(nil),                                          // 13: protocol.Command
		(*TextEdit)(nil),                                         // 14: protocol.TextEdit
		(*TextDocumentEdit)(nil),                                 // 15: protocol.TextDocumentEdit
		(*CreateFileOptions)(nil),                                // 16: protocol.CreateFileOptions
		(*CreateFile)(nil),                                       // 17: protocol.CreateFile
		(*RenameFileOptions)(nil),                                // 18: protocol.RenameFileOptions
		(*RenameFile)(nil),                                       // 19: protocol.RenameFile
		(*DeleteFileOptions)(nil),                                // 20: protocol.DeleteFileOptions
		(*DeleteFile)(nil),                                       // 21: protocol.DeleteFile
		(*FileResourceChange)(nil),                               // 22: protocol.FileResourceChange
		(*WorkspaceEdit)(nil),                                    // 23: protocol.WorkspaceEdit
		(*WorkspaceEditClientCapabilities)(nil),                  // 24: protocol.WorkspaceEditClientCapabilities
		(*TextDocumentIdentifier)(nil),                           // 25: protocol.TextDocumentIdentifier
		(*TextDocumentItem)(nil),                                 // 26: protocol.TextDocumentItem
		(*VersionedTextDocumentIdentifier)(nil),                  // 27: protocol.VersionedTextDocumentIdentifier
		(*TextDocumentPositionParams)(nil),                       // 28: protocol.TextDocumentPositionParams
		(*DocumentFilter)(nil),                                   // 29: protocol.DocumentFilter
		(*StaticRegistrationOptions)(nil),                        // 30: protocol.StaticRegistrationOptions
		(*TextDocumentRegistrationOptions)(nil),                  // 31: protocol.TextDocumentRegistrationOptions
		(*MarkupContent)(nil),                                    // 32: protocol.MarkupContent
		(*WorkDoneProgressBegin)(nil),                            // 33: protocol.WorkDoneProgressBegin
		(*WorkDoneProgressReport)(nil),                           // 34: protocol.WorkDoneProgressReport
		(*WorkDoneProgressEnd)(nil),                              // 35: protocol.WorkDoneProgressEnd
		(*WorkDoneProgressOptions)(nil),                          // 36: protocol.WorkDoneProgressOptions
		(*WorkspaceEdit_TextEdits)(nil),                          // 37: protocol.WorkspaceEdit.TextEdits
		(*WorkspaceEdit_TextDocumentEdits)(nil),                  // 38: protocol.WorkspaceEdit.TextDocumentEdits
		(*WorkspaceEdit_CreateFiles)(nil),                        // 39: protocol.WorkspaceEdit.CreateFiles
		(*WorkspaceEdit_RenameFiles)(nil),                        // 40: protocol.WorkspaceEdit.RenameFiles
		(*WorkspaceEdit_DeleteFiles)(nil),                        // 41: protocol.WorkspaceEdit.DeleteFiles
		nil,                                                      // 42: protocol.WorkspaceEdit.ChangesEntry
		(*TextDocumentRegistrationOptions_DocumentSelector)(nil), // 43: protocol.TextDocumentRegistrationOptions.DocumentSelector
		(*uri.URI)(nil),                                          // 44: uri.URI
		(*wrappers.Int32Value)(nil),                              // 45: google.protobuf.Int32Value
		(*wrappers.StringValue)(nil),                             // 46: google.protobuf.StringValue
		(*any.Any)(nil),                                          // 47: google.protobuf.Any
		(_struct.NullValue)(0),                                   // 48: google.protobuf.NullValue
	}
)

var file_protocol_protocol_proto_depIdxs = []int32{
	7,  // 0: protocol.Range.start:type_name -> protocol.Position
	7,  // 1: protocol.Range.end:type_name -> protocol.Position
	44, // 2: protocol.Location.uri:type_name -> uri.URI
	8,  // 3: protocol.Location.range:type_name -> protocol.Range
	8,  // 4: protocol.LocationLink.origin_selection_range:type_name -> protocol.Range
	44, // 5: protocol.LocationLink.target_uri:type_name -> uri.URI
	8,  // 6: protocol.LocationLink.target_range:type_name -> protocol.Range
	8,  // 7: protocol.LocationLink.target_selection_range:type_name -> protocol.Range
	8,  // 8: protocol.Diagnostic.range:type_name -> protocol.Range
	0,  // 9: protocol.Diagnostic.severity:type_name -> protocol.DiagnosticSeverity
	45, // 10: protocol.Diagnostic.code:type_name -> google.protobuf.Int32Value
	46, // 11: protocol.Diagnostic.source:type_name -> google.protobuf.StringValue
	1,  // 12: protocol.Diagnostic.tags:type_name -> protocol.DiagnosticTag
	12, // 13: protocol.Diagnostic.related_information:type_name -> protocol.DiagnosticRelatedInformation
	9,  // 14: protocol.DiagnosticRelatedInformation.location:type_name -> protocol.Location
	47, // 15: protocol.Command.arguments:type_name -> google.protobuf.Any
	8,  // 16: protocol.TextEdit.range:type_name -> protocol.Range
	27, // 17: protocol.TextDocumentEdit.text_document:type_name -> protocol.VersionedTextDocumentIdentifier
	14, // 18: protocol.TextDocumentEdit.edits:type_name -> protocol.TextEdit
	44, // 19: protocol.CreateFile.uri:type_name -> uri.URI
	16, // 20: protocol.CreateFile.options:type_name -> protocol.CreateFileOptions
	44, // 21: protocol.RenameFile.old_uri:type_name -> uri.URI
	44, // 22: protocol.RenameFile.new_uri:type_name -> uri.URI
	18, // 23: protocol.RenameFile.options:type_name -> protocol.RenameFileOptions
	44, // 24: protocol.DeleteFile.uri:type_name -> uri.URI
	20, // 25: protocol.DeleteFile.options:type_name -> protocol.DeleteFileOptions
	17, // 26: protocol.FileResourceChange.create_file:type_name -> protocol.CreateFile
	19, // 27: protocol.FileResourceChange.rename_file:type_name -> protocol.RenameFile
	21, // 28: protocol.FileResourceChange.delete_file:type_name -> protocol.DeleteFile
	42, // 29: protocol.WorkspaceEdit.changes:type_name -> protocol.WorkspaceEdit.ChangesEntry
	38, // 30: protocol.WorkspaceEdit.text_document_edits:type_name -> protocol.WorkspaceEdit.TextDocumentEdits
	39, // 31: protocol.WorkspaceEdit.create_files:type_name -> protocol.WorkspaceEdit.CreateFiles
	40, // 32: protocol.WorkspaceEdit.rename_files:type_name -> protocol.WorkspaceEdit.RenameFiles
	41, // 33: protocol.WorkspaceEdit.delete_files:type_name -> protocol.WorkspaceEdit.DeleteFiles
	2,  // 34: protocol.WorkspaceEditClientCapabilities.resource_operations:type_name -> protocol.ResourceOperationKind
	3,  // 35: protocol.WorkspaceEditClientCapabilities.failure_handling:type_name -> protocol.FailureHandlingKind
	44, // 36: protocol.TextDocumentIdentifier.uri:type_name -> uri.URI
	44, // 37: protocol.TextDocumentItem.uri:type_name -> uri.URI
	25, // 38: protocol.VersionedTextDocumentIdentifier.text_document_identifier:type_name -> protocol.TextDocumentIdentifier
	25, // 39: protocol.TextDocumentPositionParams.text_document:type_name -> protocol.TextDocumentIdentifier
	7,  // 40: protocol.TextDocumentPositionParams.position:type_name -> protocol.Position
	46, // 41: protocol.DocumentFilter.language:type_name -> google.protobuf.StringValue
	46, // 42: protocol.DocumentFilter.scheme:type_name -> google.protobuf.StringValue
	46, // 43: protocol.DocumentFilter.pattern:type_name -> google.protobuf.StringValue
	46, // 44: protocol.StaticRegistrationOptions.id:type_name -> google.protobuf.StringValue
	43, // 45: protocol.TextDocumentRegistrationOptions.selector:type_name -> protocol.TextDocumentRegistrationOptions.DocumentSelector
	48, // 46: protocol.TextDocumentRegistrationOptions.empty:type_name -> google.protobuf.NullValue
	4,  // 47: protocol.MarkupContent.kind:type_name -> protocol.MarkupKind
	46, // 48: protocol.WorkDoneProgressBegin.message:type_name -> google.protobuf.StringValue
	45, // 49: protocol.WorkDoneProgressBegin.percentage:type_name -> google.protobuf.Int32Value
	46, // 50: protocol.WorkDoneProgressReport.message:type_name -> google.protobuf.StringValue
	45, // 51: protocol.WorkDoneProgressReport.percentage:type_name -> google.protobuf.Int32Value
	46, // 52: protocol.WorkDoneProgressEnd.message:type_name -> google.protobuf.StringValue
	14, // 53: protocol.WorkspaceEdit.TextEdits.text_edits:type_name -> protocol.TextEdit
	15, // 54: protocol.WorkspaceEdit.TextDocumentEdits.text_document_edits:type_name -> protocol.TextDocumentEdit
	17, // 55: protocol.WorkspaceEdit.CreateFiles.create_files:type_name -> protocol.CreateFile
	19, // 56: protocol.WorkspaceEdit.RenameFiles.rename_files:type_name -> protocol.RenameFile
	21, // 57: protocol.WorkspaceEdit.DeleteFiles.delete_files:type_name -> protocol.DeleteFile
	37, // 58: protocol.WorkspaceEdit.ChangesEntry.value:type_name -> protocol.WorkspaceEdit.TextEdits
	29, // 59: protocol.TextDocumentRegistrationOptions.DocumentSelector.document_selector:type_name -> protocol.DocumentFilter
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_protocol_protocol_proto_init() }
func file_protocol_protocol_proto_init() {
	if File_protocol_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentURI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticRelatedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameFileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileResourceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceEditClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedTextDocumentIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentPositionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkupContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkDoneProgressBegin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkDoneProgressReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkDoneProgressEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkDoneProgressOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceEdit_TextEdits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceEdit_TextDocumentEdits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceEdit_CreateFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceEdit_RenameFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceEdit_DeleteFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_protocol_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentRegistrationOptions_DocumentSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_protocol_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*FileResourceChange_CreateFile)(nil),
		(*FileResourceChange_RenameFile)(nil),
		(*FileResourceChange_DeleteFile)(nil),
	}
	file_protocol_protocol_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*WorkspaceEdit_TextDocumentEdits_)(nil),
		(*WorkspaceEdit_CreateFiles_)(nil),
		(*WorkspaceEdit_RenameFiles_)(nil),
		(*WorkspaceEdit_DeleteFiles_)(nil),
	}
	file_protocol_protocol_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*TextDocumentRegistrationOptions_Selector)(nil),
		(*TextDocumentRegistrationOptions_Empty)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_protocol_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_protocol_proto_depIdxs,
		EnumInfos:         file_protocol_protocol_proto_enumTypes,
		MessageInfos:      file_protocol_protocol_proto_msgTypes,
	}.Build()
	File_protocol_protocol_proto = out.File
	file_protocol_protocol_proto_rawDesc = nil
	file_protocol_protocol_proto_goTypes = nil
	file_protocol_protocol_proto_depIdxs = nil
}
