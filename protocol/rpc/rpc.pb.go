// Copyright 2020 The Go Language Server Authors
// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: protocol/rpc/rpc.proto

package rpc

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"

	protocol "go.lsp.dev/api/protocol"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// MessageType represents a ShowMessage and ShowMessageRequestRequest message type.
type MessageType int32

const (
	// Conventional default for enums. Do not use this.
	MessageType_MESSAGE_TYPE_UNSPECIFIED MessageType = 0
	// An error message.
	MessageType_ERROR MessageType = 1
	// A warning message.
	MessageType_WARNING MessageType = 2
	// An information message.
	MessageType_INFO MessageType = 3
	// A log message.
	MessageType_LOG MessageType = 4
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "ERROR",
		2: "WARNING",
		3: "INFO",
		4: "LOG",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"ERROR":                    1,
		"WARNING":                  2,
		"INFO":                     3,
		"LOG":                      4,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{0}
}

// TextDocumentSyncKind defines how the host (editor) should sync document changes to the language
// server.
// (-- api-linter: core::0126::unspecified=disabled --)
type TextDocumentSyncKind int32

const (
	// Documents should not be synced at all.
	TextDocumentSyncKind_NONE TextDocumentSyncKind = 0
	// Documents are synced by always sending the full content
	// of the document.
	TextDocumentSyncKind_FULL TextDocumentSyncKind = 1
	// Documents are synced by sending the full content on open.
	// After that only incremental updates to the document are
	// send.
	TextDocumentSyncKind_INCREMENTAL TextDocumentSyncKind = 2
)

// Enum value maps for TextDocumentSyncKind.
var (
	TextDocumentSyncKind_name = map[int32]string{
		0: "NONE",
		1: "FULL",
		2: "INCREMENTAL",
	}
	TextDocumentSyncKind_value = map[string]int32{
		"NONE":        0,
		"FULL":        1,
		"INCREMENTAL": 2,
	}
)

func (x TextDocumentSyncKind) Enum() *TextDocumentSyncKind {
	p := new(TextDocumentSyncKind)
	*p = x
	return p
}

func (x TextDocumentSyncKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextDocumentSyncKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[1].Descriptor()
}

func (TextDocumentSyncKind) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[1]
}

func (x TextDocumentSyncKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextDocumentSyncKind.Descriptor instead.
func (TextDocumentSyncKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{1}
}

// TextDocumentSaveReason represents reasons why a text document is saved.
type TextDocumentSaveReason int32

const (
	// Conventional default for enums. Do not use this.
	TextDocumentSaveReason_TEXT_DOCUMENT_SAVE_REASON_UNSPECIFIED TextDocumentSaveReason = 0
	// Manually triggered, e.g. by the user pressing save, by starting debugging,
	// or by an API call.
	TextDocumentSaveReason_MANUAL TextDocumentSaveReason = 1
	// Automatic after a delay.
	TextDocumentSaveReason_AFTERDELAY TextDocumentSaveReason = 2
	// When the editor lost focus.
	TextDocumentSaveReason_FOCUSOUT TextDocumentSaveReason = 3
)

// Enum value maps for TextDocumentSaveReason.
var (
	TextDocumentSaveReason_name = map[int32]string{
		0: "TEXT_DOCUMENT_SAVE_REASON_UNSPECIFIED",
		1: "MANUAL",
		2: "AFTERDELAY",
		3: "FOCUSOUT",
	}
	TextDocumentSaveReason_value = map[string]int32{
		"TEXT_DOCUMENT_SAVE_REASON_UNSPECIFIED": 0,
		"MANUAL":                                1,
		"AFTERDELAY":                            2,
		"FOCUSOUT":                              3,
	}
)

func (x TextDocumentSaveReason) Enum() *TextDocumentSaveReason {
	p := new(TextDocumentSaveReason)
	*p = x
	return p
}

func (x TextDocumentSaveReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextDocumentSaveReason) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[2].Descriptor()
}

func (TextDocumentSaveReason) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[2]
}

func (x TextDocumentSaveReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextDocumentSaveReason.Descriptor instead.
func (TextDocumentSaveReason) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{2}
}

// CompletionTriggerKind how a completion was triggered.
type CompletionTriggerKind int32

const (
	// Conventional default for enums. Do not use this.
	CompletionTriggerKind_COMPLETION_TRIGGER_KIND_UNSPECIFIED CompletionTriggerKind = 0
	// Completion was triggered by typing an identifier (24x7 code
	// complete), manual invocation (e.g Ctrl+Space) or via API.
	CompletionTriggerKind_INVOKED CompletionTriggerKind = 1
	// Completion was triggered by a trigger character specified by
	// the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
	CompletionTriggerKind_TRIGGER_CHARACTER CompletionTriggerKind = 2
	// Completion was re-triggered as the current completion list is incomplete.
	CompletionTriggerKind_TRIGGER_FOR_INCOMPLETE_COMPLETIONS CompletionTriggerKind = 3
)

// Enum value maps for CompletionTriggerKind.
var (
	CompletionTriggerKind_name = map[int32]string{
		0: "COMPLETION_TRIGGER_KIND_UNSPECIFIED",
		1: "INVOKED",
		2: "TRIGGER_CHARACTER",
		3: "TRIGGER_FOR_INCOMPLETE_COMPLETIONS",
	}
	CompletionTriggerKind_value = map[string]int32{
		"COMPLETION_TRIGGER_KIND_UNSPECIFIED": 0,
		"INVOKED":                             1,
		"TRIGGER_CHARACTER":                   2,
		"TRIGGER_FOR_INCOMPLETE_COMPLETIONS":  3,
	}
)

func (x CompletionTriggerKind) Enum() *CompletionTriggerKind {
	p := new(CompletionTriggerKind)
	*p = x
	return p
}

func (x CompletionTriggerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompletionTriggerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[3].Descriptor()
}

func (CompletionTriggerKind) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[3]
}

func (x CompletionTriggerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompletionTriggerKind.Descriptor instead.
func (CompletionTriggerKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{3}
}

// InsertTextFormat defines whether the insert text in a completion item should be interpreted as
// plain text or a snippet.
type InsertTextFormat int32

const (
	// Conventional default for enums. Do not use this.
	InsertTextFormat_INSERT_TEXT_FORMAT_UNSPECIFIED InsertTextFormat = 0
	// The primary text to be inserted is treated as a plain string.
	InsertTextFormat_PLAINTEXT InsertTextFormat = 1
	// The primary text to be inserted is treated as a snippet.
	//
	// A snippet can define tab stops and placeholders with `$1`, `$2`
	// and `${3:foo}`. `$0` defines the final tab stop, it defaults to
	// the end of the snippet. Placeholders with equal identifiers are linked,
	// that is typing in one will update others too.
	//
	// (-- Add `_FORMAT` suffix for avoid `Note that enum values use C++ scoping rules, meaning that
	// enum values are siblings of their type, not children of it.` warning on
	// [CompletionItemKind][CompletionItemKind]. --)
	InsertTextFormat_SNIPPET_FORMAT InsertTextFormat = 2
)

// Enum value maps for InsertTextFormat.
var (
	InsertTextFormat_name = map[int32]string{
		0: "INSERT_TEXT_FORMAT_UNSPECIFIED",
		1: "PLAINTEXT",
		2: "SNIPPET_FORMAT",
	}
	InsertTextFormat_value = map[string]int32{
		"INSERT_TEXT_FORMAT_UNSPECIFIED": 0,
		"PLAINTEXT":                      1,
		"SNIPPET_FORMAT":                 2,
	}
)

func (x InsertTextFormat) Enum() *InsertTextFormat {
	p := new(InsertTextFormat)
	*p = x
	return p
}

func (x InsertTextFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsertTextFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[4].Descriptor()
}

func (InsertTextFormat) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[4]
}

func (x InsertTextFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsertTextFormat.Descriptor instead.
func (InsertTextFormat) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{4}
}

// CompletionItemTag completion item tags are extra annotations that tweak the rendering of a
// completion item.
//
// @since 3.15.0
type CompletionItemTag int32

const (
	// Conventional default for enums. Do not use this.
	CompletionItemTag_COMPLETION_ITEM_TAG_UNSPECIFIED CompletionItemTag = 0
	// Render a completion as obsolete, usually using a strike-out.
	CompletionItemTag_DEPRECATED_TAG CompletionItemTag = 1
)

// Enum value maps for CompletionItemTag.
var (
	CompletionItemTag_name = map[int32]string{
		0: "COMPLETION_ITEM_TAG_UNSPECIFIED",
		1: "DEPRECATED_TAG",
	}
	CompletionItemTag_value = map[string]int32{
		"COMPLETION_ITEM_TAG_UNSPECIFIED": 0,
		"DEPRECATED_TAG":                  1,
	}
)

func (x CompletionItemTag) Enum() *CompletionItemTag {
	p := new(CompletionItemTag)
	*p = x
	return p
}

func (x CompletionItemTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompletionItemTag) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[5].Descriptor()
}

func (CompletionItemTag) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[5]
}

func (x CompletionItemTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompletionItemTag.Descriptor instead.
func (CompletionItemTag) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{5}
}

// CompletionItemKind is the kind of a completion entry.
type CompletionItemKind int32

const (
	// Conventional default for enums. Do not use this.
	CompletionItemKind_COMPLETION_ITEM_KIND_UNSPECIFIED CompletionItemKind = 0
	CompletionItemKind_COMPLETION_TEXT                  CompletionItemKind = 1
	CompletionItemKind_COMPLETION_METHOD                CompletionItemKind = 2
	CompletionItemKind_COMPLETION_FUNCTION              CompletionItemKind = 3
	CompletionItemKind_COMPLETION_CONSTRUCTOR           CompletionItemKind = 4
	CompletionItemKind_COMPLETION_FIELD                 CompletionItemKind = 5
	CompletionItemKind_COMPLETION_VARIABLE              CompletionItemKind = 6
	CompletionItemKind_COMPLETION_CLASS                 CompletionItemKind = 7
	CompletionItemKind_COMPLETION_INTERFACE             CompletionItemKind = 8
	CompletionItemKind_COMPLETION_MODULE                CompletionItemKind = 9
	CompletionItemKind_COMPLETION_PROPERTY              CompletionItemKind = 10
	CompletionItemKind_COMPLETION_UNIT                  CompletionItemKind = 11
	CompletionItemKind_COMPLETION_VALUE                 CompletionItemKind = 12
	CompletionItemKind_COMPLETION_ENUM                  CompletionItemKind = 13
	CompletionItemKind_COMPLETION_KEYWORD               CompletionItemKind = 14
	CompletionItemKind_COMPLETION_SNIPPET               CompletionItemKind = 15
	CompletionItemKind_COMPLETION_COLOR                 CompletionItemKind = 16
	CompletionItemKind_COMPLETION_FILE                  CompletionItemKind = 17
	CompletionItemKind_COMPLETION_REFERENCE             CompletionItemKind = 18
	CompletionItemKind_COMPLETION_FOLDER                CompletionItemKind = 19
	CompletionItemKind_COMPLETION_ENUMMEMBER            CompletionItemKind = 20
	CompletionItemKind_COMPLETION_CONSTANT              CompletionItemKind = 21
	CompletionItemKind_COMPLETION_STRUCT                CompletionItemKind = 22
	CompletionItemKind_COMPLETION_EVENT                 CompletionItemKind = 23
	CompletionItemKind_COMPLETION_OPERATOR              CompletionItemKind = 24
	CompletionItemKind_COMPLETION_TYPEPARAMETER         CompletionItemKind = 25
)

// Enum value maps for CompletionItemKind.
var (
	CompletionItemKind_name = map[int32]string{
		0:  "COMPLETION_ITEM_KIND_UNSPECIFIED",
		1:  "COMPLETION_TEXT",
		2:  "COMPLETION_METHOD",
		3:  "COMPLETION_FUNCTION",
		4:  "COMPLETION_CONSTRUCTOR",
		5:  "COMPLETION_FIELD",
		6:  "COMPLETION_VARIABLE",
		7:  "COMPLETION_CLASS",
		8:  "COMPLETION_INTERFACE",
		9:  "COMPLETION_MODULE",
		10: "COMPLETION_PROPERTY",
		11: "COMPLETION_UNIT",
		12: "COMPLETION_VALUE",
		13: "COMPLETION_ENUM",
		14: "COMPLETION_KEYWORD",
		15: "COMPLETION_SNIPPET",
		16: "COMPLETION_COLOR",
		17: "COMPLETION_FILE",
		18: "COMPLETION_REFERENCE",
		19: "COMPLETION_FOLDER",
		20: "COMPLETION_ENUMMEMBER",
		21: "COMPLETION_CONSTANT",
		22: "COMPLETION_STRUCT",
		23: "COMPLETION_EVENT",
		24: "COMPLETION_OPERATOR",
		25: "COMPLETION_TYPEPARAMETER",
	}
	CompletionItemKind_value = map[string]int32{
		"COMPLETION_ITEM_KIND_UNSPECIFIED": 0,
		"COMPLETION_TEXT":                  1,
		"COMPLETION_METHOD":                2,
		"COMPLETION_FUNCTION":              3,
		"COMPLETION_CONSTRUCTOR":           4,
		"COMPLETION_FIELD":                 5,
		"COMPLETION_VARIABLE":              6,
		"COMPLETION_CLASS":                 7,
		"COMPLETION_INTERFACE":             8,
		"COMPLETION_MODULE":                9,
		"COMPLETION_PROPERTY":              10,
		"COMPLETION_UNIT":                  11,
		"COMPLETION_VALUE":                 12,
		"COMPLETION_ENUM":                  13,
		"COMPLETION_KEYWORD":               14,
		"COMPLETION_SNIPPET":               15,
		"COMPLETION_COLOR":                 16,
		"COMPLETION_FILE":                  17,
		"COMPLETION_REFERENCE":             18,
		"COMPLETION_FOLDER":                19,
		"COMPLETION_ENUMMEMBER":            20,
		"COMPLETION_CONSTANT":              21,
		"COMPLETION_STRUCT":                22,
		"COMPLETION_EVENT":                 23,
		"COMPLETION_OPERATOR":              24,
		"COMPLETION_TYPEPARAMETER":         25,
	}
)

func (x CompletionItemKind) Enum() *CompletionItemKind {
	p := new(CompletionItemKind)
	*p = x
	return p
}

func (x CompletionItemKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompletionItemKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[6].Descriptor()
}

func (CompletionItemKind) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[6]
}

func (x CompletionItemKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompletionItemKind.Descriptor instead.
func (CompletionItemKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{6}
}

// SymbolKind is a symbol kind.
type SymbolKind int32

const (
	// Conventional default for enums. Do not use this.
	SymbolKind_SYMBOL_KIND_UNSPECIFIED SymbolKind = 0
	SymbolKind_SYMBOL_FILE             SymbolKind = 1
	SymbolKind_SYMBOL_MODULE           SymbolKind = 2
	SymbolKind_SYMBOL_NAMESPACE        SymbolKind = 3
	SymbolKind_SYMBOL_PACKAGE          SymbolKind = 4
	SymbolKind_SYMBOL_CLASS            SymbolKind = 5
	SymbolKind_SYMBOL_METHOD           SymbolKind = 6
	SymbolKind_SYMBOL_PROPERTY         SymbolKind = 7
	SymbolKind_SYMBOL_FIELD            SymbolKind = 8
	SymbolKind_SYMBOL_CONSTRUCTOR      SymbolKind = 9
	SymbolKind_SYMBOL_ENUM             SymbolKind = 10
	SymbolKind_SYMBOL_INTERFACE        SymbolKind = 11
	SymbolKind_SYMBOL_FUNCTION         SymbolKind = 12
	SymbolKind_SYMBOL_VARIABLE         SymbolKind = 13
	SymbolKind_SYMBOL_CONSTANT         SymbolKind = 14
	SymbolKind_SYMBOL_STRING           SymbolKind = 15
	SymbolKind_SYMBOL_NUMBER           SymbolKind = 16
	SymbolKind_SYMBOL_BOOLEAN          SymbolKind = 17
	SymbolKind_SYMBOL_ARRAY            SymbolKind = 18
	SymbolKind_SYMBOL_OBJECT           SymbolKind = 19
	SymbolKind_SYMBOL_KEY              SymbolKind = 20
	SymbolKind_SYMBOL_NULL             SymbolKind = 21
	SymbolKind_SYMBOL_ENUMMEMBER       SymbolKind = 22
	SymbolKind_SYMBOL_STRUCT           SymbolKind = 23
	SymbolKind_SYMBOL_EVENT            SymbolKind = 24
	SymbolKind_SYMBOL_OPERATOR         SymbolKind = 25
	SymbolKind_SYMBOL_TYPEPARAMETER    SymbolKind = 26
)

// Enum value maps for SymbolKind.
var (
	SymbolKind_name = map[int32]string{
		0:  "SYMBOL_KIND_UNSPECIFIED",
		1:  "SYMBOL_FILE",
		2:  "SYMBOL_MODULE",
		3:  "SYMBOL_NAMESPACE",
		4:  "SYMBOL_PACKAGE",
		5:  "SYMBOL_CLASS",
		6:  "SYMBOL_METHOD",
		7:  "SYMBOL_PROPERTY",
		8:  "SYMBOL_FIELD",
		9:  "SYMBOL_CONSTRUCTOR",
		10: "SYMBOL_ENUM",
		11: "SYMBOL_INTERFACE",
		12: "SYMBOL_FUNCTION",
		13: "SYMBOL_VARIABLE",
		14: "SYMBOL_CONSTANT",
		15: "SYMBOL_STRING",
		16: "SYMBOL_NUMBER",
		17: "SYMBOL_BOOLEAN",
		18: "SYMBOL_ARRAY",
		19: "SYMBOL_OBJECT",
		20: "SYMBOL_KEY",
		21: "SYMBOL_NULL",
		22: "SYMBOL_ENUMMEMBER",
		23: "SYMBOL_STRUCT",
		24: "SYMBOL_EVENT",
		25: "SYMBOL_OPERATOR",
		26: "SYMBOL_TYPEPARAMETER",
	}
	SymbolKind_value = map[string]int32{
		"SYMBOL_KIND_UNSPECIFIED": 0,
		"SYMBOL_FILE":             1,
		"SYMBOL_MODULE":           2,
		"SYMBOL_NAMESPACE":        3,
		"SYMBOL_PACKAGE":          4,
		"SYMBOL_CLASS":            5,
		"SYMBOL_METHOD":           6,
		"SYMBOL_PROPERTY":         7,
		"SYMBOL_FIELD":            8,
		"SYMBOL_CONSTRUCTOR":      9,
		"SYMBOL_ENUM":             10,
		"SYMBOL_INTERFACE":        11,
		"SYMBOL_FUNCTION":         12,
		"SYMBOL_VARIABLE":         13,
		"SYMBOL_CONSTANT":         14,
		"SYMBOL_STRING":           15,
		"SYMBOL_NUMBER":           16,
		"SYMBOL_BOOLEAN":          17,
		"SYMBOL_ARRAY":            18,
		"SYMBOL_OBJECT":           19,
		"SYMBOL_KEY":              20,
		"SYMBOL_NULL":             21,
		"SYMBOL_ENUMMEMBER":       22,
		"SYMBOL_STRUCT":           23,
		"SYMBOL_EVENT":            24,
		"SYMBOL_OPERATOR":         25,
		"SYMBOL_TYPEPARAMETER":    26,
	}
)

func (x SymbolKind) Enum() *SymbolKind {
	p := new(SymbolKind)
	*p = x
	return p
}

func (x SymbolKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[7].Descriptor()
}

func (SymbolKind) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[7]
}

func (x SymbolKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolKind.Descriptor instead.
func (SymbolKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{7}
}

// SymbolTag are extra annotations that tweak the rendering of a symbol.
//
// @since 3.15
type SymbolTag int32

const (
	// Conventional default for enums. Do not use this.
	SymbolTag_SYMBOL_TAG_UNSPECIFIED SymbolTag = 0
	// Render a symbol as obsolete, usually using a strike-out.
	SymbolTag_DEPRECATED_SYMBOL_TAG SymbolTag = 1
)

// Enum value maps for SymbolTag.
var (
	SymbolTag_name = map[int32]string{
		0: "SYMBOL_TAG_UNSPECIFIED",
		1: "DEPRECATED_SYMBOL_TAG",
	}
	SymbolTag_value = map[string]int32{
		"SYMBOL_TAG_UNSPECIFIED": 0,
		"DEPRECATED_SYMBOL_TAG":  1,
	}
)

func (x SymbolTag) Enum() *SymbolTag {
	p := new(SymbolTag)
	*p = x
	return p
}

func (x SymbolTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolTag) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[8].Descriptor()
}

func (SymbolTag) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[8]
}

func (x SymbolTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolTag.Descriptor instead.
func (SymbolTag) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{8}
}

// CodeActionKind is the kind of a code action.
//
// Kinds are a hierarchical list of identifiers separated by `.`, e.g.
// `"refactor.extract.function"`.
//
// The set of kinds is open and client needs to announce the kinds it supports to the server during
// initialization.
//
// A set of predefined code action kinds.
// (-- api-linter: core::0126::unspecified=disabled --)
type CodeActionKind int32

const (
	// Empty kind.
	CodeActionKind_EMPTY CodeActionKind = 0
	// Base kind for quickfix actions: 'quickfix'.
	CodeActionKind_QUICKFIX CodeActionKind = 1
	// Base kind for refactoring actions: 'refactor'.
	CodeActionKind_REFACTOR CodeActionKind = 2
	// Base kind for refactoring extraction actions: 'refactor.extract'.
	//
	// Example extract actions:
	//
	// - Extract method
	// - Extract function
	// - Extract variable
	// - Extract interface from class
	// - ...
	CodeActionKind_REFACTOR_EXTRACT CodeActionKind = 3
	// Base kind for refactoring inline actions: 'refactor.inline'.
	//
	// Example inline actions:
	//
	// - Inline function
	// - Inline variable
	// - Inline constant
	// - ...
	CodeActionKind_REFACTOR_INLINE CodeActionKind = 4
	// Base kind for refactoring rewrite actions: 'refactor.rewrite'.
	//
	// Example rewrite actions:
	//
	// - Convert JavaScript function to class
	// - Add or remove parameter
	// - Encapsulate field
	// - Make method static
	// - Move method to base class
	// - ...
	CodeActionKind_REFACTOR_REWRITE CodeActionKind = 5
	// Base kind for source actions: `source`.
	//
	// Source code actions apply to the entire file.
	CodeActionKind_SOURCE CodeActionKind = 6
	// Base kind for an organize imports source action: `source.organizeImports`.
	CodeActionKind_SOURCE_ORGANIZE_IMPORTS CodeActionKind = 7
)

// Enum value maps for CodeActionKind.
var (
	CodeActionKind_name = map[int32]string{
		0: "EMPTY",
		1: "QUICKFIX",
		2: "REFACTOR",
		3: "REFACTOR_EXTRACT",
		4: "REFACTOR_INLINE",
		5: "REFACTOR_REWRITE",
		6: "SOURCE",
		7: "SOURCE_ORGANIZE_IMPORTS",
	}
	CodeActionKind_value = map[string]int32{
		"EMPTY":                   0,
		"QUICKFIX":                1,
		"REFACTOR":                2,
		"REFACTOR_EXTRACT":        3,
		"REFACTOR_INLINE":         4,
		"REFACTOR_REWRITE":        5,
		"SOURCE":                  6,
		"SOURCE_ORGANIZE_IMPORTS": 7,
	}
)

func (x CodeActionKind) Enum() *CodeActionKind {
	p := new(CodeActionKind)
	*p = x
	return p
}

func (x CodeActionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeActionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[9].Descriptor()
}

func (CodeActionKind) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[9]
}

func (x CodeActionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeActionKind.Descriptor instead.
func (CodeActionKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{9}
}

// FoldingRangeKind Enum of known range kinds.
type FoldingRangeKind int32

const (
	// Conventional default for enums. Do not use this.
	FoldingRangeKind_FOLDING_RANGE_KIND_UNSPECIFIED FoldingRangeKind = 0
	// Folding range for a comment.
	//
	// string: 'comment'
	FoldingRangeKind_COMMENT_RANGE FoldingRangeKind = 1
	// Folding range for a imports or includes.
	//
	// string: 'imports'
	FoldingRangeKind_IMPORTS_RANGE FoldingRangeKind = 2
	// Folding range for a region (e.g. `#region`).
	//
	// string: 'region'
	FoldingRangeKind_REGION_RANGE FoldingRangeKind = 3
)

// Enum value maps for FoldingRangeKind.
var (
	FoldingRangeKind_name = map[int32]string{
		0: "FOLDING_RANGE_KIND_UNSPECIFIED",
		1: "COMMENT_RANGE",
		2: "IMPORTS_RANGE",
		3: "REGION_RANGE",
	}
	FoldingRangeKind_value = map[string]int32{
		"FOLDING_RANGE_KIND_UNSPECIFIED": 0,
		"COMMENT_RANGE":                  1,
		"IMPORTS_RANGE":                  2,
		"REGION_RANGE":                   3,
	}
)

func (x FoldingRangeKind) Enum() *FoldingRangeKind {
	p := new(FoldingRangeKind)
	*p = x
	return p
}

func (x FoldingRangeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FoldingRangeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[10].Descriptor()
}

func (FoldingRangeKind) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[10]
}

func (x FoldingRangeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FoldingRangeKind.Descriptor instead.
func (FoldingRangeKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{10}
}

// SemanticTokenTypes represents a semantic token type.
//
// (-- api-linter: core::0192::only-leading-comments=disabled --)
type SemanticTokenTypes int32

const (
	// Conventional default for enums. Do not use this.
	SemanticTokenTypes_SEMANTIC_TOKEN_TYPES_UNSPECIFIED SemanticTokenTypes = 0
	SemanticTokenTypes_NAMESPACE                        SemanticTokenTypes = 1  // 'namespace',
	SemanticTokenTypes_TYPE                             SemanticTokenTypes = 2  // 'type',
	SemanticTokenTypes_CLASS                            SemanticTokenTypes = 3  // 'class',
	SemanticTokenTypes_ENUM                             SemanticTokenTypes = 4  // 'enum',
	SemanticTokenTypes_INTERFACE                        SemanticTokenTypes = 5  // 'interface',
	SemanticTokenTypes_STRUCT                           SemanticTokenTypes = 6  // 'struct',
	SemanticTokenTypes_TYPE_PARAMETER                   SemanticTokenTypes = 7  // 'typeParameter',
	SemanticTokenTypes_PARAMETER                        SemanticTokenTypes = 8  // 'parameter',
	SemanticTokenTypes_VARIABLE                         SemanticTokenTypes = 9  // 'variable',
	SemanticTokenTypes_PROPERTY                         SemanticTokenTypes = 10 // 'property',
	SemanticTokenTypes_ENUMMEMBER                       SemanticTokenTypes = 11 // 'enumMember',
	SemanticTokenTypes_EVENT                            SemanticTokenTypes = 12 // 'event',
	SemanticTokenTypes_FUNCTION                         SemanticTokenTypes = 13 // 'function',
	SemanticTokenTypes_MEMBER                           SemanticTokenTypes = 14 // 'member',
	SemanticTokenTypes_MACRO                            SemanticTokenTypes = 15 // 'macro',
	SemanticTokenTypes_KEYWORD                          SemanticTokenTypes = 16 // 'keyword',
	SemanticTokenTypes_MODIFIER                         SemanticTokenTypes = 17 // 'modifier',
	SemanticTokenTypes_COMMENT                          SemanticTokenTypes = 18 // 'comment',
	SemanticTokenTypes_STRING                           SemanticTokenTypes = 19 // 'string',
	SemanticTokenTypes_NUMBER                           SemanticTokenTypes = 20 // 'number',
	SemanticTokenTypes_REGEXP                           SemanticTokenTypes = 21 // 'regexp',
	SemanticTokenTypes_OPERATOR                         SemanticTokenTypes = 22 // 'operator'
)

// Enum value maps for SemanticTokenTypes.
var (
	SemanticTokenTypes_name = map[int32]string{
		0:  "SEMANTIC_TOKEN_TYPES_UNSPECIFIED",
		1:  "NAMESPACE",
		2:  "TYPE",
		3:  "CLASS",
		4:  "ENUM",
		5:  "INTERFACE",
		6:  "STRUCT",
		7:  "TYPE_PARAMETER",
		8:  "PARAMETER",
		9:  "VARIABLE",
		10: "PROPERTY",
		11: "ENUMMEMBER",
		12: "EVENT",
		13: "FUNCTION",
		14: "MEMBER",
		15: "MACRO",
		16: "KEYWORD",
		17: "MODIFIER",
		18: "COMMENT",
		19: "STRING",
		20: "NUMBER",
		21: "REGEXP",
		22: "OPERATOR",
	}
	SemanticTokenTypes_value = map[string]int32{
		"SEMANTIC_TOKEN_TYPES_UNSPECIFIED": 0,
		"NAMESPACE":                        1,
		"TYPE":                             2,
		"CLASS":                            3,
		"ENUM":                             4,
		"INTERFACE":                        5,
		"STRUCT":                           6,
		"TYPE_PARAMETER":                   7,
		"PARAMETER":                        8,
		"VARIABLE":                         9,
		"PROPERTY":                         10,
		"ENUMMEMBER":                       11,
		"EVENT":                            12,
		"FUNCTION":                         13,
		"MEMBER":                           14,
		"MACRO":                            15,
		"KEYWORD":                          16,
		"MODIFIER":                         17,
		"COMMENT":                          18,
		"STRING":                           19,
		"NUMBER":                           20,
		"REGEXP":                           21,
		"OPERATOR":                         22,
	}
)

func (x SemanticTokenTypes) Enum() *SemanticTokenTypes {
	p := new(SemanticTokenTypes)
	*p = x
	return p
}

func (x SemanticTokenTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SemanticTokenTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[11].Descriptor()
}

func (SemanticTokenTypes) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[11]
}

func (x SemanticTokenTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SemanticTokenTypes.Descriptor instead.
func (SemanticTokenTypes) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{11}
}

// SemanticTokenModifiers represents a semantic token modifiers.
//
// (-- api-linter: core::0192::only-leading-comments=disabled --)
type SemanticTokenModifiers int32

const (
	// Conventional default for enums. Do not use this.
	SemanticTokenModifiers_SEMANTIC_TOKEN_MODIFIERS_UNSPECIFIED SemanticTokenModifiers = 0
	SemanticTokenModifiers_DECLARATION                          SemanticTokenModifiers = 1  // 'declaration',
	SemanticTokenModifiers_DEFINITION                           SemanticTokenModifiers = 2  // 'definition',
	SemanticTokenModifiers_READONLY                             SemanticTokenModifiers = 3  //  'readonly',
	SemanticTokenModifiers_STATIC                               SemanticTokenModifiers = 4  //  'static',
	SemanticTokenModifiers_DEPRECATED                           SemanticTokenModifiers = 5  //  'deprecated',
	SemanticTokenModifiers_ABSTRACT                             SemanticTokenModifiers = 6  //  'abstract',
	SemanticTokenModifiers_ASYNC                                SemanticTokenModifiers = 7  //  'async',
	SemanticTokenModifiers_MODIFICATION                         SemanticTokenModifiers = 8  //  'modification',
	SemanticTokenModifiers_DOCUMENTATION                        SemanticTokenModifiers = 9  //  'documentation',
	SemanticTokenModifiers_DEFAULT_LIBRARY                      SemanticTokenModifiers = 10 //  'defaultLibrary'
)

// Enum value maps for SemanticTokenModifiers.
var (
	SemanticTokenModifiers_name = map[int32]string{
		0:  "SEMANTIC_TOKEN_MODIFIERS_UNSPECIFIED",
		1:  "DECLARATION",
		2:  "DEFINITION",
		3:  "READONLY",
		4:  "STATIC",
		5:  "DEPRECATED",
		6:  "ABSTRACT",
		7:  "ASYNC",
		8:  "MODIFICATION",
		9:  "DOCUMENTATION",
		10: "DEFAULT_LIBRARY",
	}
	SemanticTokenModifiers_value = map[string]int32{
		"SEMANTIC_TOKEN_MODIFIERS_UNSPECIFIED": 0,
		"DECLARATION":                          1,
		"DEFINITION":                           2,
		"READONLY":                             3,
		"STATIC":                               4,
		"DEPRECATED":                           5,
		"ABSTRACT":                             6,
		"ASYNC":                                7,
		"MODIFICATION":                         8,
		"DOCUMENTATION":                        9,
		"DEFAULT_LIBRARY":                      10,
	}
)

func (x SemanticTokenModifiers) Enum() *SemanticTokenModifiers {
	p := new(SemanticTokenModifiers)
	*p = x
	return p
}

func (x SemanticTokenModifiers) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SemanticTokenModifiers) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[12].Descriptor()
}

func (SemanticTokenModifiers) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[12]
}

func (x SemanticTokenModifiers) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SemanticTokenModifiers.Descriptor instead.
func (SemanticTokenModifiers) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{12}
}

// TokenFormat represents a format of token.
type TokenFormat int32

const (
	// Conventional default for enums. Do not use this.
	TokenFormat_TOKEN_FORMAT_UNSPECIFIED TokenFormat = 0
	// string: 'relative'
	TokenFormat_RELATIVE TokenFormat = 1
)

// Enum value maps for TokenFormat.
var (
	TokenFormat_name = map[int32]string{
		0: "TOKEN_FORMAT_UNSPECIFIED",
		1: "RELATIVE",
	}
	TokenFormat_value = map[string]int32{
		"TOKEN_FORMAT_UNSPECIFIED": 0,
		"RELATIVE":                 1,
	}
)

func (x TokenFormat) Enum() *TokenFormat {
	p := new(TokenFormat)
	*p = x
	return p
}

func (x TokenFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[13].Descriptor()
}

func (TokenFormat) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[13]
}

func (x TokenFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenFormat.Descriptor instead.
func (TokenFormat) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{13}
}

type FileSystemWatcher_WatchKind int32

const (
	// Conventional default for enums. Do not use this.
	FileSystemWatcher_WATCH_KIND_UNSPECIFIED FileSystemWatcher_WatchKind = 0
	// Interested in create events.
	FileSystemWatcher_CREATE FileSystemWatcher_WatchKind = 1
	// Interested in change events
	FileSystemWatcher_CHANGE FileSystemWatcher_WatchKind = 2
	// Interested in delete events
	FileSystemWatcher_DELETE FileSystemWatcher_WatchKind = 4
)

// Enum value maps for FileSystemWatcher_WatchKind.
var (
	FileSystemWatcher_WatchKind_name = map[int32]string{
		0: "WATCH_KIND_UNSPECIFIED",
		1: "CREATE",
		2: "CHANGE",
		4: "DELETE",
	}
	FileSystemWatcher_WatchKind_value = map[string]int32{
		"WATCH_KIND_UNSPECIFIED": 0,
		"CREATE":                 1,
		"CHANGE":                 2,
		"DELETE":                 4,
	}
)

func (x FileSystemWatcher_WatchKind) Enum() *FileSystemWatcher_WatchKind {
	p := new(FileSystemWatcher_WatchKind)
	*p = x
	return p
}

func (x FileSystemWatcher_WatchKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileSystemWatcher_WatchKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[14].Descriptor()
}

func (FileSystemWatcher_WatchKind) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[14]
}

func (x FileSystemWatcher_WatchKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileSystemWatcher_WatchKind.Descriptor instead.
func (FileSystemWatcher_WatchKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{76, 0}
}

// FileChangeType is the file event type.
type FileEvent_FileChangeType int32

const (
	// Conventional default for enums. Do not use this.
	FileEvent_FILE_CHANGE_TYPE_UNSPECIFIED FileEvent_FileChangeType = 0
	// The file got created.
	FileEvent_CREATED FileEvent_FileChangeType = 1
	// The file got changed.
	FileEvent_CHANGED FileEvent_FileChangeType = 2
	// The file got deleted.
	FileEvent_DELETED FileEvent_FileChangeType = 3
)

// Enum value maps for FileEvent_FileChangeType.
var (
	FileEvent_FileChangeType_name = map[int32]string{
		0: "FILE_CHANGE_TYPE_UNSPECIFIED",
		1: "CREATED",
		2: "CHANGED",
		3: "DELETED",
	}
	FileEvent_FileChangeType_value = map[string]int32{
		"FILE_CHANGE_TYPE_UNSPECIFIED": 0,
		"CREATED":                      1,
		"CHANGED":                      2,
		"DELETED":                      3,
	}
)

func (x FileEvent_FileChangeType) Enum() *FileEvent_FileChangeType {
	p := new(FileEvent_FileChangeType)
	*p = x
	return p
}

func (x FileEvent_FileChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileEvent_FileChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[15].Descriptor()
}

func (FileEvent_FileChangeType) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[15]
}

func (x FileEvent_FileChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileEvent_FileChangeType.Descriptor instead.
func (FileEvent_FileChangeType) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{78, 0}
}

// SignatureHelpTriggerKind how a signature help was triggered.
//
// @since 3.15.0
type SignatureHelpContext_SignatureHelpTriggerKind int32

const (
	// Conventional default for enums. Do not use this.
	SignatureHelpContext_SIGNATURE_HELP_TRIGGER_KIND_UNSPECIFIED SignatureHelpContext_SignatureHelpTriggerKind = 0
	// Signature help was invoked manually by the user or by a command.
	SignatureHelpContext_INVOKED SignatureHelpContext_SignatureHelpTriggerKind = 1
	// Signature help was triggered by a trigger character.
	SignatureHelpContext_TRIGGER_CHARACTER SignatureHelpContext_SignatureHelpTriggerKind = 2
	// Signature help was triggered by the cursor moving or by the document content changing.
	SignatureHelpContext_CONTENT_CHANGE SignatureHelpContext_SignatureHelpTriggerKind = 3
)

// Enum value maps for SignatureHelpContext_SignatureHelpTriggerKind.
var (
	SignatureHelpContext_SignatureHelpTriggerKind_name = map[int32]string{
		0: "SIGNATURE_HELP_TRIGGER_KIND_UNSPECIFIED",
		1: "INVOKED",
		2: "TRIGGER_CHARACTER",
		3: "CONTENT_CHANGE",
	}
	SignatureHelpContext_SignatureHelpTriggerKind_value = map[string]int32{
		"SIGNATURE_HELP_TRIGGER_KIND_UNSPECIFIED": 0,
		"INVOKED":           1,
		"TRIGGER_CHARACTER": 2,
		"CONTENT_CHANGE":    3,
	}
)

func (x SignatureHelpContext_SignatureHelpTriggerKind) Enum() *SignatureHelpContext_SignatureHelpTriggerKind {
	p := new(SignatureHelpContext_SignatureHelpTriggerKind)
	*p = x
	return p
}

func (x SignatureHelpContext_SignatureHelpTriggerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureHelpContext_SignatureHelpTriggerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[16].Descriptor()
}

func (SignatureHelpContext_SignatureHelpTriggerKind) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[16]
}

func (x SignatureHelpContext_SignatureHelpTriggerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureHelpContext_SignatureHelpTriggerKind.Descriptor instead.
func (SignatureHelpContext_SignatureHelpTriggerKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{118, 0}
}

// DocumentHighlightKind is a document highlight kind.
type DocumentHighlight_DocumentHighlightKind int32

const (
	// Conventional default for enums. Do not use this.
	DocumentHighlight_DOCUMENT_HIGHLIGHT_KIND_UNSPECIFIED DocumentHighlight_DocumentHighlightKind = 0
	// A textual occurrence.
	DocumentHighlight_TEXT DocumentHighlight_DocumentHighlightKind = 1
	// Read-access of a symbol, like reading a variable.
	DocumentHighlight_READ DocumentHighlight_DocumentHighlightKind = 2
	// Write-access of a symbol, like writing to a variable.
	DocumentHighlight_WRITE DocumentHighlight_DocumentHighlightKind = 3
)

// Enum value maps for DocumentHighlight_DocumentHighlightKind.
var (
	DocumentHighlight_DocumentHighlightKind_name = map[int32]string{
		0: "DOCUMENT_HIGHLIGHT_KIND_UNSPECIFIED",
		1: "TEXT",
		2: "READ",
		3: "WRITE",
	}
	DocumentHighlight_DocumentHighlightKind_value = map[string]int32{
		"DOCUMENT_HIGHLIGHT_KIND_UNSPECIFIED": 0,
		"TEXT":                                1,
		"READ":                                2,
		"WRITE":                               3,
	}
)

func (x DocumentHighlight_DocumentHighlightKind) Enum() *DocumentHighlight_DocumentHighlightKind {
	p := new(DocumentHighlight_DocumentHighlightKind)
	*p = x
	return p
}

func (x DocumentHighlight_DocumentHighlightKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentHighlight_DocumentHighlightKind) Descriptor() protoreflect.EnumDescriptor {
	return file_protocol_rpc_rpc_proto_enumTypes[17].Descriptor()
}

func (DocumentHighlight_DocumentHighlightKind) Type() protoreflect.EnumType {
	return &file_protocol_rpc_rpc_proto_enumTypes[17]
}

func (x DocumentHighlight_DocumentHighlightKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentHighlight_DocumentHighlightKind.Descriptor instead.
func (DocumentHighlight_DocumentHighlightKind) EnumDescriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{147, 0}
}

// CancelRequest represents a cancel notification params.
type CancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The request id to cancel.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CancelRequest) Reset() {
	*x = CancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRequest) ProtoMessage() {}

func (x *CancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRequest.ProtoReflect.Descriptor instead.
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *CancelRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// ProgressToken is the report progress token.
type ProgressToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	Token int32 `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ProgressToken) Reset() {
	*x = ProgressToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressToken) ProtoMessage() {}

func (x *ProgressToken) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressToken.ProtoReflect.Descriptor instead.
func (*ProgressToken) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *ProgressToken) GetToken() int32 {
	if x != nil {
		return x.Token
	}
	return 0
}

// ProgressRequest represents a progress notification params.
//
// @since 3.15.0
type ProgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The progress token provided by the client or server.
	Token *ProgressToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Required. The progress data.
	Value *anypb.Any `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProgressRequest) Reset() {
	*x = ProgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressRequest) ProtoMessage() {}

func (x *ProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressRequest.ProtoReflect.Descriptor instead.
func (*ProgressRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *ProgressRequest) GetToken() *ProgressToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ProgressRequest) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

// WorkDoneProgressParams a parameter literal used to pass a work done progress token.
type WorkDoneProgressParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional token that a server can use to report work done progress.
	WorkDoneToken *ProgressToken `protobuf:"bytes,1,opt,name=work_done_token,json=workDoneToken,proto3" json:"work_done_token,omitempty"`
}

func (x *WorkDoneProgressParams) Reset() {
	*x = WorkDoneProgressParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkDoneProgressParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkDoneProgressParams) ProtoMessage() {}

func (x *WorkDoneProgressParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkDoneProgressParams.ProtoReflect.Descriptor instead.
func (*WorkDoneProgressParams) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *WorkDoneProgressParams) GetWorkDoneToken() *ProgressToken {
	if x != nil {
		return x.WorkDoneToken
	}
	return nil
}

// PartialResultParams a parameter literal used to pass a partial result token.
type PartialResultParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional token that a server can use to report partial results (e.g. streaming) to
	// the client.
	PartialResultToken int32 `protobuf:"varint,1,opt,name=partial_result_token,json=partialResultToken,proto3" json:"partial_result_token,omitempty"`
}

func (x *PartialResultParams) Reset() {
	*x = PartialResultParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialResultParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialResultParams) ProtoMessage() {}

func (x *PartialResultParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialResultParams.ProtoReflect.Descriptor instead.
func (*PartialResultParams) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *PartialResultParams) GetPartialResultToken() int32 {
	if x != nil {
		return x.PartialResultToken
	}
	return 0
}

// InitializeRequest is the sent as the first request from the client to the server. If the server
// receives a request or notification before the initialize request it should act as follows:
//
// - For a request the response should be an error with code: -32002. The message can be picked by
// the server.
// - Notifications should be dropped, except for the exit notification. This will allow the exit of
// a server without an initialize request.
//
// Until the server has responded to the initialize request with an InitializeResponse, the client
// must not send any additional requests or notifications to the server.
//
// In addition the server is not allowed to send any requests or notifications to the client until
// it has responded with an InitializeResponse, with the exception that during the initialize
// request the server is allowed to send the notifications window/showMessage, window/logMessage and
// telemetry/event as well as the window/showMessageRequest request to the client.
//
// In case the client sets up a progress token in the initialize params (e.g. property
// workDoneToken) the server is also allowed to use that token (and only that token) using the
// $/progress notification sent from the server to the client.
//
// The initialize request may only be sent once.
type InitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// Required. The process Id of the parent process that started
	// the server. Is null if the process has not been started by another process.
	// If the parent process is not alive then the server should exit (see exit notification) its
	// process.
	ProcessId int32 `protobuf:"varint,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	// Optional. Information about the client.
	//
	// @since 3.15.0
	ClientInfo *InitializeRequest_ClientInfo `protobuf:"bytes,3,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	// Optional. The rootPath of the workspace. Is null
	// if no folder is open.
	//
	// Use rootUri instead of.
	//
	// Deprecated: Do not use.
	RootPath *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=root_path,json=rootPath,proto3" json:"root_path,omitempty"`
	// The rootUri of the workspace. Is null if no
	// folder is open. If both `rootPath` and `rootUri` are set
	// `rootUri` wins.
	//
	// nullable
	RootUri *protocol.DocumentURI `protobuf:"bytes,5,opt,name=root_uri,json=rootUri,proto3" json:"root_uri,omitempty"`
	// Optional. User provided initialization options.
	InitializationOptions *anypb.Any `protobuf:"bytes,6,opt,name=initialization_options,json=initializationOptions,proto3" json:"initialization_options,omitempty"`
	// Required. The capabilities provided by the client (editor or tool)
	Capabilities *ClientCapabilities `protobuf:"bytes,7,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Optional. The initial trace setting. If omitted trace is disabled ('off').
	Trace protocol.TraceValue `protobuf:"varint,8,opt,name=trace,proto3,enum=protocol.TraceValue" json:"trace,omitempty"`
	// Optional. The workspace folders configured in the client when the server starts.
	// This property is only available if the client supports workspace folders.
	// It can be `null` if the client supports workspace folders but none are
	// configured.
	//
	// @since 3.6.0
	//
	// nullable
	WorkspaceFolders []*WorkspaceFolder `protobuf:"bytes,9,rep,name=workspace_folders,json=workspaceFolders,proto3" json:"workspace_folders,omitempty"`
}

func (x *InitializeRequest) Reset() {
	*x = InitializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequest) ProtoMessage() {}

func (x *InitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequest.ProtoReflect.Descriptor instead.
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *InitializeRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *InitializeRequest) GetProcessId() int32 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *InitializeRequest) GetClientInfo() *InitializeRequest_ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

// Deprecated: Do not use.
func (x *InitializeRequest) GetRootPath() *wrapperspb.StringValue {
	if x != nil {
		return x.RootPath
	}
	return nil
}

func (x *InitializeRequest) GetRootUri() *protocol.DocumentURI {
	if x != nil {
		return x.RootUri
	}
	return nil
}

func (x *InitializeRequest) GetInitializationOptions() *anypb.Any {
	if x != nil {
		return x.InitializationOptions
	}
	return nil
}

func (x *InitializeRequest) GetCapabilities() *ClientCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *InitializeRequest) GetTrace() protocol.TraceValue {
	if x != nil {
		return x.Trace
	}
	return protocol.TraceValue_TRACE_VALUE_UNSPECIFIED
}

func (x *InitializeRequest) GetWorkspaceFolders() []*WorkspaceFolder {
	if x != nil {
		return x.WorkspaceFolders
	}
	return nil
}

// InitializedRequest is the initialized notification is sent from the client to the server after
// the client received the result of the initialize request but before the client is sending any
// other request or notification to the server. The server can use the initialized notification for
// example to dynamically register capabilities. The initialized notification may only be sent once.
type InitializedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitializedRequest) Reset() {
	*x = InitializedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializedRequest) ProtoMessage() {}

func (x *InitializedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializedRequest.ProtoReflect.Descriptor instead.
func (*InitializedRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{6}
}

// LogTraceRequest represents a `$/logTrace` notification params.
type LogTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message to be logged.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Optional. Additional information that can be computed if the `trace` configuration is set to
	// `'verbose'`.
	Verbose *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=verbose,proto3" json:"verbose,omitempty"`
}

func (x *LogTraceRequest) Reset() {
	*x = LogTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogTraceRequest) ProtoMessage() {}

func (x *LogTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogTraceRequest.ProtoReflect.Descriptor instead.
func (*LogTraceRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *LogTraceRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogTraceRequest) GetVerbose() *wrapperspb.StringValue {
	if x != nil {
		return x.Verbose
	}
	return nil
}

// SetTraceRequest represents a `$/setTrace` notification params.
type SetTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new value that should be assigned to the trace setting.
	Value protocol.TraceValue `protobuf:"varint,1,opt,name=value,proto3,enum=protocol.TraceValue" json:"value,omitempty"`
}

func (x *SetTraceRequest) Reset() {
	*x = SetTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTraceRequest) ProtoMessage() {}

func (x *SetTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTraceRequest.ProtoReflect.Descriptor instead.
func (*SetTraceRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *SetTraceRequest) GetValue() protocol.TraceValue {
	if x != nil {
		return x.Value
	}
	return protocol.TraceValue_TRACE_VALUE_UNSPECIFIED
}

// ShowMessageResponse represents a ShowMessage response.
type ShowMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ShowMessageResponse:
	//	*ShowMessageResponse_MessageActionItem
	//	*ShowMessageResponse_Empty
	//	*ShowMessageResponse_Error
	ShowMessageResponse isShowMessageResponse_ShowMessageResponse `protobuf_oneof:"show_message_response"`
}

func (x *ShowMessageResponse) Reset() {
	*x = ShowMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowMessageResponse) ProtoMessage() {}

func (x *ShowMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowMessageResponse.ProtoReflect.Descriptor instead.
func (*ShowMessageResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{9}
}

func (m *ShowMessageResponse) GetShowMessageResponse() isShowMessageResponse_ShowMessageResponse {
	if m != nil {
		return m.ShowMessageResponse
	}
	return nil
}

func (x *ShowMessageResponse) GetMessageActionItem() *MessageActionItem {
	if x, ok := x.GetShowMessageResponse().(*ShowMessageResponse_MessageActionItem); ok {
		return x.MessageActionItem
	}
	return nil
}

func (x *ShowMessageResponse) GetEmpty() structpb.NullValue {
	if x, ok := x.GetShowMessageResponse().(*ShowMessageResponse_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (x *ShowMessageResponse) GetError() *protocol.Error {
	if x, ok := x.GetShowMessageResponse().(*ShowMessageResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isShowMessageResponse_ShowMessageResponse interface {
	isShowMessageResponse_ShowMessageResponse()
}

type ShowMessageResponse_MessageActionItem struct {
	MessageActionItem *MessageActionItem `protobuf:"bytes,1,opt,name=message_action_item,json=messageActionItem,proto3,oneof"`
}

type ShowMessageResponse_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

type ShowMessageResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*ShowMessageResponse_MessageActionItem) isShowMessageResponse_ShowMessageResponse() {}

func (*ShowMessageResponse_Empty) isShowMessageResponse_ShowMessageResponse() {}

func (*ShowMessageResponse_Error) isShowMessageResponse_ShowMessageResponse() {}

// WorkspaceFoldersResponse represents a WorkspaceFolders response.
type WorkspaceFoldersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WorkspaceFoldersResponse:
	//	*WorkspaceFoldersResponse_WorkspaceFolders_
	//	*WorkspaceFoldersResponse_Empty
	//	*WorkspaceFoldersResponse_Error
	WorkspaceFoldersResponse isWorkspaceFoldersResponse_WorkspaceFoldersResponse `protobuf_oneof:"workspace_folders_response"`
}

func (x *WorkspaceFoldersResponse) Reset() {
	*x = WorkspaceFoldersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceFoldersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceFoldersResponse) ProtoMessage() {}

func (x *WorkspaceFoldersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceFoldersResponse.ProtoReflect.Descriptor instead.
func (*WorkspaceFoldersResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{10}
}

func (m *WorkspaceFoldersResponse) GetWorkspaceFoldersResponse() isWorkspaceFoldersResponse_WorkspaceFoldersResponse {
	if m != nil {
		return m.WorkspaceFoldersResponse
	}
	return nil
}

func (x *WorkspaceFoldersResponse) GetWorkspaceFolders() *WorkspaceFoldersResponse_WorkspaceFolders {
	if x, ok := x.GetWorkspaceFoldersResponse().(*WorkspaceFoldersResponse_WorkspaceFolders_); ok {
		return x.WorkspaceFolders
	}
	return nil
}

func (x *WorkspaceFoldersResponse) GetEmpty() structpb.NullValue {
	if x, ok := x.GetWorkspaceFoldersResponse().(*WorkspaceFoldersResponse_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (x *WorkspaceFoldersResponse) GetError() *protocol.Error {
	if x, ok := x.GetWorkspaceFoldersResponse().(*WorkspaceFoldersResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isWorkspaceFoldersResponse_WorkspaceFoldersResponse interface {
	isWorkspaceFoldersResponse_WorkspaceFoldersResponse()
}

type WorkspaceFoldersResponse_WorkspaceFolders_ struct {
	WorkspaceFolders *WorkspaceFoldersResponse_WorkspaceFolders `protobuf:"bytes,1,opt,name=workspace_folders,json=workspaceFolders,proto3,oneof"`
}

type WorkspaceFoldersResponse_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

type WorkspaceFoldersResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*WorkspaceFoldersResponse_WorkspaceFolders_) isWorkspaceFoldersResponse_WorkspaceFoldersResponse() {
}

func (*WorkspaceFoldersResponse_Empty) isWorkspaceFoldersResponse_WorkspaceFoldersResponse() {}

func (*WorkspaceFoldersResponse_Error) isWorkspaceFoldersResponse_WorkspaceFoldersResponse() {}

// ConfigurationResponse represents a Configuration response.
type ConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ConfigurationResponse:
	//	*ConfigurationResponse_Anys_
	//	*ConfigurationResponse_Error
	ConfigurationResponse isConfigurationResponse_ConfigurationResponse `protobuf_oneof:"configuration_response"`
}

func (x *ConfigurationResponse) Reset() {
	*x = ConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationResponse) ProtoMessage() {}

func (x *ConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{11}
}

func (m *ConfigurationResponse) GetConfigurationResponse() isConfigurationResponse_ConfigurationResponse {
	if m != nil {
		return m.ConfigurationResponse
	}
	return nil
}

func (x *ConfigurationResponse) GetAnys() *ConfigurationResponse_Anys {
	if x, ok := x.GetConfigurationResponse().(*ConfigurationResponse_Anys_); ok {
		return x.Anys
	}
	return nil
}

func (x *ConfigurationResponse) GetError() *protocol.Error {
	if x, ok := x.GetConfigurationResponse().(*ConfigurationResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isConfigurationResponse_ConfigurationResponse interface {
	isConfigurationResponse_ConfigurationResponse()
}

type ConfigurationResponse_Anys_ struct {
	Anys *ConfigurationResponse_Anys `protobuf:"bytes,1,opt,name=anys,proto3,oneof"`
}

type ConfigurationResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ConfigurationResponse_Anys_) isConfigurationResponse_ConfigurationResponse() {}

func (*ConfigurationResponse_Error) isConfigurationResponse_ConfigurationResponse() {}

// WorkspaceSymbolsResponse represents a WorkspaceSymbols response.
type WorkspaceSymbolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WorkspaceSymbolsResponse:
	//	*WorkspaceSymbolsResponse_SymbolInformations_
	//	*WorkspaceSymbolsResponse_Error
	WorkspaceSymbolsResponse isWorkspaceSymbolsResponse_WorkspaceSymbolsResponse `protobuf_oneof:"workspace_symbols_response"`
}

func (x *WorkspaceSymbolsResponse) Reset() {
	*x = WorkspaceSymbolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceSymbolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceSymbolsResponse) ProtoMessage() {}

func (x *WorkspaceSymbolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceSymbolsResponse.ProtoReflect.Descriptor instead.
func (*WorkspaceSymbolsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{12}
}

func (m *WorkspaceSymbolsResponse) GetWorkspaceSymbolsResponse() isWorkspaceSymbolsResponse_WorkspaceSymbolsResponse {
	if m != nil {
		return m.WorkspaceSymbolsResponse
	}
	return nil
}

func (x *WorkspaceSymbolsResponse) GetSymbolInformations() *WorkspaceSymbolsResponse_SymbolInformations {
	if x, ok := x.GetWorkspaceSymbolsResponse().(*WorkspaceSymbolsResponse_SymbolInformations_); ok {
		return x.SymbolInformations
	}
	return nil
}

func (x *WorkspaceSymbolsResponse) GetError() *protocol.Error {
	if x, ok := x.GetWorkspaceSymbolsResponse().(*WorkspaceSymbolsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isWorkspaceSymbolsResponse_WorkspaceSymbolsResponse interface {
	isWorkspaceSymbolsResponse_WorkspaceSymbolsResponse()
}

type WorkspaceSymbolsResponse_SymbolInformations_ struct {
	SymbolInformations *WorkspaceSymbolsResponse_SymbolInformations `protobuf:"bytes,1,opt,name=symbol_informations,json=symbolInformations,proto3,oneof"`
}

type WorkspaceSymbolsResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*WorkspaceSymbolsResponse_SymbolInformations_) isWorkspaceSymbolsResponse_WorkspaceSymbolsResponse() {
}

func (*WorkspaceSymbolsResponse_Error) isWorkspaceSymbolsResponse_WorkspaceSymbolsResponse() {}

// ExecuteCommandResponse represents a ExecuteCommand response.
type ExecuteCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExecuteCommand:
	//	*ExecuteCommandResponse_Any
	//	*ExecuteCommandResponse_Error
	ExecuteCommand isExecuteCommandResponse_ExecuteCommand `protobuf_oneof:"execute_command"`
}

func (x *ExecuteCommandResponse) Reset() {
	*x = ExecuteCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCommandResponse) ProtoMessage() {}

func (x *ExecuteCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCommandResponse.ProtoReflect.Descriptor instead.
func (*ExecuteCommandResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{13}
}

func (m *ExecuteCommandResponse) GetExecuteCommand() isExecuteCommandResponse_ExecuteCommand {
	if m != nil {
		return m.ExecuteCommand
	}
	return nil
}

func (x *ExecuteCommandResponse) GetAny() *anypb.Any {
	if x, ok := x.GetExecuteCommand().(*ExecuteCommandResponse_Any); ok {
		return x.Any
	}
	return nil
}

func (x *ExecuteCommandResponse) GetError() *protocol.Error {
	if x, ok := x.GetExecuteCommand().(*ExecuteCommandResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isExecuteCommandResponse_ExecuteCommand interface {
	isExecuteCommandResponse_ExecuteCommand()
}

type ExecuteCommandResponse_Any struct {
	Any *anypb.Any `protobuf:"bytes,1,opt,name=any,proto3,oneof"`
}

type ExecuteCommandResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ExecuteCommandResponse_Any) isExecuteCommandResponse_ExecuteCommand() {}

func (*ExecuteCommandResponse_Error) isExecuteCommandResponse_ExecuteCommand() {}

// TextEdits represents a list of TextEdit.
type TextEdits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextEdit []*protocol.TextEdit `protobuf:"bytes,1,rep,name=text_edit,json=textEdit,proto3" json:"text_edit,omitempty"`
}

func (x *TextEdits) Reset() {
	*x = TextEdits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextEdits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextEdits) ProtoMessage() {}

func (x *TextEdits) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextEdits.ProtoReflect.Descriptor instead.
func (*TextEdits) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *TextEdits) GetTextEdit() []*protocol.TextEdit {
	if x != nil {
		return x.TextEdit
	}
	return nil
}

// WillSaveTextDocumentResponse represents a WillSaveTextDocument response.
type WillSaveTextDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WillSaveTextDocumentResponse:
	//	*WillSaveTextDocumentResponse_TextEdits
	//	*WillSaveTextDocumentResponse_Error
	WillSaveTextDocumentResponse isWillSaveTextDocumentResponse_WillSaveTextDocumentResponse `protobuf_oneof:"will_save_text_document_response"`
}

func (x *WillSaveTextDocumentResponse) Reset() {
	*x = WillSaveTextDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WillSaveTextDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WillSaveTextDocumentResponse) ProtoMessage() {}

func (x *WillSaveTextDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WillSaveTextDocumentResponse.ProtoReflect.Descriptor instead.
func (*WillSaveTextDocumentResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{15}
}

func (m *WillSaveTextDocumentResponse) GetWillSaveTextDocumentResponse() isWillSaveTextDocumentResponse_WillSaveTextDocumentResponse {
	if m != nil {
		return m.WillSaveTextDocumentResponse
	}
	return nil
}

func (x *WillSaveTextDocumentResponse) GetTextEdits() *TextEdits {
	if x, ok := x.GetWillSaveTextDocumentResponse().(*WillSaveTextDocumentResponse_TextEdits); ok {
		return x.TextEdits
	}
	return nil
}

func (x *WillSaveTextDocumentResponse) GetError() *protocol.Error {
	if x, ok := x.GetWillSaveTextDocumentResponse().(*WillSaveTextDocumentResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isWillSaveTextDocumentResponse_WillSaveTextDocumentResponse interface {
	isWillSaveTextDocumentResponse_WillSaveTextDocumentResponse()
}

type WillSaveTextDocumentResponse_TextEdits struct {
	TextEdits *TextEdits `protobuf:"bytes,1,opt,name=text_edits,json=textEdits,proto3,oneof"`
}

type WillSaveTextDocumentResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*WillSaveTextDocumentResponse_TextEdits) isWillSaveTextDocumentResponse_WillSaveTextDocumentResponse() {
}

func (*WillSaveTextDocumentResponse_Error) isWillSaveTextDocumentResponse_WillSaveTextDocumentResponse() {
}

// CompletionItems represents a list of CompletionItem.
type CompletionItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionItems []*CompletionItems `protobuf:"bytes,1,rep,name=completion_items,json=completionItems,proto3" json:"completion_items,omitempty"`
}

func (x *CompletionItems) Reset() {
	*x = CompletionItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionItems) ProtoMessage() {}

func (x *CompletionItems) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionItems.ProtoReflect.Descriptor instead.
func (*CompletionItems) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *CompletionItems) GetCompletionItems() []*CompletionItems {
	if x != nil {
		return x.CompletionItems
	}
	return nil
}

// CompletionResponse represents a Completion response.
type CompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CompletionResponse:
	//	*CompletionResponse_CompletionItems
	//	*CompletionResponse_CompletionList
	//	*CompletionResponse_Empty
	//	*CompletionResponse_Error
	CompletionResponse isCompletionResponse_CompletionResponse `protobuf_oneof:"completion_response"`
}

func (x *CompletionResponse) Reset() {
	*x = CompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionResponse) ProtoMessage() {}

func (x *CompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionResponse.ProtoReflect.Descriptor instead.
func (*CompletionResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{17}
}

func (m *CompletionResponse) GetCompletionResponse() isCompletionResponse_CompletionResponse {
	if m != nil {
		return m.CompletionResponse
	}
	return nil
}

func (x *CompletionResponse) GetCompletionItems() *CompletionItems {
	if x, ok := x.GetCompletionResponse().(*CompletionResponse_CompletionItems); ok {
		return x.CompletionItems
	}
	return nil
}

func (x *CompletionResponse) GetCompletionList() *CompletionList {
	if x, ok := x.GetCompletionResponse().(*CompletionResponse_CompletionList); ok {
		return x.CompletionList
	}
	return nil
}

func (x *CompletionResponse) GetEmpty() structpb.NullValue {
	if x, ok := x.GetCompletionResponse().(*CompletionResponse_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (x *CompletionResponse) GetError() *protocol.Error {
	if x, ok := x.GetCompletionResponse().(*CompletionResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isCompletionResponse_CompletionResponse interface {
	isCompletionResponse_CompletionResponse()
}

type CompletionResponse_CompletionItems struct {
	CompletionItems *CompletionItems `protobuf:"bytes,1,opt,name=completion_items,json=completionItems,proto3,oneof"`
}

type CompletionResponse_CompletionList struct {
	CompletionList *CompletionList `protobuf:"bytes,2,opt,name=completion_list,json=completionList,proto3,oneof"`
}

type CompletionResponse_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,3,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

type CompletionResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

func (*CompletionResponse_CompletionItems) isCompletionResponse_CompletionResponse() {}

func (*CompletionResponse_CompletionList) isCompletionResponse_CompletionResponse() {}

func (*CompletionResponse_Empty) isCompletionResponse_CompletionResponse() {}

func (*CompletionResponse_Error) isCompletionResponse_CompletionResponse() {}

// HoverResponse represents a Hover response.
type HoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CompletionResponse:
	//	*HoverResponse_Hover
	//	*HoverResponse_Empty
	//	*HoverResponse_Error
	CompletionResponse isHoverResponse_CompletionResponse `protobuf_oneof:"completion_response"`
}

func (x *HoverResponse) Reset() {
	*x = HoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoverResponse) ProtoMessage() {}

func (x *HoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoverResponse.ProtoReflect.Descriptor instead.
func (*HoverResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{18}
}

func (m *HoverResponse) GetCompletionResponse() isHoverResponse_CompletionResponse {
	if m != nil {
		return m.CompletionResponse
	}
	return nil
}

func (x *HoverResponse) GetHover() *Hover {
	if x, ok := x.GetCompletionResponse().(*HoverResponse_Hover); ok {
		return x.Hover
	}
	return nil
}

func (x *HoverResponse) GetEmpty() structpb.NullValue {
	if x, ok := x.GetCompletionResponse().(*HoverResponse_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (x *HoverResponse) GetError() *protocol.Error {
	if x, ok := x.GetCompletionResponse().(*HoverResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isHoverResponse_CompletionResponse interface {
	isHoverResponse_CompletionResponse()
}

type HoverResponse_Hover struct {
	Hover *Hover `protobuf:"bytes,1,opt,name=hover,proto3,oneof"`
}

type HoverResponse_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

type HoverResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*HoverResponse_Hover) isHoverResponse_CompletionResponse() {}

func (*HoverResponse_Empty) isHoverResponse_CompletionResponse() {}

func (*HoverResponse_Error) isHoverResponse_CompletionResponse() {}

// CompletionItemResolveRequest represents a CompletionItemResolve request.
type CompletionItemResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionItems *CompletionItems `protobuf:"bytes,1,opt,name=completion_items,json=completionItems,proto3" json:"completion_items,omitempty"`
}

func (x *CompletionItemResolveRequest) Reset() {
	*x = CompletionItemResolveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionItemResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionItemResolveRequest) ProtoMessage() {}

func (x *CompletionItemResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionItemResolveRequest.ProtoReflect.Descriptor instead.
func (*CompletionItemResolveRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *CompletionItemResolveRequest) GetCompletionItems() *CompletionItems {
	if x != nil {
		return x.CompletionItems
	}
	return nil
}

// CompletionItemResolveRequest represents a CompletionItemResolve response.
type CompletionItemResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CompletionItemResolveResponse:
	//	*CompletionItemResolveResponse_CompletionItems
	//	*CompletionItemResolveResponse_Error
	CompletionItemResolveResponse isCompletionItemResolveResponse_CompletionItemResolveResponse `protobuf_oneof:"completion_item_resolve_response"`
}

func (x *CompletionItemResolveResponse) Reset() {
	*x = CompletionItemResolveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionItemResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionItemResolveResponse) ProtoMessage() {}

func (x *CompletionItemResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionItemResolveResponse.ProtoReflect.Descriptor instead.
func (*CompletionItemResolveResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{20}
}

func (m *CompletionItemResolveResponse) GetCompletionItemResolveResponse() isCompletionItemResolveResponse_CompletionItemResolveResponse {
	if m != nil {
		return m.CompletionItemResolveResponse
	}
	return nil
}

func (x *CompletionItemResolveResponse) GetCompletionItems() *CompletionItems {
	if x, ok := x.GetCompletionItemResolveResponse().(*CompletionItemResolveResponse_CompletionItems); ok {
		return x.CompletionItems
	}
	return nil
}

func (x *CompletionItemResolveResponse) GetError() *protocol.Error {
	if x, ok := x.GetCompletionItemResolveResponse().(*CompletionItemResolveResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isCompletionItemResolveResponse_CompletionItemResolveResponse interface {
	isCompletionItemResolveResponse_CompletionItemResolveResponse()
}

type CompletionItemResolveResponse_CompletionItems struct {
	CompletionItems *CompletionItems `protobuf:"bytes,1,opt,name=completion_items,json=completionItems,proto3,oneof"`
}

type CompletionItemResolveResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*CompletionItemResolveResponse_CompletionItems) isCompletionItemResolveResponse_CompletionItemResolveResponse() {
}

func (*CompletionItemResolveResponse_Error) isCompletionItemResolveResponse_CompletionItemResolveResponse() {
}

// SignatureHelpResponse represents a SignatureHelp response.
type SignatureHelpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CompletionItemResolveResponse:
	//	*SignatureHelpResponse_SignatureHelp
	//	*SignatureHelpResponse_Empty
	//	*SignatureHelpResponse_Error
	CompletionItemResolveResponse isSignatureHelpResponse_CompletionItemResolveResponse `protobuf_oneof:"completion_item_resolve_response"`
}

func (x *SignatureHelpResponse) Reset() {
	*x = SignatureHelpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelpResponse) ProtoMessage() {}

func (x *SignatureHelpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelpResponse.ProtoReflect.Descriptor instead.
func (*SignatureHelpResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{21}
}

func (m *SignatureHelpResponse) GetCompletionItemResolveResponse() isSignatureHelpResponse_CompletionItemResolveResponse {
	if m != nil {
		return m.CompletionItemResolveResponse
	}
	return nil
}

func (x *SignatureHelpResponse) GetSignatureHelp() *SignatureHelp {
	if x, ok := x.GetCompletionItemResolveResponse().(*SignatureHelpResponse_SignatureHelp); ok {
		return x.SignatureHelp
	}
	return nil
}

func (x *SignatureHelpResponse) GetEmpty() structpb.NullValue {
	if x, ok := x.GetCompletionItemResolveResponse().(*SignatureHelpResponse_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (x *SignatureHelpResponse) GetError() *protocol.Error {
	if x, ok := x.GetCompletionItemResolveResponse().(*SignatureHelpResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isSignatureHelpResponse_CompletionItemResolveResponse interface {
	isSignatureHelpResponse_CompletionItemResolveResponse()
}

type SignatureHelpResponse_SignatureHelp struct {
	SignatureHelp *SignatureHelp `protobuf:"bytes,1,opt,name=signature_help,json=signatureHelp,proto3,oneof"`
}

type SignatureHelpResponse_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

type SignatureHelpResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*SignatureHelpResponse_SignatureHelp) isSignatureHelpResponse_CompletionItemResolveResponse() {}

func (*SignatureHelpResponse_Empty) isSignatureHelpResponse_CompletionItemResolveResponse() {}

func (*SignatureHelpResponse_Error) isSignatureHelpResponse_CompletionItemResolveResponse() {}

// Locations represents a list of Location.
type Locations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []*Locations `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *Locations) Reset() {
	*x = Locations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Locations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Locations) ProtoMessage() {}

func (x *Locations) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Locations.ProtoReflect.Descriptor instead.
func (*Locations) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *Locations) GetLocations() []*Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

// LocationLinks represents a list of LocationLink.
type LocationLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationLinks []*LocationLinks `protobuf:"bytes,1,rep,name=location_links,json=locationLinks,proto3" json:"location_links,omitempty"`
}

func (x *LocationLinks) Reset() {
	*x = LocationLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationLinks) ProtoMessage() {}

func (x *LocationLinks) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationLinks.ProtoReflect.Descriptor instead.
func (*LocationLinks) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *LocationLinks) GetLocationLinks() []*LocationLinks {
	if x != nil {
		return x.LocationLinks
	}
	return nil
}

// DeclarationResponse represents a Declaration response.
type DeclarationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DeclarationResponse:
	//	*DeclarationResponse_Result_
	//	*DeclarationResponse_PartialResult_
	//	*DeclarationResponse_Error
	DeclarationResponse isDeclarationResponse_DeclarationResponse `protobuf_oneof:"declaration_response"`
}

func (x *DeclarationResponse) Reset() {
	*x = DeclarationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclarationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclarationResponse) ProtoMessage() {}

func (x *DeclarationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclarationResponse.ProtoReflect.Descriptor instead.
func (*DeclarationResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{24}
}

func (m *DeclarationResponse) GetDeclarationResponse() isDeclarationResponse_DeclarationResponse {
	if m != nil {
		return m.DeclarationResponse
	}
	return nil
}

func (x *DeclarationResponse) GetResult() *DeclarationResponse_Result {
	if x, ok := x.GetDeclarationResponse().(*DeclarationResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *DeclarationResponse) GetPartialResult() *DeclarationResponse_PartialResult {
	if x, ok := x.GetDeclarationResponse().(*DeclarationResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *DeclarationResponse) GetError() *protocol.Error {
	if x, ok := x.GetDeclarationResponse().(*DeclarationResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDeclarationResponse_DeclarationResponse interface {
	isDeclarationResponse_DeclarationResponse()
}

type DeclarationResponse_Result_ struct {
	Result *DeclarationResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type DeclarationResponse_PartialResult_ struct {
	PartialResult *DeclarationResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type DeclarationResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DeclarationResponse_Result_) isDeclarationResponse_DeclarationResponse() {}

func (*DeclarationResponse_PartialResult_) isDeclarationResponse_DeclarationResponse() {}

func (*DeclarationResponse_Error) isDeclarationResponse_DeclarationResponse() {}

// DefinitionResponse represents a Definition response.
type DefinitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DefinitionResponse:
	//	*DefinitionResponse_Result_
	//	*DefinitionResponse_PartialResult_
	//	*DefinitionResponse_Error
	DefinitionResponse isDefinitionResponse_DefinitionResponse `protobuf_oneof:"definition_response"`
}

func (x *DefinitionResponse) Reset() {
	*x = DefinitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionResponse) ProtoMessage() {}

func (x *DefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionResponse.ProtoReflect.Descriptor instead.
func (*DefinitionResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{25}
}

func (m *DefinitionResponse) GetDefinitionResponse() isDefinitionResponse_DefinitionResponse {
	if m != nil {
		return m.DefinitionResponse
	}
	return nil
}

func (x *DefinitionResponse) GetResult() *DefinitionResponse_Result {
	if x, ok := x.GetDefinitionResponse().(*DefinitionResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *DefinitionResponse) GetPartialResult() *DefinitionResponse_PartialResult {
	if x, ok := x.GetDefinitionResponse().(*DefinitionResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *DefinitionResponse) GetError() *protocol.Error {
	if x, ok := x.GetDefinitionResponse().(*DefinitionResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDefinitionResponse_DefinitionResponse interface {
	isDefinitionResponse_DefinitionResponse()
}

type DefinitionResponse_Result_ struct {
	Result *DefinitionResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type DefinitionResponse_PartialResult_ struct {
	PartialResult *DefinitionResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type DefinitionResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DefinitionResponse_Result_) isDefinitionResponse_DefinitionResponse() {}

func (*DefinitionResponse_PartialResult_) isDefinitionResponse_DefinitionResponse() {}

func (*DefinitionResponse_Error) isDefinitionResponse_DefinitionResponse() {}

// TypeDefinitionResponse represents a TypeDefinition response.
type TypeDefinitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TypeDefinitionResponse:
	//	*TypeDefinitionResponse_Result_
	//	*TypeDefinitionResponse_PartialResult_
	//	*TypeDefinitionResponse_Error
	TypeDefinitionResponse isTypeDefinitionResponse_TypeDefinitionResponse `protobuf_oneof:"type_definition_response"`
}

func (x *TypeDefinitionResponse) Reset() {
	*x = TypeDefinitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDefinitionResponse) ProtoMessage() {}

func (x *TypeDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDefinitionResponse.ProtoReflect.Descriptor instead.
func (*TypeDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{26}
}

func (m *TypeDefinitionResponse) GetTypeDefinitionResponse() isTypeDefinitionResponse_TypeDefinitionResponse {
	if m != nil {
		return m.TypeDefinitionResponse
	}
	return nil
}

func (x *TypeDefinitionResponse) GetResult() *TypeDefinitionResponse_Result {
	if x, ok := x.GetTypeDefinitionResponse().(*TypeDefinitionResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *TypeDefinitionResponse) GetPartialResult() *TypeDefinitionResponse_PartialResult {
	if x, ok := x.GetTypeDefinitionResponse().(*TypeDefinitionResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *TypeDefinitionResponse) GetError() *protocol.Error {
	if x, ok := x.GetTypeDefinitionResponse().(*TypeDefinitionResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isTypeDefinitionResponse_TypeDefinitionResponse interface {
	isTypeDefinitionResponse_TypeDefinitionResponse()
}

type TypeDefinitionResponse_Result_ struct {
	Result *TypeDefinitionResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type TypeDefinitionResponse_PartialResult_ struct {
	PartialResult *TypeDefinitionResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type TypeDefinitionResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*TypeDefinitionResponse_Result_) isTypeDefinitionResponse_TypeDefinitionResponse() {}

func (*TypeDefinitionResponse_PartialResult_) isTypeDefinitionResponse_TypeDefinitionResponse() {}

func (*TypeDefinitionResponse_Error) isTypeDefinitionResponse_TypeDefinitionResponse() {}

// ImplementationResponse represents a Implementation response.
type ImplementationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ImplementationResponse:
	//	*ImplementationResponse_Result_
	//	*ImplementationResponse_PartialResult_
	//	*ImplementationResponse_Error
	ImplementationResponse isImplementationResponse_ImplementationResponse `protobuf_oneof:"implementation_response"`
}

func (x *ImplementationResponse) Reset() {
	*x = ImplementationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationResponse) ProtoMessage() {}

func (x *ImplementationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationResponse.ProtoReflect.Descriptor instead.
func (*ImplementationResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{27}
}

func (m *ImplementationResponse) GetImplementationResponse() isImplementationResponse_ImplementationResponse {
	if m != nil {
		return m.ImplementationResponse
	}
	return nil
}

func (x *ImplementationResponse) GetResult() *ImplementationResponse_Result {
	if x, ok := x.GetImplementationResponse().(*ImplementationResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *ImplementationResponse) GetPartialResult() *ImplementationResponse_PartialResult {
	if x, ok := x.GetImplementationResponse().(*ImplementationResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *ImplementationResponse) GetError() *protocol.Error {
	if x, ok := x.GetImplementationResponse().(*ImplementationResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isImplementationResponse_ImplementationResponse interface {
	isImplementationResponse_ImplementationResponse()
}

type ImplementationResponse_Result_ struct {
	Result *ImplementationResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type ImplementationResponse_PartialResult_ struct {
	PartialResult *ImplementationResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type ImplementationResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*ImplementationResponse_Result_) isImplementationResponse_ImplementationResponse() {}

func (*ImplementationResponse_PartialResult_) isImplementationResponse_ImplementationResponse() {}

func (*ImplementationResponse_Error) isImplementationResponse_ImplementationResponse() {}

// ReferenceResponse represents a Reference response.
type ReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReferenceResponse:
	//	*ReferenceResponse_Result_
	//	*ReferenceResponse_PartialResult_
	//	*ReferenceResponse_Error
	ReferenceResponse isReferenceResponse_ReferenceResponse `protobuf_oneof:"reference_response"`
}

func (x *ReferenceResponse) Reset() {
	*x = ReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceResponse) ProtoMessage() {}

func (x *ReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceResponse.ProtoReflect.Descriptor instead.
func (*ReferenceResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{28}
}

func (m *ReferenceResponse) GetReferenceResponse() isReferenceResponse_ReferenceResponse {
	if m != nil {
		return m.ReferenceResponse
	}
	return nil
}

func (x *ReferenceResponse) GetResult() *ReferenceResponse_Result {
	if x, ok := x.GetReferenceResponse().(*ReferenceResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *ReferenceResponse) GetPartialResult() *ReferenceResponse_PartialResult {
	if x, ok := x.GetReferenceResponse().(*ReferenceResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *ReferenceResponse) GetError() *protocol.Error {
	if x, ok := x.GetReferenceResponse().(*ReferenceResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isReferenceResponse_ReferenceResponse interface {
	isReferenceResponse_ReferenceResponse()
}

type ReferenceResponse_Result_ struct {
	Result *ReferenceResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type ReferenceResponse_PartialResult_ struct {
	PartialResult *ReferenceResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type ReferenceResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*ReferenceResponse_Result_) isReferenceResponse_ReferenceResponse() {}

func (*ReferenceResponse_PartialResult_) isReferenceResponse_ReferenceResponse() {}

func (*ReferenceResponse_Error) isReferenceResponse_ReferenceResponse() {}

// DocumentHighlightsResponse represents a DocumentHighlights response.
type DocumentHighlightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DocumentHighlightsResponse:
	//	*DocumentHighlightsResponse_Result_
	//	*DocumentHighlightsResponse_PartialResult_
	//	*DocumentHighlightsResponse_Error
	DocumentHighlightsResponse isDocumentHighlightsResponse_DocumentHighlightsResponse `protobuf_oneof:"document_highlights_response"`
}

func (x *DocumentHighlightsResponse) Reset() {
	*x = DocumentHighlightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentHighlightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentHighlightsResponse) ProtoMessage() {}

func (x *DocumentHighlightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentHighlightsResponse.ProtoReflect.Descriptor instead.
func (*DocumentHighlightsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{29}
}

func (m *DocumentHighlightsResponse) GetDocumentHighlightsResponse() isDocumentHighlightsResponse_DocumentHighlightsResponse {
	if m != nil {
		return m.DocumentHighlightsResponse
	}
	return nil
}

func (x *DocumentHighlightsResponse) GetResult() *DocumentHighlightsResponse_Result {
	if x, ok := x.GetDocumentHighlightsResponse().(*DocumentHighlightsResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *DocumentHighlightsResponse) GetPartialResult() *DocumentHighlightsResponse_PartialResult {
	if x, ok := x.GetDocumentHighlightsResponse().(*DocumentHighlightsResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *DocumentHighlightsResponse) GetError() *protocol.Error {
	if x, ok := x.GetDocumentHighlightsResponse().(*DocumentHighlightsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDocumentHighlightsResponse_DocumentHighlightsResponse interface {
	isDocumentHighlightsResponse_DocumentHighlightsResponse()
}

type DocumentHighlightsResponse_Result_ struct {
	Result *DocumentHighlightsResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type DocumentHighlightsResponse_PartialResult_ struct {
	PartialResult *DocumentHighlightsResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type DocumentHighlightsResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DocumentHighlightsResponse_Result_) isDocumentHighlightsResponse_DocumentHighlightsResponse() {
}

func (*DocumentHighlightsResponse_PartialResult_) isDocumentHighlightsResponse_DocumentHighlightsResponse() {
}

func (*DocumentHighlightsResponse_Error) isDocumentHighlightsResponse_DocumentHighlightsResponse() {}

// DocumentSymbolResponse represents a DocumentSymbol response.
type DocumentSymbolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DocumentSymbolResponse:
	//	*DocumentSymbolResponse_Result_
	//	*DocumentSymbolResponse_PartialResult_
	//	*DocumentSymbolResponse_Error
	DocumentSymbolResponse isDocumentSymbolResponse_DocumentSymbolResponse `protobuf_oneof:"document_symbol_response"`
}

func (x *DocumentSymbolResponse) Reset() {
	*x = DocumentSymbolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbolResponse) ProtoMessage() {}

func (x *DocumentSymbolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbolResponse.ProtoReflect.Descriptor instead.
func (*DocumentSymbolResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{30}
}

func (m *DocumentSymbolResponse) GetDocumentSymbolResponse() isDocumentSymbolResponse_DocumentSymbolResponse {
	if m != nil {
		return m.DocumentSymbolResponse
	}
	return nil
}

func (x *DocumentSymbolResponse) GetResult() *DocumentSymbolResponse_Result {
	if x, ok := x.GetDocumentSymbolResponse().(*DocumentSymbolResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *DocumentSymbolResponse) GetPartialResult() *DocumentSymbolResponse_PartialResult {
	if x, ok := x.GetDocumentSymbolResponse().(*DocumentSymbolResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *DocumentSymbolResponse) GetError() *protocol.Error {
	if x, ok := x.GetDocumentSymbolResponse().(*DocumentSymbolResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDocumentSymbolResponse_DocumentSymbolResponse interface {
	isDocumentSymbolResponse_DocumentSymbolResponse()
}

type DocumentSymbolResponse_Result_ struct {
	Result *DocumentSymbolResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type DocumentSymbolResponse_PartialResult_ struct {
	PartialResult *DocumentSymbolResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type DocumentSymbolResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DocumentSymbolResponse_Result_) isDocumentSymbolResponse_DocumentSymbolResponse() {}

func (*DocumentSymbolResponse_PartialResult_) isDocumentSymbolResponse_DocumentSymbolResponse() {}

func (*DocumentSymbolResponse_Error) isDocumentSymbolResponse_DocumentSymbolResponse() {}

// CodeActionResponse represents a CodeAction response.
type CodeActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CodeActionResponse:
	//	*CodeActionResponse_Result_
	//	*CodeActionResponse_PartialResult_
	//	*CodeActionResponse_Error
	CodeActionResponse isCodeActionResponse_CodeActionResponse `protobuf_oneof:"code_action_response"`
}

func (x *CodeActionResponse) Reset() {
	*x = CodeActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeActionResponse) ProtoMessage() {}

func (x *CodeActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeActionResponse.ProtoReflect.Descriptor instead.
func (*CodeActionResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{31}
}

func (m *CodeActionResponse) GetCodeActionResponse() isCodeActionResponse_CodeActionResponse {
	if m != nil {
		return m.CodeActionResponse
	}
	return nil
}

func (x *CodeActionResponse) GetResult() *CodeActionResponse_Result {
	if x, ok := x.GetCodeActionResponse().(*CodeActionResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *CodeActionResponse) GetPartialResult() *CodeActionResponse_PartialResult {
	if x, ok := x.GetCodeActionResponse().(*CodeActionResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *CodeActionResponse) GetError() *protocol.Error {
	if x, ok := x.GetCodeActionResponse().(*CodeActionResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isCodeActionResponse_CodeActionResponse interface {
	isCodeActionResponse_CodeActionResponse()
}

type CodeActionResponse_Result_ struct {
	Result *CodeActionResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type CodeActionResponse_PartialResult_ struct {
	PartialResult *CodeActionResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type CodeActionResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*CodeActionResponse_Result_) isCodeActionResponse_CodeActionResponse() {}

func (*CodeActionResponse_PartialResult_) isCodeActionResponse_CodeActionResponse() {}

func (*CodeActionResponse_Error) isCodeActionResponse_CodeActionResponse() {}

// CodeLensResponse represents a CodeLens response.
type CodeLensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CodeLensResponse:
	//	*CodeLensResponse_Result_
	//	*CodeLensResponse_PartialResult_
	//	*CodeLensResponse_Error
	CodeLensResponse isCodeLensResponse_CodeLensResponse `protobuf_oneof:"code_lens_response"`
}

func (x *CodeLensResponse) Reset() {
	*x = CodeLensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLensResponse) ProtoMessage() {}

func (x *CodeLensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLensResponse.ProtoReflect.Descriptor instead.
func (*CodeLensResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{32}
}

func (m *CodeLensResponse) GetCodeLensResponse() isCodeLensResponse_CodeLensResponse {
	if m != nil {
		return m.CodeLensResponse
	}
	return nil
}

func (x *CodeLensResponse) GetResult() *CodeLensResponse_Result {
	if x, ok := x.GetCodeLensResponse().(*CodeLensResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *CodeLensResponse) GetPartialResult() *CodeLensResponse_PartialResult {
	if x, ok := x.GetCodeLensResponse().(*CodeLensResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *CodeLensResponse) GetError() *protocol.Error {
	if x, ok := x.GetCodeLensResponse().(*CodeLensResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isCodeLensResponse_CodeLensResponse interface {
	isCodeLensResponse_CodeLensResponse()
}

type CodeLensResponse_Result_ struct {
	Result *CodeLensResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type CodeLensResponse_PartialResult_ struct {
	PartialResult *CodeLensResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type CodeLensResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*CodeLensResponse_Result_) isCodeLensResponse_CodeLensResponse() {}

func (*CodeLensResponse_PartialResult_) isCodeLensResponse_CodeLensResponse() {}

func (*CodeLensResponse_Error) isCodeLensResponse_CodeLensResponse() {}

// CodeLensResolveRequest represents a CodeLensResolveRequest request.
type CodeLensResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeLens *CodeLens `protobuf:"bytes,1,opt,name=code_lens,json=codeLens,proto3" json:"code_lens,omitempty"`
}

func (x *CodeLensResolveRequest) Reset() {
	*x = CodeLensResolveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLensResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLensResolveRequest) ProtoMessage() {}

func (x *CodeLensResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLensResolveRequest.ProtoReflect.Descriptor instead.
func (*CodeLensResolveRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{33}
}

func (x *CodeLensResolveRequest) GetCodeLens() *CodeLens {
	if x != nil {
		return x.CodeLens
	}
	return nil
}

// CodeLensResolveResponse represents a CodeLensResolve response.
type CodeLensResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CodeLensResolveResponse:
	//	*CodeLensResolveResponse_CodeLens
	//	*CodeLensResolveResponse_Error
	CodeLensResolveResponse isCodeLensResolveResponse_CodeLensResolveResponse `protobuf_oneof:"code_lens_resolve_response"`
}

func (x *CodeLensResolveResponse) Reset() {
	*x = CodeLensResolveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLensResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLensResolveResponse) ProtoMessage() {}

func (x *CodeLensResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLensResolveResponse.ProtoReflect.Descriptor instead.
func (*CodeLensResolveResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{34}
}

func (m *CodeLensResolveResponse) GetCodeLensResolveResponse() isCodeLensResolveResponse_CodeLensResolveResponse {
	if m != nil {
		return m.CodeLensResolveResponse
	}
	return nil
}

func (x *CodeLensResolveResponse) GetCodeLens() *CodeLens {
	if x, ok := x.GetCodeLensResolveResponse().(*CodeLensResolveResponse_CodeLens); ok {
		return x.CodeLens
	}
	return nil
}

func (x *CodeLensResolveResponse) GetError() *protocol.Error {
	if x, ok := x.GetCodeLensResolveResponse().(*CodeLensResolveResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isCodeLensResolveResponse_CodeLensResolveResponse interface {
	isCodeLensResolveResponse_CodeLensResolveResponse()
}

type CodeLensResolveResponse_CodeLens struct {
	CodeLens *CodeLens `protobuf:"bytes,1,opt,name=code_lens,json=codeLens,proto3,oneof"`
}

type CodeLensResolveResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*CodeLensResolveResponse_CodeLens) isCodeLensResolveResponse_CodeLensResolveResponse() {}

func (*CodeLensResolveResponse_Error) isCodeLensResolveResponse_CodeLensResolveResponse() {}

// DocumentLinkResponse represents a DocumentLink response.
type DocumentLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DocumentLinkResponse:
	//	*DocumentLinkResponse_Result_
	//	*DocumentLinkResponse_PartialResult_
	//	*DocumentLinkResponse_Error
	DocumentLinkResponse isDocumentLinkResponse_DocumentLinkResponse `protobuf_oneof:"document_link_response"`
}

func (x *DocumentLinkResponse) Reset() {
	*x = DocumentLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLinkResponse) ProtoMessage() {}

func (x *DocumentLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLinkResponse.ProtoReflect.Descriptor instead.
func (*DocumentLinkResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{35}
}

func (m *DocumentLinkResponse) GetDocumentLinkResponse() isDocumentLinkResponse_DocumentLinkResponse {
	if m != nil {
		return m.DocumentLinkResponse
	}
	return nil
}

func (x *DocumentLinkResponse) GetResult() *DocumentLinkResponse_Result {
	if x, ok := x.GetDocumentLinkResponse().(*DocumentLinkResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *DocumentLinkResponse) GetPartialResult() *DocumentLinkResponse_PartialResult {
	if x, ok := x.GetDocumentLinkResponse().(*DocumentLinkResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *DocumentLinkResponse) GetError() *protocol.Error {
	if x, ok := x.GetDocumentLinkResponse().(*DocumentLinkResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDocumentLinkResponse_DocumentLinkResponse interface {
	isDocumentLinkResponse_DocumentLinkResponse()
}

type DocumentLinkResponse_Result_ struct {
	Result *DocumentLinkResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type DocumentLinkResponse_PartialResult_ struct {
	PartialResult *DocumentLinkResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type DocumentLinkResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DocumentLinkResponse_Result_) isDocumentLinkResponse_DocumentLinkResponse() {}

func (*DocumentLinkResponse_PartialResult_) isDocumentLinkResponse_DocumentLinkResponse() {}

func (*DocumentLinkResponse_Error) isDocumentLinkResponse_DocumentLinkResponse() {}

// DocumentLinkResolveRequest represents a DocumentLinkResolveRequest request.
type DocumentLinkResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentLink *DocumentLink `protobuf:"bytes,1,opt,name=document_link,json=documentLink,proto3" json:"document_link,omitempty"`
}

func (x *DocumentLinkResolveRequest) Reset() {
	*x = DocumentLinkResolveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLinkResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLinkResolveRequest) ProtoMessage() {}

func (x *DocumentLinkResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLinkResolveRequest.ProtoReflect.Descriptor instead.
func (*DocumentLinkResolveRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{36}
}

func (x *DocumentLinkResolveRequest) GetDocumentLink() *DocumentLink {
	if x != nil {
		return x.DocumentLink
	}
	return nil
}

// DocumentLinkResolveResponse represents a DocumentLinkResolve response.
type DocumentLinkResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DocumentLinkResolveResponse:
	//	*DocumentLinkResolveResponse_DocumentLink
	//	*DocumentLinkResolveResponse_Error
	DocumentLinkResolveResponse isDocumentLinkResolveResponse_DocumentLinkResolveResponse `protobuf_oneof:"document_link_resolve_response"`
}

func (x *DocumentLinkResolveResponse) Reset() {
	*x = DocumentLinkResolveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLinkResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLinkResolveResponse) ProtoMessage() {}

func (x *DocumentLinkResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLinkResolveResponse.ProtoReflect.Descriptor instead.
func (*DocumentLinkResolveResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{37}
}

func (m *DocumentLinkResolveResponse) GetDocumentLinkResolveResponse() isDocumentLinkResolveResponse_DocumentLinkResolveResponse {
	if m != nil {
		return m.DocumentLinkResolveResponse
	}
	return nil
}

func (x *DocumentLinkResolveResponse) GetDocumentLink() *DocumentLink {
	if x, ok := x.GetDocumentLinkResolveResponse().(*DocumentLinkResolveResponse_DocumentLink); ok {
		return x.DocumentLink
	}
	return nil
}

func (x *DocumentLinkResolveResponse) GetError() *protocol.Error {
	if x, ok := x.GetDocumentLinkResolveResponse().(*DocumentLinkResolveResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDocumentLinkResolveResponse_DocumentLinkResolveResponse interface {
	isDocumentLinkResolveResponse_DocumentLinkResolveResponse()
}

type DocumentLinkResolveResponse_DocumentLink struct {
	DocumentLink *DocumentLink `protobuf:"bytes,1,opt,name=document_link,json=documentLink,proto3,oneof"`
}

type DocumentLinkResolveResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DocumentLinkResolveResponse_DocumentLink) isDocumentLinkResolveResponse_DocumentLinkResolveResponse() {
}

func (*DocumentLinkResolveResponse_Error) isDocumentLinkResolveResponse_DocumentLinkResolveResponse() {
}

// DocumentColorResponse represents a DocumentColor response.
type DocumentColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DocumentColorResponse:
	//	*DocumentColorResponse_Result_
	//	*DocumentColorResponse_PartialResult_
	//	*DocumentColorResponse_Error
	DocumentColorResponse isDocumentColorResponse_DocumentColorResponse `protobuf_oneof:"document_color_response"`
}

func (x *DocumentColorResponse) Reset() {
	*x = DocumentColorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentColorResponse) ProtoMessage() {}

func (x *DocumentColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentColorResponse.ProtoReflect.Descriptor instead.
func (*DocumentColorResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{38}
}

func (m *DocumentColorResponse) GetDocumentColorResponse() isDocumentColorResponse_DocumentColorResponse {
	if m != nil {
		return m.DocumentColorResponse
	}
	return nil
}

func (x *DocumentColorResponse) GetResult() *DocumentColorResponse_Result {
	if x, ok := x.GetDocumentColorResponse().(*DocumentColorResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *DocumentColorResponse) GetPartialResult() *DocumentColorResponse_PartialResult {
	if x, ok := x.GetDocumentColorResponse().(*DocumentColorResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *DocumentColorResponse) GetError() *protocol.Error {
	if x, ok := x.GetDocumentColorResponse().(*DocumentColorResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDocumentColorResponse_DocumentColorResponse interface {
	isDocumentColorResponse_DocumentColorResponse()
}

type DocumentColorResponse_Result_ struct {
	Result *DocumentColorResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type DocumentColorResponse_PartialResult_ struct {
	PartialResult *DocumentColorResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type DocumentColorResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DocumentColorResponse_Result_) isDocumentColorResponse_DocumentColorResponse() {}

func (*DocumentColorResponse_PartialResult_) isDocumentColorResponse_DocumentColorResponse() {}

func (*DocumentColorResponse_Error) isDocumentColorResponse_DocumentColorResponse() {}

// ColorPresentationResponse represents a ColorPresentation response.
type ColorPresentationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ColorPresentationResponse:
	//	*ColorPresentationResponse_Result_
	//	*ColorPresentationResponse_PartialResult_
	//	*ColorPresentationResponse_Error
	ColorPresentationResponse isColorPresentationResponse_ColorPresentationResponse `protobuf_oneof:"color_presentation_response"`
}

func (x *ColorPresentationResponse) Reset() {
	*x = ColorPresentationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorPresentationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorPresentationResponse) ProtoMessage() {}

func (x *ColorPresentationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorPresentationResponse.ProtoReflect.Descriptor instead.
func (*ColorPresentationResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{39}
}

func (m *ColorPresentationResponse) GetColorPresentationResponse() isColorPresentationResponse_ColorPresentationResponse {
	if m != nil {
		return m.ColorPresentationResponse
	}
	return nil
}

func (x *ColorPresentationResponse) GetResult() *ColorPresentationResponse_Result {
	if x, ok := x.GetColorPresentationResponse().(*ColorPresentationResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *ColorPresentationResponse) GetPartialResult() *ColorPresentationResponse_PartialResult {
	if x, ok := x.GetColorPresentationResponse().(*ColorPresentationResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *ColorPresentationResponse) GetError() *protocol.Error {
	if x, ok := x.GetColorPresentationResponse().(*ColorPresentationResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isColorPresentationResponse_ColorPresentationResponse interface {
	isColorPresentationResponse_ColorPresentationResponse()
}

type ColorPresentationResponse_Result_ struct {
	Result *ColorPresentationResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type ColorPresentationResponse_PartialResult_ struct {
	PartialResult *ColorPresentationResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type ColorPresentationResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*ColorPresentationResponse_Result_) isColorPresentationResponse_ColorPresentationResponse() {}

func (*ColorPresentationResponse_PartialResult_) isColorPresentationResponse_ColorPresentationResponse() {
}

func (*ColorPresentationResponse_Error) isColorPresentationResponse_ColorPresentationResponse() {}

// DocumentFormattingResponse represents a DocumentFormatting response.
type DocumentFormattingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DocumentFormattingResponse:
	//	*DocumentFormattingResponse_TextEdit
	//	*DocumentFormattingResponse_Empty
	//	*DocumentFormattingResponse_Error
	DocumentFormattingResponse isDocumentFormattingResponse_DocumentFormattingResponse `protobuf_oneof:"document_formatting_response"`
}

func (x *DocumentFormattingResponse) Reset() {
	*x = DocumentFormattingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentFormattingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentFormattingResponse) ProtoMessage() {}

func (x *DocumentFormattingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentFormattingResponse.ProtoReflect.Descriptor instead.
func (*DocumentFormattingResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{40}
}

func (m *DocumentFormattingResponse) GetDocumentFormattingResponse() isDocumentFormattingResponse_DocumentFormattingResponse {
	if m != nil {
		return m.DocumentFormattingResponse
	}
	return nil
}

func (x *DocumentFormattingResponse) GetTextEdit() *protocol.TextEdit {
	if x, ok := x.GetDocumentFormattingResponse().(*DocumentFormattingResponse_TextEdit); ok {
		return x.TextEdit
	}
	return nil
}

func (x *DocumentFormattingResponse) GetEmpty() structpb.NullValue {
	if x, ok := x.GetDocumentFormattingResponse().(*DocumentFormattingResponse_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (x *DocumentFormattingResponse) GetError() *protocol.Error {
	if x, ok := x.GetDocumentFormattingResponse().(*DocumentFormattingResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDocumentFormattingResponse_DocumentFormattingResponse interface {
	isDocumentFormattingResponse_DocumentFormattingResponse()
}

type DocumentFormattingResponse_TextEdit struct {
	TextEdit *protocol.TextEdit `protobuf:"bytes,1,opt,name=text_edit,json=textEdit,proto3,oneof"`
}

type DocumentFormattingResponse_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

type DocumentFormattingResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DocumentFormattingResponse_TextEdit) isDocumentFormattingResponse_DocumentFormattingResponse() {
}

func (*DocumentFormattingResponse_Empty) isDocumentFormattingResponse_DocumentFormattingResponse() {}

func (*DocumentFormattingResponse_Error) isDocumentFormattingResponse_DocumentFormattingResponse() {}

// DocumentRangeFormattingResponse represents a DocumentRangeFormatting response.
type DocumentRangeFormattingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DocumentrangeFormattingResponse:
	//	*DocumentRangeFormattingResponse_TextEdit
	//	*DocumentRangeFormattingResponse_Empty
	//	*DocumentRangeFormattingResponse_Error
	DocumentrangeFormattingResponse isDocumentRangeFormattingResponse_DocumentrangeFormattingResponse `protobuf_oneof:"documentrange_formatting_response"`
}

func (x *DocumentRangeFormattingResponse) Reset() {
	*x = DocumentRangeFormattingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentRangeFormattingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRangeFormattingResponse) ProtoMessage() {}

func (x *DocumentRangeFormattingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRangeFormattingResponse.ProtoReflect.Descriptor instead.
func (*DocumentRangeFormattingResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{41}
}

func (m *DocumentRangeFormattingResponse) GetDocumentrangeFormattingResponse() isDocumentRangeFormattingResponse_DocumentrangeFormattingResponse {
	if m != nil {
		return m.DocumentrangeFormattingResponse
	}
	return nil
}

func (x *DocumentRangeFormattingResponse) GetTextEdit() *protocol.TextEdit {
	if x, ok := x.GetDocumentrangeFormattingResponse().(*DocumentRangeFormattingResponse_TextEdit); ok {
		return x.TextEdit
	}
	return nil
}

func (x *DocumentRangeFormattingResponse) GetEmpty() structpb.NullValue {
	if x, ok := x.GetDocumentrangeFormattingResponse().(*DocumentRangeFormattingResponse_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (x *DocumentRangeFormattingResponse) GetError() *protocol.Error {
	if x, ok := x.GetDocumentrangeFormattingResponse().(*DocumentRangeFormattingResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDocumentRangeFormattingResponse_DocumentrangeFormattingResponse interface {
	isDocumentRangeFormattingResponse_DocumentrangeFormattingResponse()
}

type DocumentRangeFormattingResponse_TextEdit struct {
	TextEdit *protocol.TextEdit `protobuf:"bytes,1,opt,name=text_edit,json=textEdit,proto3,oneof"`
}

type DocumentRangeFormattingResponse_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

type DocumentRangeFormattingResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DocumentRangeFormattingResponse_TextEdit) isDocumentRangeFormattingResponse_DocumentrangeFormattingResponse() {
}

func (*DocumentRangeFormattingResponse_Empty) isDocumentRangeFormattingResponse_DocumentrangeFormattingResponse() {
}

func (*DocumentRangeFormattingResponse_Error) isDocumentRangeFormattingResponse_DocumentrangeFormattingResponse() {
}

// DocumentOnTypeFormattingResponse represents a OnTypeFormatting response.
type DocumentOnTypeFormattingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DocumentOnTypeFormattingResponse:
	//	*DocumentOnTypeFormattingResponse_TextEdit
	//	*DocumentOnTypeFormattingResponse_Empty
	//	*DocumentOnTypeFormattingResponse_Error
	DocumentOnTypeFormattingResponse isDocumentOnTypeFormattingResponse_DocumentOnTypeFormattingResponse `protobuf_oneof:"document_on_type_formatting_response"`
}

func (x *DocumentOnTypeFormattingResponse) Reset() {
	*x = DocumentOnTypeFormattingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentOnTypeFormattingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentOnTypeFormattingResponse) ProtoMessage() {}

func (x *DocumentOnTypeFormattingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentOnTypeFormattingResponse.ProtoReflect.Descriptor instead.
func (*DocumentOnTypeFormattingResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{42}
}

func (m *DocumentOnTypeFormattingResponse) GetDocumentOnTypeFormattingResponse() isDocumentOnTypeFormattingResponse_DocumentOnTypeFormattingResponse {
	if m != nil {
		return m.DocumentOnTypeFormattingResponse
	}
	return nil
}

func (x *DocumentOnTypeFormattingResponse) GetTextEdit() *protocol.TextEdit {
	if x, ok := x.GetDocumentOnTypeFormattingResponse().(*DocumentOnTypeFormattingResponse_TextEdit); ok {
		return x.TextEdit
	}
	return nil
}

func (x *DocumentOnTypeFormattingResponse) GetEmpty() structpb.NullValue {
	if x, ok := x.GetDocumentOnTypeFormattingResponse().(*DocumentOnTypeFormattingResponse_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (x *DocumentOnTypeFormattingResponse) GetError() *protocol.Error {
	if x, ok := x.GetDocumentOnTypeFormattingResponse().(*DocumentOnTypeFormattingResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isDocumentOnTypeFormattingResponse_DocumentOnTypeFormattingResponse interface {
	isDocumentOnTypeFormattingResponse_DocumentOnTypeFormattingResponse()
}

type DocumentOnTypeFormattingResponse_TextEdit struct {
	TextEdit *protocol.TextEdit `protobuf:"bytes,1,opt,name=text_edit,json=textEdit,proto3,oneof"`
}

type DocumentOnTypeFormattingResponse_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

type DocumentOnTypeFormattingResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*DocumentOnTypeFormattingResponse_TextEdit) isDocumentOnTypeFormattingResponse_DocumentOnTypeFormattingResponse() {
}

func (*DocumentOnTypeFormattingResponse_Empty) isDocumentOnTypeFormattingResponse_DocumentOnTypeFormattingResponse() {
}

func (*DocumentOnTypeFormattingResponse_Error) isDocumentOnTypeFormattingResponse_DocumentOnTypeFormattingResponse() {
}

// RenameResponse represents a Rename response.
type RenameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RenameResponse:
	//	*RenameResponse_WorkspaceEdit
	//	*RenameResponse_Empty
	//	*RenameResponse_Error
	RenameResponse isRenameResponse_RenameResponse `protobuf_oneof:"rename_response"`
}

func (x *RenameResponse) Reset() {
	*x = RenameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameResponse) ProtoMessage() {}

func (x *RenameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameResponse.ProtoReflect.Descriptor instead.
func (*RenameResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{43}
}

func (m *RenameResponse) GetRenameResponse() isRenameResponse_RenameResponse {
	if m != nil {
		return m.RenameResponse
	}
	return nil
}

func (x *RenameResponse) GetWorkspaceEdit() *protocol.WorkspaceEdit {
	if x, ok := x.GetRenameResponse().(*RenameResponse_WorkspaceEdit); ok {
		return x.WorkspaceEdit
	}
	return nil
}

func (x *RenameResponse) GetEmpty() structpb.NullValue {
	if x, ok := x.GetRenameResponse().(*RenameResponse_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (x *RenameResponse) GetError() *protocol.Error {
	if x, ok := x.GetRenameResponse().(*RenameResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isRenameResponse_RenameResponse interface {
	isRenameResponse_RenameResponse()
}

type RenameResponse_WorkspaceEdit struct {
	WorkspaceEdit *protocol.WorkspaceEdit `protobuf:"bytes,1,opt,name=workspace_edit,json=workspaceEdit,proto3,oneof"`
}

type RenameResponse_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

type RenameResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*RenameResponse_WorkspaceEdit) isRenameResponse_RenameResponse() {}

func (*RenameResponse_Empty) isRenameResponse_RenameResponse() {}

func (*RenameResponse_Error) isRenameResponse_RenameResponse() {}

// PrepareRenameResponse represents a PrepareRename response.
type PrepareRenameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PrepareRenameResponse:
	//	*PrepareRenameResponse_Range
	//	*PrepareRenameResponse_Result_
	//	*PrepareRenameResponse_Empty
	//	*PrepareRenameResponse_Error
	PrepareRenameResponse isPrepareRenameResponse_PrepareRenameResponse `protobuf_oneof:"prepare_rename_response"`
}

func (x *PrepareRenameResponse) Reset() {
	*x = PrepareRenameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareRenameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRenameResponse) ProtoMessage() {}

func (x *PrepareRenameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRenameResponse.ProtoReflect.Descriptor instead.
func (*PrepareRenameResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{44}
}

func (m *PrepareRenameResponse) GetPrepareRenameResponse() isPrepareRenameResponse_PrepareRenameResponse {
	if m != nil {
		return m.PrepareRenameResponse
	}
	return nil
}

func (x *PrepareRenameResponse) GetRange() *protocol.Range {
	if x, ok := x.GetPrepareRenameResponse().(*PrepareRenameResponse_Range); ok {
		return x.Range
	}
	return nil
}

func (x *PrepareRenameResponse) GetResult() *PrepareRenameResponse_Result {
	if x, ok := x.GetPrepareRenameResponse().(*PrepareRenameResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *PrepareRenameResponse) GetEmpty() structpb.NullValue {
	if x, ok := x.GetPrepareRenameResponse().(*PrepareRenameResponse_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (x *PrepareRenameResponse) GetError() *protocol.Error {
	if x, ok := x.GetPrepareRenameResponse().(*PrepareRenameResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isPrepareRenameResponse_PrepareRenameResponse interface {
	isPrepareRenameResponse_PrepareRenameResponse()
}

type PrepareRenameResponse_Range struct {
	Range *protocol.Range `protobuf:"bytes,1,opt,name=range,proto3,oneof"`
}

type PrepareRenameResponse_Result_ struct {
	Result *PrepareRenameResponse_Result `protobuf:"bytes,2,opt,name=result,proto3,oneof"`
}

type PrepareRenameResponse_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,3,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

type PrepareRenameResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

func (*PrepareRenameResponse_Range) isPrepareRenameResponse_PrepareRenameResponse() {}

func (*PrepareRenameResponse_Result_) isPrepareRenameResponse_PrepareRenameResponse() {}

func (*PrepareRenameResponse_Empty) isPrepareRenameResponse_PrepareRenameResponse() {}

func (*PrepareRenameResponse_Error) isPrepareRenameResponse_PrepareRenameResponse() {}

// FoldingRangeResponse represents a FoldingRange response.
type FoldingRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FoldingRangeResponse:
	//	*FoldingRangeResponse_Result_
	//	*FoldingRangeResponse_PartialResult_
	//	*FoldingRangeResponse_Error
	FoldingRangeResponse isFoldingRangeResponse_FoldingRangeResponse `protobuf_oneof:"folding_range_response"`
}

func (x *FoldingRangeResponse) Reset() {
	*x = FoldingRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldingRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldingRangeResponse) ProtoMessage() {}

func (x *FoldingRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldingRangeResponse.ProtoReflect.Descriptor instead.
func (*FoldingRangeResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{45}
}

func (m *FoldingRangeResponse) GetFoldingRangeResponse() isFoldingRangeResponse_FoldingRangeResponse {
	if m != nil {
		return m.FoldingRangeResponse
	}
	return nil
}

func (x *FoldingRangeResponse) GetResult() *FoldingRangeResponse_Result {
	if x, ok := x.GetFoldingRangeResponse().(*FoldingRangeResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *FoldingRangeResponse) GetPartialResult() *FoldingRangeResponse_PartialResult {
	if x, ok := x.GetFoldingRangeResponse().(*FoldingRangeResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *FoldingRangeResponse) GetError() *protocol.Error {
	if x, ok := x.GetFoldingRangeResponse().(*FoldingRangeResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isFoldingRangeResponse_FoldingRangeResponse interface {
	isFoldingRangeResponse_FoldingRangeResponse()
}

type FoldingRangeResponse_Result_ struct {
	Result *FoldingRangeResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type FoldingRangeResponse_PartialResult_ struct {
	PartialResult *FoldingRangeResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type FoldingRangeResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*FoldingRangeResponse_Result_) isFoldingRangeResponse_FoldingRangeResponse() {}

func (*FoldingRangeResponse_PartialResult_) isFoldingRangeResponse_FoldingRangeResponse() {}

func (*FoldingRangeResponse_Error) isFoldingRangeResponse_FoldingRangeResponse() {}

// SelectionRangeResponse represents a SelectionRangeResponse response.
type SelectionRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SelectionRangeResponse:
	//	*SelectionRangeResponse_Result_
	//	*SelectionRangeResponse_PartialResult_
	//	*SelectionRangeResponse_Error
	SelectionRangeResponse isSelectionRangeResponse_SelectionRangeResponse `protobuf_oneof:"selection_range_response"`
}

func (x *SelectionRangeResponse) Reset() {
	*x = SelectionRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionRangeResponse) ProtoMessage() {}

func (x *SelectionRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionRangeResponse.ProtoReflect.Descriptor instead.
func (*SelectionRangeResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{46}
}

func (m *SelectionRangeResponse) GetSelectionRangeResponse() isSelectionRangeResponse_SelectionRangeResponse {
	if m != nil {
		return m.SelectionRangeResponse
	}
	return nil
}

func (x *SelectionRangeResponse) GetResult() *SelectionRangeResponse_Result {
	if x, ok := x.GetSelectionRangeResponse().(*SelectionRangeResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *SelectionRangeResponse) GetPartialResult() *SelectionRangeResponse_PartialResult {
	if x, ok := x.GetSelectionRangeResponse().(*SelectionRangeResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *SelectionRangeResponse) GetError() *protocol.Error {
	if x, ok := x.GetSelectionRangeResponse().(*SelectionRangeResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isSelectionRangeResponse_SelectionRangeResponse interface {
	isSelectionRangeResponse_SelectionRangeResponse()
}

type SelectionRangeResponse_Result_ struct {
	Result *SelectionRangeResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type SelectionRangeResponse_PartialResult_ struct {
	PartialResult *SelectionRangeResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type SelectionRangeResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*SelectionRangeResponse_Result_) isSelectionRangeResponse_SelectionRangeResponse() {}

func (*SelectionRangeResponse_PartialResult_) isSelectionRangeResponse_SelectionRangeResponse() {}

func (*SelectionRangeResponse_Error) isSelectionRangeResponse_SelectionRangeResponse() {}

// CallHierarchyPrepareResponse represents a PrepareCallHierarchy response.
type CallHierarchyPrepareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CallHierarchyPrepareResponse:
	//	*CallHierarchyPrepareResponse_Result_
	//	*CallHierarchyPrepareResponse_Error
	CallHierarchyPrepareResponse isCallHierarchyPrepareResponse_CallHierarchyPrepareResponse `protobuf_oneof:"call_hierarchy_prepare_response"`
}

func (x *CallHierarchyPrepareResponse) Reset() {
	*x = CallHierarchyPrepareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyPrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyPrepareResponse) ProtoMessage() {}

func (x *CallHierarchyPrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyPrepareResponse.ProtoReflect.Descriptor instead.
func (*CallHierarchyPrepareResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{47}
}

func (m *CallHierarchyPrepareResponse) GetCallHierarchyPrepareResponse() isCallHierarchyPrepareResponse_CallHierarchyPrepareResponse {
	if m != nil {
		return m.CallHierarchyPrepareResponse
	}
	return nil
}

func (x *CallHierarchyPrepareResponse) GetResult() *CallHierarchyPrepareResponse_Result {
	if x, ok := x.GetCallHierarchyPrepareResponse().(*CallHierarchyPrepareResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *CallHierarchyPrepareResponse) GetError() *protocol.Error {
	if x, ok := x.GetCallHierarchyPrepareResponse().(*CallHierarchyPrepareResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isCallHierarchyPrepareResponse_CallHierarchyPrepareResponse interface {
	isCallHierarchyPrepareResponse_CallHierarchyPrepareResponse()
}

type CallHierarchyPrepareResponse_Result_ struct {
	Result *CallHierarchyPrepareResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type CallHierarchyPrepareResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*CallHierarchyPrepareResponse_Result_) isCallHierarchyPrepareResponse_CallHierarchyPrepareResponse() {
}

func (*CallHierarchyPrepareResponse_Error) isCallHierarchyPrepareResponse_CallHierarchyPrepareResponse() {
}

// CallHierarchyIncomingCallsResponse represents a CallHierarchyIncomingCalls response.
type CallHierarchyIncomingCallsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CallHierarchyIncomingCallsResponse:
	//	*CallHierarchyIncomingCallsResponse_Result_
	//	*CallHierarchyIncomingCallsResponse_PartialResult_
	//	*CallHierarchyIncomingCallsResponse_Error
	CallHierarchyIncomingCallsResponse isCallHierarchyIncomingCallsResponse_CallHierarchyIncomingCallsResponse `protobuf_oneof:"call_hierarchy_incoming_calls_response"`
}

func (x *CallHierarchyIncomingCallsResponse) Reset() {
	*x = CallHierarchyIncomingCallsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyIncomingCallsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyIncomingCallsResponse) ProtoMessage() {}

func (x *CallHierarchyIncomingCallsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyIncomingCallsResponse.ProtoReflect.Descriptor instead.
func (*CallHierarchyIncomingCallsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{48}
}

func (m *CallHierarchyIncomingCallsResponse) GetCallHierarchyIncomingCallsResponse() isCallHierarchyIncomingCallsResponse_CallHierarchyIncomingCallsResponse {
	if m != nil {
		return m.CallHierarchyIncomingCallsResponse
	}
	return nil
}

func (x *CallHierarchyIncomingCallsResponse) GetResult() *CallHierarchyIncomingCallsResponse_Result {
	if x, ok := x.GetCallHierarchyIncomingCallsResponse().(*CallHierarchyIncomingCallsResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *CallHierarchyIncomingCallsResponse) GetPartialResult() *CallHierarchyIncomingCallsResponse_PartialResult {
	if x, ok := x.GetCallHierarchyIncomingCallsResponse().(*CallHierarchyIncomingCallsResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *CallHierarchyIncomingCallsResponse) GetError() *protocol.Error {
	if x, ok := x.GetCallHierarchyIncomingCallsResponse().(*CallHierarchyIncomingCallsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isCallHierarchyIncomingCallsResponse_CallHierarchyIncomingCallsResponse interface {
	isCallHierarchyIncomingCallsResponse_CallHierarchyIncomingCallsResponse()
}

type CallHierarchyIncomingCallsResponse_Result_ struct {
	Result *CallHierarchyIncomingCallsResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type CallHierarchyIncomingCallsResponse_PartialResult_ struct {
	PartialResult *CallHierarchyIncomingCallsResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type CallHierarchyIncomingCallsResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*CallHierarchyIncomingCallsResponse_Result_) isCallHierarchyIncomingCallsResponse_CallHierarchyIncomingCallsResponse() {
}

func (*CallHierarchyIncomingCallsResponse_PartialResult_) isCallHierarchyIncomingCallsResponse_CallHierarchyIncomingCallsResponse() {
}

func (*CallHierarchyIncomingCallsResponse_Error) isCallHierarchyIncomingCallsResponse_CallHierarchyIncomingCallsResponse() {
}

// CallHierarchyIncomingCallsResponse represents a CallHierarchyOutgoingCalls response.
type CallHierarchyOutgoingCallsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CallHierarchyOutgoingCallsResponse:
	//	*CallHierarchyOutgoingCallsResponse_Result_
	//	*CallHierarchyOutgoingCallsResponse_PartialResult_
	//	*CallHierarchyOutgoingCallsResponse_Error
	CallHierarchyOutgoingCallsResponse isCallHierarchyOutgoingCallsResponse_CallHierarchyOutgoingCallsResponse `protobuf_oneof:"call_hierarchy_outgoing_calls_response"`
}

func (x *CallHierarchyOutgoingCallsResponse) Reset() {
	*x = CallHierarchyOutgoingCallsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyOutgoingCallsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyOutgoingCallsResponse) ProtoMessage() {}

func (x *CallHierarchyOutgoingCallsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyOutgoingCallsResponse.ProtoReflect.Descriptor instead.
func (*CallHierarchyOutgoingCallsResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{49}
}

func (m *CallHierarchyOutgoingCallsResponse) GetCallHierarchyOutgoingCallsResponse() isCallHierarchyOutgoingCallsResponse_CallHierarchyOutgoingCallsResponse {
	if m != nil {
		return m.CallHierarchyOutgoingCallsResponse
	}
	return nil
}

func (x *CallHierarchyOutgoingCallsResponse) GetResult() *CallHierarchyOutgoingCallsResponse_Result {
	if x, ok := x.GetCallHierarchyOutgoingCallsResponse().(*CallHierarchyOutgoingCallsResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *CallHierarchyOutgoingCallsResponse) GetPartialResult() *CallHierarchyOutgoingCallsResponse_PartialResult {
	if x, ok := x.GetCallHierarchyOutgoingCallsResponse().(*CallHierarchyOutgoingCallsResponse_PartialResult_); ok {
		return x.PartialResult
	}
	return nil
}

func (x *CallHierarchyOutgoingCallsResponse) GetError() *protocol.Error {
	if x, ok := x.GetCallHierarchyOutgoingCallsResponse().(*CallHierarchyOutgoingCallsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isCallHierarchyOutgoingCallsResponse_CallHierarchyOutgoingCallsResponse interface {
	isCallHierarchyOutgoingCallsResponse_CallHierarchyOutgoingCallsResponse()
}

type CallHierarchyOutgoingCallsResponse_Result_ struct {
	Result *CallHierarchyOutgoingCallsResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type CallHierarchyOutgoingCallsResponse_PartialResult_ struct {
	PartialResult *CallHierarchyOutgoingCallsResponse_PartialResult `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type CallHierarchyOutgoingCallsResponse_Error struct {
	Error *protocol.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*CallHierarchyOutgoingCallsResponse_Result_) isCallHierarchyOutgoingCallsResponse_CallHierarchyOutgoingCallsResponse() {
}

func (*CallHierarchyOutgoingCallsResponse_PartialResult_) isCallHierarchyOutgoingCallsResponse_CallHierarchyOutgoingCallsResponse() {
}

func (*CallHierarchyOutgoingCallsResponse_Error) isCallHierarchyOutgoingCallsResponse_CallHierarchyOutgoingCallsResponse() {
}

// TextDocumentClientCapabilities define capabilities the editor / tool provides on text documents.
type TextDocumentClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Synchronization *TextDocumentSyncClientCapabilities `protobuf:"bytes,1,opt,name=synchronization,proto3" json:"synchronization,omitempty"`
	// Capabilities specific to the `textDocument/completion` request.
	Completion *CompletionClientCapabilities `protobuf:"bytes,2,opt,name=completion,proto3" json:"completion,omitempty"`
	// Capabilities specific to the `textDocument/hover` request.
	Hover *HoverClientCapabilities `protobuf:"bytes,3,opt,name=hover,proto3" json:"hover,omitempty"`
	// Capabilities specific to the `textDocument/signatureHelp` request.
	SignatureHelp *SignatureHelpClientCapabilities `protobuf:"bytes,4,opt,name=signature_help,json=signatureHelp,proto3" json:"signature_help,omitempty"`
	// Capabilities specific to the `textDocument/declaration` request.
	//
	// @since 3.14.0
	Declaration *DeclarationClientCapabilities `protobuf:"bytes,5,opt,name=declaration,proto3" json:"declaration,omitempty"`
	// Capabilities specific to the `textDocument/definition` request.
	Definition *DefinitionClientCapabilities `protobuf:"bytes,6,opt,name=definition,proto3" json:"definition,omitempty"`
	// Capabilities specific to the `textDocument/typeDefinition` request.
	//
	// @since 3.6.0
	TypeDefinition *TypeDefinitionClientCapabilities `protobuf:"bytes,7,opt,name=type_definition,json=typeDefinition,proto3" json:"type_definition,omitempty"`
	// Capabilities specific to the `textDocument/implementation` request.
	//
	// @since 3.6.0
	Implementation *ImplementationClientCapabilities `protobuf:"bytes,8,opt,name=implementation,proto3" json:"implementation,omitempty"`
	// Capabilities specific to the `textDocument/references` request.
	References *ReferenceClientCapabilities `protobuf:"bytes,9,opt,name=references,proto3" json:"references,omitempty"`
	// Capabilities specific to the `textDocument/documentHighlight` request.
	DocumentHighlight *DocumentHighlightClientCapabilities `protobuf:"bytes,10,opt,name=document_highlight,json=documentHighlight,proto3" json:"document_highlight,omitempty"`
	// Capabilities specific to the `textDocument/documentSymbol` request.
	DocumentSymbol *DocumentSymbolClientCapabilities `protobuf:"bytes,11,opt,name=document_symbol,json=documentSymbol,proto3" json:"document_symbol,omitempty"`
	// Capabilities specific to the `textDocument/codeAction` request.
	CodeAction *CodeActionClientCapabilities `protobuf:"bytes,12,opt,name=code_action,json=codeAction,proto3" json:"code_action,omitempty"`
	// Capabilities specific to the `textDocument/codeLens` request.
	CodeLens *CodeLensClientCapabilities `protobuf:"bytes,13,opt,name=code_lens,json=codeLens,proto3" json:"code_lens,omitempty"`
	// Capabilities specific to the `textDocument/documentLink` request.
	DocumentLink *DocumentLinkClientCapabilities `protobuf:"bytes,14,opt,name=document_link,json=documentLink,proto3" json:"document_link,omitempty"`
	// Capabilities specific to the `textDocument/documentColor` and the
	// `textDocument/colorPresentation` request.
	//
	// @since 3.6.0
	ColorProvider *DocumentColorClientCapabilities `protobuf:"bytes,15,opt,name=color_provider,json=colorProvider,proto3" json:"color_provider,omitempty"`
	// Capabilities specific to the `textDocument/formatting` request.
	Formatting *DocumentFormattingClientCapabilities `protobuf:"bytes,16,opt,name=formatting,proto3" json:"formatting,omitempty"`
	// Capabilities specific to the `textDocument/rangeFormatting` request.
	RangeFormatting *DocumentRangeFormattingClientCapabilities `protobuf:"bytes,17,opt,name=range_formatting,json=rangeFormatting,proto3" json:"range_formatting,omitempty"`
	// Capabilities specific to the `textDocument/onTypeFormatting` request.
	OnTypeFormatting *DocumentOnTypeFormattingClientCapabilities `protobuf:"bytes,18,opt,name=on_type_formatting,json=onTypeFormatting,proto3" json:"on_type_formatting,omitempty"`
	// Capabilities specific to the `textDocument/rename` request.
	Rename *RenameClientCapabilities `protobuf:"bytes,19,opt,name=rename,proto3" json:"rename,omitempty"`
	// Capabilities specific to the `textDocument/publishDiagnostics` notification.
	PublishDiagnostics *PublishDiagnosticsClientCapabilities `protobuf:"bytes,20,opt,name=publish_diagnostics,json=publishDiagnostics,proto3" json:"publish_diagnostics,omitempty"`
	// Capabilities specific to the `textDocument/foldingRange` request.
	//
	// @since 3.10.0
	FoldingRange *FoldingRangeClientCapabilities `protobuf:"bytes,21,opt,name=folding_range,json=foldingRange,proto3" json:"folding_range,omitempty"`
	// Capabilities specific to the `textDocument/selectionRange` request.
	//
	// @since 3.15.0
	SelectionRange *SelectionRangeClientCapabilities `protobuf:"bytes,22,opt,name=selection_range,json=selectionRange,proto3" json:"selection_range,omitempty"`
}

func (x *TextDocumentClientCapabilities) Reset() {
	*x = TextDocumentClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentClientCapabilities) ProtoMessage() {}

func (x *TextDocumentClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentClientCapabilities.ProtoReflect.Descriptor instead.
func (*TextDocumentClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{50}
}

func (x *TextDocumentClientCapabilities) GetSynchronization() *TextDocumentSyncClientCapabilities {
	if x != nil {
		return x.Synchronization
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetCompletion() *CompletionClientCapabilities {
	if x != nil {
		return x.Completion
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetHover() *HoverClientCapabilities {
	if x != nil {
		return x.Hover
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetSignatureHelp() *SignatureHelpClientCapabilities {
	if x != nil {
		return x.SignatureHelp
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetDeclaration() *DeclarationClientCapabilities {
	if x != nil {
		return x.Declaration
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetDefinition() *DefinitionClientCapabilities {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetTypeDefinition() *TypeDefinitionClientCapabilities {
	if x != nil {
		return x.TypeDefinition
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetImplementation() *ImplementationClientCapabilities {
	if x != nil {
		return x.Implementation
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetReferences() *ReferenceClientCapabilities {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetDocumentHighlight() *DocumentHighlightClientCapabilities {
	if x != nil {
		return x.DocumentHighlight
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetDocumentSymbol() *DocumentSymbolClientCapabilities {
	if x != nil {
		return x.DocumentSymbol
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetCodeAction() *CodeActionClientCapabilities {
	if x != nil {
		return x.CodeAction
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetCodeLens() *CodeLensClientCapabilities {
	if x != nil {
		return x.CodeLens
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetDocumentLink() *DocumentLinkClientCapabilities {
	if x != nil {
		return x.DocumentLink
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetColorProvider() *DocumentColorClientCapabilities {
	if x != nil {
		return x.ColorProvider
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetFormatting() *DocumentFormattingClientCapabilities {
	if x != nil {
		return x.Formatting
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetRangeFormatting() *DocumentRangeFormattingClientCapabilities {
	if x != nil {
		return x.RangeFormatting
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetOnTypeFormatting() *DocumentOnTypeFormattingClientCapabilities {
	if x != nil {
		return x.OnTypeFormatting
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetRename() *RenameClientCapabilities {
	if x != nil {
		return x.Rename
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetPublishDiagnostics() *PublishDiagnosticsClientCapabilities {
	if x != nil {
		return x.PublishDiagnostics
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetFoldingRange() *FoldingRangeClientCapabilities {
	if x != nil {
		return x.FoldingRange
	}
	return nil
}

func (x *TextDocumentClientCapabilities) GetSelectionRange() *SelectionRangeClientCapabilities {
	if x != nil {
		return x.SelectionRange
	}
	return nil
}

// ClientCapabilities define capabilities for dynamic registration, workspace and text document
// features the client supports.
//
// The experimental can be used to pass experimental capabilities under development. For future
// compatibility a ClientCapabilities object literal can have more properties set than currently
// defined. Servers receiving a ClientCapabilities object literal with unknown properties should
// ignore these properties. A missing property should be interpreted as an absence of the
// capability. If a missing property normally defines sub properties, all missing sub properties
// should be interpreted as an absence of the corresponding capability.
//
// Client capabilities got introduced with version 3.0 of the protocol. They therefore only describe
// capabilities that got introduced in 3.x or later. Capabilities that existed in the 2.x version of
// the protocol are still mandatory for clients. Clients cannot opt out of providing them. So even
// if a client omits the ClientCapabilities.textDocument.synchronization it is still required that
// the client provides text document synchronization (e.g. open, changed and close notifications).
type ClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Workspace specific client capabilities.
	Workspace *ClientCapabilities_Workspace `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Optional. Text document specific client capabilities.
	TextDocument *TextDocumentClientCapabilities `protobuf:"bytes,2,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// Optional. Window specific client capabilities.
	Window *ClientCapabilities_Window `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	// Optional. Experimental client capabilities.
	Experimental *anypb.Any `protobuf:"bytes,4,opt,name=experimental,proto3" json:"experimental,omitempty"`
}

func (x *ClientCapabilities) Reset() {
	*x = ClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCapabilities) ProtoMessage() {}

func (x *ClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCapabilities.ProtoReflect.Descriptor instead.
func (*ClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{51}
}

func (x *ClientCapabilities) GetWorkspace() *ClientCapabilities_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *ClientCapabilities) GetTextDocument() *TextDocumentClientCapabilities {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *ClientCapabilities) GetWindow() *ClientCapabilities_Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *ClientCapabilities) GetExperimental() *anypb.Any {
	if x != nil {
		return x.Experimental
	}
	return nil
}

// InitializeResponse result of Initialize.
type InitializeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The capabilities the language server provides.
	Capabilities *ServerCapabilities `protobuf:"bytes,1,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Optional. Information about the server.
	//
	// @since 3.15.0
	ServerInfo *InitializeResponse_ServerInfo `protobuf:"bytes,2,opt,name=server_info,json=serverInfo,proto3" json:"server_info,omitempty"`
}

func (x *InitializeResponse) Reset() {
	*x = InitializeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeResponse) ProtoMessage() {}

func (x *InitializeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeResponse.ProtoReflect.Descriptor instead.
func (*InitializeResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{52}
}

func (x *InitializeResponse) GetCapabilities() *ServerCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *InitializeResponse) GetServerInfo() *InitializeResponse_ServerInfo {
	if x != nil {
		return x.ServerInfo
	}
	return nil
}

// InitializeError known error codes.
type InitializeErrorUnknownProtocolVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the protocol version provided by the client can't be handled by the server.
	//
	// This initialize error got replaced by client capabilities. There is
	// no version handshake in version 3.0x.
	//
	// Deprecated: Do not use.
	UnknownProtocolVersion int32 `protobuf:"varint,1,opt,name=unknown_protocol_version,json=unknownProtocolVersion,proto3" json:"unknown_protocol_version,omitempty"`
}

func (x *InitializeErrorUnknownProtocolVersion) Reset() {
	*x = InitializeErrorUnknownProtocolVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeErrorUnknownProtocolVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeErrorUnknownProtocolVersion) ProtoMessage() {}

func (x *InitializeErrorUnknownProtocolVersion) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeErrorUnknownProtocolVersion.ProtoReflect.Descriptor instead.
func (*InitializeErrorUnknownProtocolVersion) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{53}
}

// Deprecated: Do not use.
func (x *InitializeErrorUnknownProtocolVersion) GetUnknownProtocolVersion() int32 {
	if x != nil {
		return x.UnknownProtocolVersion
	}
	return 0
}

// InitializeError known error data for InitializeResponse response.
type InitializeErrorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether the client execute the following retry logic:
	// (1) show the message provided by the ResponseError to the user
	// (2) user selects retry or cancel
	// (3) if user selected retry the initialize method is sent again.
	Retry bool `protobuf:"varint,1,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *InitializeErrorData) Reset() {
	*x = InitializeErrorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeErrorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeErrorData) ProtoMessage() {}

func (x *InitializeErrorData) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeErrorData.ProtoReflect.Descriptor instead.
func (*InitializeErrorData) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{54}
}

func (x *InitializeErrorData) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

// ServerCapabilities is the signal of server capabilities.
type ServerCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines how text documents are synced. Is either a detailed structure defining each
	// notification or for backwards compatibility the TextDocumentSyncKind number. If omitted it
	// defaults to `TextDocumentSyncKind.None`.
	//
	// optional
	//
	// Types that are assignable to TextDocumentSync:
	//	*ServerCapabilities_TextDocumentSyncOptions
	//	*ServerCapabilities_TextDocumentSyncKind
	TextDocumentSync isServerCapabilities_TextDocumentSync `protobuf_oneof:"text_document_sync"`
	// Optional. The server provides completion support.
	CompletionProvider *CompletionOptions `protobuf:"bytes,3,opt,name=completion_provider,json=completionProvider,proto3" json:"completion_provider,omitempty"`
	// The server provides hover support.
	//
	// optional
	//
	// Types that are assignable to HoverProvider:
	//	*ServerCapabilities_EnableHoverProvider
	//	*ServerCapabilities_HoverOptions
	HoverProvider isServerCapabilities_HoverProvider `protobuf_oneof:"hover_provider"`
	// Optional. The server provides signature help support.
	SignatureHelpProvider *SignatureHelpOptions `protobuf:"bytes,6,opt,name=signature_help_provider,json=signatureHelpProvider,proto3" json:"signature_help_provider,omitempty"`
	// The server provides go to declaration support.
	//
	// @since 3.14.0
	//
	// optional
	//
	// Types that are assignable to DeclarationProvider:
	//	*ServerCapabilities_EnableDeclarationProvider
	//	*ServerCapabilities_DeclarationOptions
	//	*ServerCapabilities_DeclarationRegistrationOptions
	DeclarationProvider isServerCapabilities_DeclarationProvider `protobuf_oneof:"declaration_provider"`
	// The server provides goto definition support.
	//
	// optional
	//
	// Types that are assignable to DefinitionProvider:
	//	*ServerCapabilities_EnableDefinitionProvider
	//	*ServerCapabilities_DefinitionOptions
	DefinitionProvider isServerCapabilities_DefinitionProvider `protobuf_oneof:"definition_provider"`
	// The server provides goto type definition support.
	//
	// @since 3.6.0
	//
	// optional
	//
	// Types that are assignable to TypeDefinitionProvider:
	//	*ServerCapabilities_EnableTypeDefinitionProvider
	//	*ServerCapabilities_TypeDefinitionOptions
	//	*ServerCapabilities_TypeDefinitionRegistrationOptions
	TypeDefinitionProvider isServerCapabilities_TypeDefinitionProvider `protobuf_oneof:"type_definition_provider"`
	// The server provides goto implementation support.
	//
	// @since 3.6.0
	//
	// optional
	//
	// Types that are assignable to ImplementationProvider:
	//	*ServerCapabilities_EnableImplementationProvider
	//	*ServerCapabilities_ImplementationOptions
	//	*ServerCapabilities_ImplementationRegistrationOptions
	ImplementationProvider isServerCapabilities_ImplementationProvider `protobuf_oneof:"implementation_provider"`
	// The server provides find references support.
	//
	// optional
	//
	// Types that are assignable to ReferencesProvider:
	//	*ServerCapabilities_EnableReferencesProvider
	//	*ServerCapabilities_ReferenceOptions
	ReferencesProvider isServerCapabilities_ReferencesProvider `protobuf_oneof:"references_provider"`
	// The server provides document highlight support.
	//
	// optional
	//
	// Types that are assignable to DocumentHighlightProvider:
	//	*ServerCapabilities_EnableDocumentHighlightProvider
	//	*ServerCapabilities_DocumentHighlightOptions
	DocumentHighlightProvider isServerCapabilities_DocumentHighlightProvider `protobuf_oneof:"document_highlight_provider"`
	// The server provides document symbol support.
	//
	// optional
	//
	// Types that are assignable to DocumentSymbolProvider:
	//	*ServerCapabilities_EnableDocumentSymbolProvider
	//	*ServerCapabilities_DocumentSymbolOptions
	DocumentSymbolProvider isServerCapabilities_DocumentSymbolProvider `protobuf_oneof:"document_symbol_provider"`
	// The server provides code actions. The `CodeActionOptions` return type is only
	// valid if the client signals code action literal support via the property
	// `textDocument.codeAction.codeActionLiteralSupport`.
	//
	// optional
	//
	// Types that are assignable to CodeActionProvider:
	//	*ServerCapabilities_EnableCodeActionProvider
	//	*ServerCapabilities_CodeActionOptions
	CodeActionProvider isServerCapabilities_CodeActionProvider `protobuf_oneof:"code_action_provider"`
	// Optional. The server provides code lens.
	CodelensProvider *CodeLensOptions `protobuf:"bytes,26,opt,name=codelens_provider,json=codelensProvider,proto3" json:"codelens_provider,omitempty"`
	// Optional. The server provides document link support.
	DocumentLinkProvider *DocumentLinkOptions `protobuf:"bytes,27,opt,name=document_link_provider,json=documentLinkProvider,proto3" json:"document_link_provider,omitempty"`
	// The server provides color provider support.
	//
	// @since 3.6.0
	//
	// optional
	//
	// Types that are assignable to ColorProvider:
	//	*ServerCapabilities_EnableColorProvider
	//	*ServerCapabilities_DocumentColorOptions
	//	*ServerCapabilities_DocumentColorRegistrationOptions
	ColorProvider isServerCapabilities_ColorProvider `protobuf_oneof:"color_provider"`
	// The server provides document formatting.
	//
	// optional
	//
	// Types that are assignable to DocumentFormattingProvider:
	//	*ServerCapabilities_EnableDocumentFormattingProvider
	//	*ServerCapabilities_DocumentFormattingOptions
	DocumentFormattingProvider isServerCapabilities_DocumentFormattingProvider `protobuf_oneof:"document_formatting_provider"`
	// The server provides document range formatting.
	//
	// optional
	//
	// Types that are assignable to DocumentRangeFormattingProvider:
	//	*ServerCapabilities_EnableDocumentRangeFormattingProvider
	//	*ServerCapabilities_DocumentRangeFormattingOptions
	DocumentRangeFormattingProvider isServerCapabilities_DocumentRangeFormattingProvider `protobuf_oneof:"document_range_formatting_provider"`
	// Optional. The server provides document formatting on typing.
	DocumentOnTypeFormattingProvider *DocumentOnTypeFormattingOptions `protobuf:"bytes,35,opt,name=document_on_type_formatting_provider,json=documentOnTypeFormattingProvider,proto3" json:"document_on_type_formatting_provider,omitempty"`
	// The server provides rename support. RenameOptions may only be
	// specified if the client states that it supports `prepareSupport` in its initial
	// `initialize` request.
	//
	// optional
	//
	// Types that are assignable to RenameProvider:
	//	*ServerCapabilities_EnableRenameProvider
	//	*ServerCapabilities_RenameOptions
	RenameProvider isServerCapabilities_RenameProvider `protobuf_oneof:"rename_provider"`
	// The server provides folding provider support.
	//
	// @since 3.10.0
	//
	// optional
	//
	// Types that are assignable to FoldingRangeProvider:
	//	*ServerCapabilities_EnableFoldingRangeProvider
	//	*ServerCapabilities_FoldingRangeOptions
	//	*ServerCapabilities_FoldingRangeRegistrationOptions
	FoldingRangeProvider isServerCapabilities_FoldingRangeProvider `protobuf_oneof:"folding_range_provider"`
	// Optional. The server provides execute command support.
	ExecuteCommandProvider *ExecuteCommandOptions `protobuf:"bytes,41,opt,name=execute_command_provider,json=executeCommandProvider,proto3" json:"execute_command_provider,omitempty"`
	// The server provides selection range support.
	//
	// @since 3.15.0
	//
	// optional
	//
	// Types that are assignable to SelectionRangeProvider:
	//	*ServerCapabilities_EnableSelectionRangeProvider
	//	*ServerCapabilities_SelectionRangeOptions
	//	*ServerCapabilities_SelectionRangeRegistrationOptions
	SelectionRangeProvider isServerCapabilities_SelectionRangeProvider `protobuf_oneof:"selection_range_provider"`
	// The server provides workspace symbol support.
	WorkspaceSymbolProvider bool `protobuf:"varint,45,opt,name=workspace_symbol_provider,json=workspaceSymbolProvider,proto3" json:"workspace_symbol_provider,omitempty"`
	// Optional.
	Workspace *ServerCapabilities_Workspace `protobuf:"bytes,46,opt,name=workspace,proto3" json:"workspace,omitempty"`
	// Optional. Experimental server capabilities.
	Experimental *anypb.Any `protobuf:"bytes,47,opt,name=experimental,proto3" json:"experimental,omitempty"`
}

func (x *ServerCapabilities) Reset() {
	*x = ServerCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerCapabilities) ProtoMessage() {}

func (x *ServerCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerCapabilities.ProtoReflect.Descriptor instead.
func (*ServerCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{55}
}

func (m *ServerCapabilities) GetTextDocumentSync() isServerCapabilities_TextDocumentSync {
	if m != nil {
		return m.TextDocumentSync
	}
	return nil
}

func (x *ServerCapabilities) GetTextDocumentSyncOptions() *TextDocumentSyncOptions {
	if x, ok := x.GetTextDocumentSync().(*ServerCapabilities_TextDocumentSyncOptions); ok {
		return x.TextDocumentSyncOptions
	}
	return nil
}

func (x *ServerCapabilities) GetTextDocumentSyncKind() TextDocumentSyncKind {
	if x, ok := x.GetTextDocumentSync().(*ServerCapabilities_TextDocumentSyncKind); ok {
		return x.TextDocumentSyncKind
	}
	return TextDocumentSyncKind_NONE
}

func (x *ServerCapabilities) GetCompletionProvider() *CompletionOptions {
	if x != nil {
		return x.CompletionProvider
	}
	return nil
}

func (m *ServerCapabilities) GetHoverProvider() isServerCapabilities_HoverProvider {
	if m != nil {
		return m.HoverProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableHoverProvider() bool {
	if x, ok := x.GetHoverProvider().(*ServerCapabilities_EnableHoverProvider); ok {
		return x.EnableHoverProvider
	}
	return false
}

func (x *ServerCapabilities) GetHoverOptions() *HoverOptions {
	if x, ok := x.GetHoverProvider().(*ServerCapabilities_HoverOptions); ok {
		return x.HoverOptions
	}
	return nil
}

func (x *ServerCapabilities) GetSignatureHelpProvider() *SignatureHelpOptions {
	if x != nil {
		return x.SignatureHelpProvider
	}
	return nil
}

func (m *ServerCapabilities) GetDeclarationProvider() isServerCapabilities_DeclarationProvider {
	if m != nil {
		return m.DeclarationProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableDeclarationProvider() bool {
	if x, ok := x.GetDeclarationProvider().(*ServerCapabilities_EnableDeclarationProvider); ok {
		return x.EnableDeclarationProvider
	}
	return false
}

func (x *ServerCapabilities) GetDeclarationOptions() *DeclarationOptions {
	if x, ok := x.GetDeclarationProvider().(*ServerCapabilities_DeclarationOptions); ok {
		return x.DeclarationOptions
	}
	return nil
}

func (x *ServerCapabilities) GetDeclarationRegistrationOptions() *DeclarationRegistrationOptions {
	if x, ok := x.GetDeclarationProvider().(*ServerCapabilities_DeclarationRegistrationOptions); ok {
		return x.DeclarationRegistrationOptions
	}
	return nil
}

func (m *ServerCapabilities) GetDefinitionProvider() isServerCapabilities_DefinitionProvider {
	if m != nil {
		return m.DefinitionProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableDefinitionProvider() bool {
	if x, ok := x.GetDefinitionProvider().(*ServerCapabilities_EnableDefinitionProvider); ok {
		return x.EnableDefinitionProvider
	}
	return false
}

func (x *ServerCapabilities) GetDefinitionOptions() *DefinitionOptions {
	if x, ok := x.GetDefinitionProvider().(*ServerCapabilities_DefinitionOptions); ok {
		return x.DefinitionOptions
	}
	return nil
}

func (m *ServerCapabilities) GetTypeDefinitionProvider() isServerCapabilities_TypeDefinitionProvider {
	if m != nil {
		return m.TypeDefinitionProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableTypeDefinitionProvider() bool {
	if x, ok := x.GetTypeDefinitionProvider().(*ServerCapabilities_EnableTypeDefinitionProvider); ok {
		return x.EnableTypeDefinitionProvider
	}
	return false
}

func (x *ServerCapabilities) GetTypeDefinitionOptions() *TypeDefinitionOptions {
	if x, ok := x.GetTypeDefinitionProvider().(*ServerCapabilities_TypeDefinitionOptions); ok {
		return x.TypeDefinitionOptions
	}
	return nil
}

func (x *ServerCapabilities) GetTypeDefinitionRegistrationOptions() *TypeDefinitionRegistrationOptions {
	if x, ok := x.GetTypeDefinitionProvider().(*ServerCapabilities_TypeDefinitionRegistrationOptions); ok {
		return x.TypeDefinitionRegistrationOptions
	}
	return nil
}

func (m *ServerCapabilities) GetImplementationProvider() isServerCapabilities_ImplementationProvider {
	if m != nil {
		return m.ImplementationProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableImplementationProvider() bool {
	if x, ok := x.GetImplementationProvider().(*ServerCapabilities_EnableImplementationProvider); ok {
		return x.EnableImplementationProvider
	}
	return false
}

func (x *ServerCapabilities) GetImplementationOptions() *ImplementationOptions {
	if x, ok := x.GetImplementationProvider().(*ServerCapabilities_ImplementationOptions); ok {
		return x.ImplementationOptions
	}
	return nil
}

func (x *ServerCapabilities) GetImplementationRegistrationOptions() *ImplementationRegistrationOptions {
	if x, ok := x.GetImplementationProvider().(*ServerCapabilities_ImplementationRegistrationOptions); ok {
		return x.ImplementationRegistrationOptions
	}
	return nil
}

func (m *ServerCapabilities) GetReferencesProvider() isServerCapabilities_ReferencesProvider {
	if m != nil {
		return m.ReferencesProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableReferencesProvider() bool {
	if x, ok := x.GetReferencesProvider().(*ServerCapabilities_EnableReferencesProvider); ok {
		return x.EnableReferencesProvider
	}
	return false
}

func (x *ServerCapabilities) GetReferenceOptions() *ReferenceOptions {
	if x, ok := x.GetReferencesProvider().(*ServerCapabilities_ReferenceOptions); ok {
		return x.ReferenceOptions
	}
	return nil
}

func (m *ServerCapabilities) GetDocumentHighlightProvider() isServerCapabilities_DocumentHighlightProvider {
	if m != nil {
		return m.DocumentHighlightProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableDocumentHighlightProvider() bool {
	if x, ok := x.GetDocumentHighlightProvider().(*ServerCapabilities_EnableDocumentHighlightProvider); ok {
		return x.EnableDocumentHighlightProvider
	}
	return false
}

func (x *ServerCapabilities) GetDocumentHighlightOptions() *DocumentHighlightOptions {
	if x, ok := x.GetDocumentHighlightProvider().(*ServerCapabilities_DocumentHighlightOptions); ok {
		return x.DocumentHighlightOptions
	}
	return nil
}

func (m *ServerCapabilities) GetDocumentSymbolProvider() isServerCapabilities_DocumentSymbolProvider {
	if m != nil {
		return m.DocumentSymbolProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableDocumentSymbolProvider() bool {
	if x, ok := x.GetDocumentSymbolProvider().(*ServerCapabilities_EnableDocumentSymbolProvider); ok {
		return x.EnableDocumentSymbolProvider
	}
	return false
}

func (x *ServerCapabilities) GetDocumentSymbolOptions() *DocumentSymbolOptions {
	if x, ok := x.GetDocumentSymbolProvider().(*ServerCapabilities_DocumentSymbolOptions); ok {
		return x.DocumentSymbolOptions
	}
	return nil
}

func (m *ServerCapabilities) GetCodeActionProvider() isServerCapabilities_CodeActionProvider {
	if m != nil {
		return m.CodeActionProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableCodeActionProvider() bool {
	if x, ok := x.GetCodeActionProvider().(*ServerCapabilities_EnableCodeActionProvider); ok {
		return x.EnableCodeActionProvider
	}
	return false
}

func (x *ServerCapabilities) GetCodeActionOptions() *CodeActionOptions {
	if x, ok := x.GetCodeActionProvider().(*ServerCapabilities_CodeActionOptions); ok {
		return x.CodeActionOptions
	}
	return nil
}

func (x *ServerCapabilities) GetCodelensProvider() *CodeLensOptions {
	if x != nil {
		return x.CodelensProvider
	}
	return nil
}

func (x *ServerCapabilities) GetDocumentLinkProvider() *DocumentLinkOptions {
	if x != nil {
		return x.DocumentLinkProvider
	}
	return nil
}

func (m *ServerCapabilities) GetColorProvider() isServerCapabilities_ColorProvider {
	if m != nil {
		return m.ColorProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableColorProvider() bool {
	if x, ok := x.GetColorProvider().(*ServerCapabilities_EnableColorProvider); ok {
		return x.EnableColorProvider
	}
	return false
}

func (x *ServerCapabilities) GetDocumentColorOptions() *DocumentColorOptions {
	if x, ok := x.GetColorProvider().(*ServerCapabilities_DocumentColorOptions); ok {
		return x.DocumentColorOptions
	}
	return nil
}

func (x *ServerCapabilities) GetDocumentColorRegistrationOptions() *DocumentColorRegistrationOptions {
	if x, ok := x.GetColorProvider().(*ServerCapabilities_DocumentColorRegistrationOptions); ok {
		return x.DocumentColorRegistrationOptions
	}
	return nil
}

func (m *ServerCapabilities) GetDocumentFormattingProvider() isServerCapabilities_DocumentFormattingProvider {
	if m != nil {
		return m.DocumentFormattingProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableDocumentFormattingProvider() bool {
	if x, ok := x.GetDocumentFormattingProvider().(*ServerCapabilities_EnableDocumentFormattingProvider); ok {
		return x.EnableDocumentFormattingProvider
	}
	return false
}

func (x *ServerCapabilities) GetDocumentFormattingOptions() *DocumentFormattingOptions {
	if x, ok := x.GetDocumentFormattingProvider().(*ServerCapabilities_DocumentFormattingOptions); ok {
		return x.DocumentFormattingOptions
	}
	return nil
}

func (m *ServerCapabilities) GetDocumentRangeFormattingProvider() isServerCapabilities_DocumentRangeFormattingProvider {
	if m != nil {
		return m.DocumentRangeFormattingProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableDocumentRangeFormattingProvider() bool {
	if x, ok := x.GetDocumentRangeFormattingProvider().(*ServerCapabilities_EnableDocumentRangeFormattingProvider); ok {
		return x.EnableDocumentRangeFormattingProvider
	}
	return false
}

func (x *ServerCapabilities) GetDocumentRangeFormattingOptions() *DocumentRangeFormattingOptions {
	if x, ok := x.GetDocumentRangeFormattingProvider().(*ServerCapabilities_DocumentRangeFormattingOptions); ok {
		return x.DocumentRangeFormattingOptions
	}
	return nil
}

func (x *ServerCapabilities) GetDocumentOnTypeFormattingProvider() *DocumentOnTypeFormattingOptions {
	if x != nil {
		return x.DocumentOnTypeFormattingProvider
	}
	return nil
}

func (m *ServerCapabilities) GetRenameProvider() isServerCapabilities_RenameProvider {
	if m != nil {
		return m.RenameProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableRenameProvider() bool {
	if x, ok := x.GetRenameProvider().(*ServerCapabilities_EnableRenameProvider); ok {
		return x.EnableRenameProvider
	}
	return false
}

func (x *ServerCapabilities) GetRenameOptions() *RenameOptions {
	if x, ok := x.GetRenameProvider().(*ServerCapabilities_RenameOptions); ok {
		return x.RenameOptions
	}
	return nil
}

func (m *ServerCapabilities) GetFoldingRangeProvider() isServerCapabilities_FoldingRangeProvider {
	if m != nil {
		return m.FoldingRangeProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableFoldingRangeProvider() bool {
	if x, ok := x.GetFoldingRangeProvider().(*ServerCapabilities_EnableFoldingRangeProvider); ok {
		return x.EnableFoldingRangeProvider
	}
	return false
}

func (x *ServerCapabilities) GetFoldingRangeOptions() *FoldingRangeOptions {
	if x, ok := x.GetFoldingRangeProvider().(*ServerCapabilities_FoldingRangeOptions); ok {
		return x.FoldingRangeOptions
	}
	return nil
}

func (x *ServerCapabilities) GetFoldingRangeRegistrationOptions() *FoldingRangeRegistrationOptions {
	if x, ok := x.GetFoldingRangeProvider().(*ServerCapabilities_FoldingRangeRegistrationOptions); ok {
		return x.FoldingRangeRegistrationOptions
	}
	return nil
}

func (x *ServerCapabilities) GetExecuteCommandProvider() *ExecuteCommandOptions {
	if x != nil {
		return x.ExecuteCommandProvider
	}
	return nil
}

func (m *ServerCapabilities) GetSelectionRangeProvider() isServerCapabilities_SelectionRangeProvider {
	if m != nil {
		return m.SelectionRangeProvider
	}
	return nil
}

func (x *ServerCapabilities) GetEnableSelectionRangeProvider() bool {
	if x, ok := x.GetSelectionRangeProvider().(*ServerCapabilities_EnableSelectionRangeProvider); ok {
		return x.EnableSelectionRangeProvider
	}
	return false
}

func (x *ServerCapabilities) GetSelectionRangeOptions() *SelectionRangeOptions {
	if x, ok := x.GetSelectionRangeProvider().(*ServerCapabilities_SelectionRangeOptions); ok {
		return x.SelectionRangeOptions
	}
	return nil
}

func (x *ServerCapabilities) GetSelectionRangeRegistrationOptions() *SelectionRangeRegistrationOptions {
	if x, ok := x.GetSelectionRangeProvider().(*ServerCapabilities_SelectionRangeRegistrationOptions); ok {
		return x.SelectionRangeRegistrationOptions
	}
	return nil
}

func (x *ServerCapabilities) GetWorkspaceSymbolProvider() bool {
	if x != nil {
		return x.WorkspaceSymbolProvider
	}
	return false
}

func (x *ServerCapabilities) GetWorkspace() *ServerCapabilities_Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *ServerCapabilities) GetExperimental() *anypb.Any {
	if x != nil {
		return x.Experimental
	}
	return nil
}

type isServerCapabilities_TextDocumentSync interface {
	isServerCapabilities_TextDocumentSync()
}

type ServerCapabilities_TextDocumentSyncOptions struct {
	TextDocumentSyncOptions *TextDocumentSyncOptions `protobuf:"bytes,1,opt,name=text_document_sync_options,json=textDocumentSyncOptions,proto3,oneof"`
}

type ServerCapabilities_TextDocumentSyncKind struct {
	TextDocumentSyncKind TextDocumentSyncKind `protobuf:"varint,2,opt,name=text_document_sync_kind,json=textDocumentSyncKind,proto3,enum=protocol.rpc.TextDocumentSyncKind,oneof"`
}

func (*ServerCapabilities_TextDocumentSyncOptions) isServerCapabilities_TextDocumentSync() {}

func (*ServerCapabilities_TextDocumentSyncKind) isServerCapabilities_TextDocumentSync() {}

type isServerCapabilities_HoverProvider interface {
	isServerCapabilities_HoverProvider()
}

type ServerCapabilities_EnableHoverProvider struct {
	EnableHoverProvider bool `protobuf:"varint,4,opt,name=enable_hover_provider,json=enableHoverProvider,proto3,oneof"`
}

type ServerCapabilities_HoverOptions struct {
	HoverOptions *HoverOptions `protobuf:"bytes,5,opt,name=hover_options,json=hoverOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableHoverProvider) isServerCapabilities_HoverProvider() {}

func (*ServerCapabilities_HoverOptions) isServerCapabilities_HoverProvider() {}

type isServerCapabilities_DeclarationProvider interface {
	isServerCapabilities_DeclarationProvider()
}

type ServerCapabilities_EnableDeclarationProvider struct {
	EnableDeclarationProvider bool `protobuf:"varint,7,opt,name=enable_declaration_provider,json=enableDeclarationProvider,proto3,oneof"`
}

type ServerCapabilities_DeclarationOptions struct {
	DeclarationOptions *DeclarationOptions `protobuf:"bytes,8,opt,name=declaration_options,json=declarationOptions,proto3,oneof"`
}

type ServerCapabilities_DeclarationRegistrationOptions struct {
	DeclarationRegistrationOptions *DeclarationRegistrationOptions `protobuf:"bytes,9,opt,name=declaration_registration_options,json=declarationRegistrationOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableDeclarationProvider) isServerCapabilities_DeclarationProvider() {}

func (*ServerCapabilities_DeclarationOptions) isServerCapabilities_DeclarationProvider() {}

func (*ServerCapabilities_DeclarationRegistrationOptions) isServerCapabilities_DeclarationProvider() {
}

type isServerCapabilities_DefinitionProvider interface {
	isServerCapabilities_DefinitionProvider()
}

type ServerCapabilities_EnableDefinitionProvider struct {
	EnableDefinitionProvider bool `protobuf:"varint,10,opt,name=enable_definition_provider,json=enableDefinitionProvider,proto3,oneof"`
}

type ServerCapabilities_DefinitionOptions struct {
	DefinitionOptions *DefinitionOptions `protobuf:"bytes,11,opt,name=definition_options,json=definitionOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableDefinitionProvider) isServerCapabilities_DefinitionProvider() {}

func (*ServerCapabilities_DefinitionOptions) isServerCapabilities_DefinitionProvider() {}

type isServerCapabilities_TypeDefinitionProvider interface {
	isServerCapabilities_TypeDefinitionProvider()
}

type ServerCapabilities_EnableTypeDefinitionProvider struct {
	EnableTypeDefinitionProvider bool `protobuf:"varint,12,opt,name=enable_type_definition_provider,json=enableTypeDefinitionProvider,proto3,oneof"`
}

type ServerCapabilities_TypeDefinitionOptions struct {
	TypeDefinitionOptions *TypeDefinitionOptions `protobuf:"bytes,13,opt,name=type_definition_options,json=typeDefinitionOptions,proto3,oneof"`
}

type ServerCapabilities_TypeDefinitionRegistrationOptions struct {
	TypeDefinitionRegistrationOptions *TypeDefinitionRegistrationOptions `protobuf:"bytes,14,opt,name=type_definition_registration_options,json=typeDefinitionRegistrationOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableTypeDefinitionProvider) isServerCapabilities_TypeDefinitionProvider() {
}

func (*ServerCapabilities_TypeDefinitionOptions) isServerCapabilities_TypeDefinitionProvider() {}

func (*ServerCapabilities_TypeDefinitionRegistrationOptions) isServerCapabilities_TypeDefinitionProvider() {
}

type isServerCapabilities_ImplementationProvider interface {
	isServerCapabilities_ImplementationProvider()
}

type ServerCapabilities_EnableImplementationProvider struct {
	EnableImplementationProvider bool `protobuf:"varint,15,opt,name=enable_implementation_provider,json=enableImplementationProvider,proto3,oneof"`
}

type ServerCapabilities_ImplementationOptions struct {
	ImplementationOptions *ImplementationOptions `protobuf:"bytes,16,opt,name=implementation_options,json=implementationOptions,proto3,oneof"`
}

type ServerCapabilities_ImplementationRegistrationOptions struct {
	ImplementationRegistrationOptions *ImplementationRegistrationOptions `protobuf:"bytes,17,opt,name=implementation_registration_options,json=implementationRegistrationOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableImplementationProvider) isServerCapabilities_ImplementationProvider() {
}

func (*ServerCapabilities_ImplementationOptions) isServerCapabilities_ImplementationProvider() {}

func (*ServerCapabilities_ImplementationRegistrationOptions) isServerCapabilities_ImplementationProvider() {
}

type isServerCapabilities_ReferencesProvider interface {
	isServerCapabilities_ReferencesProvider()
}

type ServerCapabilities_EnableReferencesProvider struct {
	EnableReferencesProvider bool `protobuf:"varint,18,opt,name=enable_references_provider,json=enableReferencesProvider,proto3,oneof"`
}

type ServerCapabilities_ReferenceOptions struct {
	ReferenceOptions *ReferenceOptions `protobuf:"bytes,19,opt,name=reference_options,json=referenceOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableReferencesProvider) isServerCapabilities_ReferencesProvider() {}

func (*ServerCapabilities_ReferenceOptions) isServerCapabilities_ReferencesProvider() {}

type isServerCapabilities_DocumentHighlightProvider interface {
	isServerCapabilities_DocumentHighlightProvider()
}

type ServerCapabilities_EnableDocumentHighlightProvider struct {
	EnableDocumentHighlightProvider bool `protobuf:"varint,20,opt,name=enable_document_highlight_provider,json=enableDocumentHighlightProvider,proto3,oneof"`
}

type ServerCapabilities_DocumentHighlightOptions struct {
	DocumentHighlightOptions *DocumentHighlightOptions `protobuf:"bytes,21,opt,name=document_highlight_options,json=documentHighlightOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableDocumentHighlightProvider) isServerCapabilities_DocumentHighlightProvider() {
}

func (*ServerCapabilities_DocumentHighlightOptions) isServerCapabilities_DocumentHighlightProvider() {
}

type isServerCapabilities_DocumentSymbolProvider interface {
	isServerCapabilities_DocumentSymbolProvider()
}

type ServerCapabilities_EnableDocumentSymbolProvider struct {
	EnableDocumentSymbolProvider bool `protobuf:"varint,22,opt,name=enable_document_symbol_provider,json=enableDocumentSymbolProvider,proto3,oneof"`
}

type ServerCapabilities_DocumentSymbolOptions struct {
	DocumentSymbolOptions *DocumentSymbolOptions `protobuf:"bytes,23,opt,name=document_symbol_options,json=documentSymbolOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableDocumentSymbolProvider) isServerCapabilities_DocumentSymbolProvider() {
}

func (*ServerCapabilities_DocumentSymbolOptions) isServerCapabilities_DocumentSymbolProvider() {}

type isServerCapabilities_CodeActionProvider interface {
	isServerCapabilities_CodeActionProvider()
}

type ServerCapabilities_EnableCodeActionProvider struct {
	EnableCodeActionProvider bool `protobuf:"varint,24,opt,name=enable_code_action_provider,json=enableCodeActionProvider,proto3,oneof"`
}

type ServerCapabilities_CodeActionOptions struct {
	CodeActionOptions *CodeActionOptions `protobuf:"bytes,25,opt,name=code_action_options,json=codeActionOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableCodeActionProvider) isServerCapabilities_CodeActionProvider() {}

func (*ServerCapabilities_CodeActionOptions) isServerCapabilities_CodeActionProvider() {}

type isServerCapabilities_ColorProvider interface {
	isServerCapabilities_ColorProvider()
}

type ServerCapabilities_EnableColorProvider struct {
	EnableColorProvider bool `protobuf:"varint,28,opt,name=enable_color_provider,json=enableColorProvider,proto3,oneof"`
}

type ServerCapabilities_DocumentColorOptions struct {
	DocumentColorOptions *DocumentColorOptions `protobuf:"bytes,29,opt,name=document_color_options,json=documentColorOptions,proto3,oneof"`
}

type ServerCapabilities_DocumentColorRegistrationOptions struct {
	DocumentColorRegistrationOptions *DocumentColorRegistrationOptions `protobuf:"bytes,30,opt,name=document_color_registration_options,json=documentColorRegistrationOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableColorProvider) isServerCapabilities_ColorProvider() {}

func (*ServerCapabilities_DocumentColorOptions) isServerCapabilities_ColorProvider() {}

func (*ServerCapabilities_DocumentColorRegistrationOptions) isServerCapabilities_ColorProvider() {}

type isServerCapabilities_DocumentFormattingProvider interface {
	isServerCapabilities_DocumentFormattingProvider()
}

type ServerCapabilities_EnableDocumentFormattingProvider struct {
	EnableDocumentFormattingProvider bool `protobuf:"varint,31,opt,name=enable_document_formatting_provider,json=enableDocumentFormattingProvider,proto3,oneof"`
}

type ServerCapabilities_DocumentFormattingOptions struct {
	DocumentFormattingOptions *DocumentFormattingOptions `protobuf:"bytes,32,opt,name=document_formatting_options,json=documentFormattingOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableDocumentFormattingProvider) isServerCapabilities_DocumentFormattingProvider() {
}

func (*ServerCapabilities_DocumentFormattingOptions) isServerCapabilities_DocumentFormattingProvider() {
}

type isServerCapabilities_DocumentRangeFormattingProvider interface {
	isServerCapabilities_DocumentRangeFormattingProvider()
}

type ServerCapabilities_EnableDocumentRangeFormattingProvider struct {
	EnableDocumentRangeFormattingProvider bool `protobuf:"varint,33,opt,name=enable_document_range_formatting_provider,json=enableDocumentRangeFormattingProvider,proto3,oneof"`
}

type ServerCapabilities_DocumentRangeFormattingOptions struct {
	DocumentRangeFormattingOptions *DocumentRangeFormattingOptions `protobuf:"bytes,34,opt,name=document_range_formatting_options,json=documentRangeFormattingOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableDocumentRangeFormattingProvider) isServerCapabilities_DocumentRangeFormattingProvider() {
}

func (*ServerCapabilities_DocumentRangeFormattingOptions) isServerCapabilities_DocumentRangeFormattingProvider() {
}

type isServerCapabilities_RenameProvider interface {
	isServerCapabilities_RenameProvider()
}

type ServerCapabilities_EnableRenameProvider struct {
	EnableRenameProvider bool `protobuf:"varint,36,opt,name=enable_rename_provider,json=enableRenameProvider,proto3,oneof"`
}

type ServerCapabilities_RenameOptions struct {
	RenameOptions *RenameOptions `protobuf:"bytes,37,opt,name=rename_options,json=renameOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableRenameProvider) isServerCapabilities_RenameProvider() {}

func (*ServerCapabilities_RenameOptions) isServerCapabilities_RenameProvider() {}

type isServerCapabilities_FoldingRangeProvider interface {
	isServerCapabilities_FoldingRangeProvider()
}

type ServerCapabilities_EnableFoldingRangeProvider struct {
	EnableFoldingRangeProvider bool `protobuf:"varint,38,opt,name=enable_folding_range_provider,json=enableFoldingRangeProvider,proto3,oneof"`
}

type ServerCapabilities_FoldingRangeOptions struct {
	FoldingRangeOptions *FoldingRangeOptions `protobuf:"bytes,39,opt,name=folding_range_options,json=foldingRangeOptions,proto3,oneof"`
}

type ServerCapabilities_FoldingRangeRegistrationOptions struct {
	FoldingRangeRegistrationOptions *FoldingRangeRegistrationOptions `protobuf:"bytes,40,opt,name=folding_range_registration_options,json=foldingRangeRegistrationOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableFoldingRangeProvider) isServerCapabilities_FoldingRangeProvider() {}

func (*ServerCapabilities_FoldingRangeOptions) isServerCapabilities_FoldingRangeProvider() {}

func (*ServerCapabilities_FoldingRangeRegistrationOptions) isServerCapabilities_FoldingRangeProvider() {
}

type isServerCapabilities_SelectionRangeProvider interface {
	isServerCapabilities_SelectionRangeProvider()
}

type ServerCapabilities_EnableSelectionRangeProvider struct {
	EnableSelectionRangeProvider bool `protobuf:"varint,42,opt,name=enable_selection_range_provider,json=enableSelectionRangeProvider,proto3,oneof"`
}

type ServerCapabilities_SelectionRangeOptions struct {
	SelectionRangeOptions *SelectionRangeOptions `protobuf:"bytes,43,opt,name=selection_range_options,json=selectionRangeOptions,proto3,oneof"`
}

type ServerCapabilities_SelectionRangeRegistrationOptions struct {
	SelectionRangeRegistrationOptions *SelectionRangeRegistrationOptions `protobuf:"bytes,44,opt,name=selection_range_registration_options,json=selectionRangeRegistrationOptions,proto3,oneof"`
}

func (*ServerCapabilities_EnableSelectionRangeProvider) isServerCapabilities_SelectionRangeProvider() {
}

func (*ServerCapabilities_SelectionRangeOptions) isServerCapabilities_SelectionRangeProvider() {}

func (*ServerCapabilities_SelectionRangeRegistrationOptions) isServerCapabilities_SelectionRangeProvider() {
}

// ShowMessageRequestParams represents a `window/showMessage` notification params.
type ShowMessageRequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message type. See [MessageType][MessageType].
	Type MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.rpc.MessageType" json:"type,omitempty"`
	// The actual message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ShowMessageRequestParams) Reset() {
	*x = ShowMessageRequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowMessageRequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowMessageRequestParams) ProtoMessage() {}

func (x *ShowMessageRequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowMessageRequestParams.ProtoReflect.Descriptor instead.
func (*ShowMessageRequestParams) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{56}
}

func (x *ShowMessageRequestParams) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *ShowMessageRequestParams) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// MessageActionItem is the message action items to present.
type MessageActionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A short title like 'Retry', 'Open Log' etc.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *MessageActionItem) Reset() {
	*x = MessageActionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActionItem) ProtoMessage() {}

func (x *MessageActionItem) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActionItem.ProtoReflect.Descriptor instead.
func (*MessageActionItem) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{57}
}

func (x *MessageActionItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// ShowMessageRequestRequest represents a `window/showMessageRequest` request params.
type ShowMessageRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message type. See [MessageType][MessageType].
	Type MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.rpc.MessageType" json:"type,omitempty"`
	// The actual message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The message action items to present.
	Actions []*MessageActionItem `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *ShowMessageRequestRequest) Reset() {
	*x = ShowMessageRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowMessageRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowMessageRequestRequest) ProtoMessage() {}

func (x *ShowMessageRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowMessageRequestRequest.ProtoReflect.Descriptor instead.
func (*ShowMessageRequestRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{58}
}

func (x *ShowMessageRequestRequest) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *ShowMessageRequestRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ShowMessageRequestRequest) GetActions() []*MessageActionItem {
	if x != nil {
		return x.Actions
	}
	return nil
}

// LogMessageRequest represents a notification params.
type LogMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message type. See [MessageType][MessageType].
	Type MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.rpc.MessageType" json:"type,omitempty"`
	// The actual message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogMessageRequest) Reset() {
	*x = LogMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessageRequest) ProtoMessage() {}

func (x *LogMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessageRequest.ProtoReflect.Descriptor instead.
func (*LogMessageRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{59}
}

func (x *LogMessageRequest) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *LogMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// WorkDoneProgressCreateRequest represents a Creating Work Done Progress request params.
type WorkDoneProgressCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token to be used to report progress.
	Token *ProgressToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *WorkDoneProgressCreateRequest) Reset() {
	*x = WorkDoneProgressCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkDoneProgressCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkDoneProgressCreateRequest) ProtoMessage() {}

func (x *WorkDoneProgressCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkDoneProgressCreateRequest.ProtoReflect.Descriptor instead.
func (*WorkDoneProgressCreateRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{60}
}

func (x *WorkDoneProgressCreateRequest) GetToken() *ProgressToken {
	if x != nil {
		return x.Token
	}
	return nil
}

// WorkDoneProgressCancelRequest represents a canceling a work done progress notification params.
type WorkDoneProgressCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token to be used to report progress.
	Token *ProgressToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *WorkDoneProgressCancelRequest) Reset() {
	*x = WorkDoneProgressCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkDoneProgressCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkDoneProgressCancelRequest) ProtoMessage() {}

func (x *WorkDoneProgressCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkDoneProgressCancelRequest.ProtoReflect.Descriptor instead.
func (*WorkDoneProgressCancelRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{61}
}

func (x *WorkDoneProgressCancelRequest) GetToken() *ProgressToken {
	if x != nil {
		return x.Token
	}
	return nil
}

// TelemetryParams represents a `telemetry/event` notification params.
type TelemetryParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional.
	Params *anypb.Any `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *TelemetryParams) Reset() {
	*x = TelemetryParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryParams) ProtoMessage() {}

func (x *TelemetryParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryParams.ProtoReflect.Descriptor instead.
func (*TelemetryParams) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{62}
}

func (x *TelemetryParams) GetParams() *anypb.Any {
	if x != nil {
		return x.Params
	}
	return nil
}

// Registration is the general parameters to register for a capability.
type Registration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id used to register the request. The id can be used to deregister
	// the request again.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The method / capability to register for.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// Options necessary for the registration.
	RegisterOptions *anypb.Any `protobuf:"bytes,3,opt,name=register_options,json=registerOptions,proto3" json:"register_options,omitempty"`
}

func (x *Registration) Reset() {
	*x = Registration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{63}
}

func (x *Registration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Registration) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Registration) GetRegisterOptions() *anypb.Any {
	if x != nil {
		return x.RegisterOptions
	}
	return nil
}

// RegistrationParams represents a `client/registerCapability` request params.
type RegistrationParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registrations []*Registration `protobuf:"bytes,1,rep,name=registrations,proto3" json:"registrations,omitempty"`
}

func (x *RegistrationParams) Reset() {
	*x = RegistrationParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationParams) ProtoMessage() {}

func (x *RegistrationParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationParams.ProtoReflect.Descriptor instead.
func (*RegistrationParams) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{64}
}

func (x *RegistrationParams) GetRegistrations() []*Registration {
	if x != nil {
		return x.Registrations
	}
	return nil
}

// Unregistration is the general parameters to unregister a capability.
type Unregistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id used to unregister the request or notification. Usually an id
	// provided during the register request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The method / capability to unregister for.
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *Unregistration) Reset() {
	*x = Unregistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unregistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unregistration) ProtoMessage() {}

func (x *Unregistration) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unregistration.ProtoReflect.Descriptor instead.
func (*Unregistration) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{65}
}

func (x *Unregistration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Unregistration) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

// UnregistrationParams represents a `client/unregisterCapability` request params.
type UnregistrationParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This should correctly be named `unregistrations`. However changing this
	// is a breaking change and needs to wait until we deliver a 4.x version
	// of the specification.
	Unregisterations []*Unregistration `protobuf:"bytes,1,rep,name=unregisterations,proto3" json:"unregisterations,omitempty"`
}

func (x *UnregistrationParams) Reset() {
	*x = UnregistrationParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregistrationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregistrationParams) ProtoMessage() {}

func (x *UnregistrationParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregistrationParams.ProtoReflect.Descriptor instead.
func (*UnregistrationParams) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{66}
}

func (x *UnregistrationParams) GetUnregisterations() []*Unregistration {
	if x != nil {
		return x.Unregisterations
	}
	return nil
}

// WorkspaceFoldersServerCapabilities is the an additional property of
// InitializeRequest.workspaceFolders.
type WorkspaceFoldersServerCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The server has support for workspace folders
	Supported bool `protobuf:"varint,1,opt,name=supported,proto3" json:"supported,omitempty"`
	// Whether the server wants to receive workspace folder
	// change notifications.
	//
	// If a string is provided, the string is treated as an ID
	// under which the notification is registered on the client
	// side. The ID can be used to unregister for these events
	// using the `client/unregisterCapability` request.
	//
	// Types that are assignable to ChangeNotifications:
	//	*WorkspaceFoldersServerCapabilities_Id
	//	*WorkspaceFoldersServerCapabilities_Enable
	ChangeNotifications isWorkspaceFoldersServerCapabilities_ChangeNotifications `protobuf_oneof:"change_notifications"`
}

func (x *WorkspaceFoldersServerCapabilities) Reset() {
	*x = WorkspaceFoldersServerCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceFoldersServerCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceFoldersServerCapabilities) ProtoMessage() {}

func (x *WorkspaceFoldersServerCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceFoldersServerCapabilities.ProtoReflect.Descriptor instead.
func (*WorkspaceFoldersServerCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{67}
}

func (x *WorkspaceFoldersServerCapabilities) GetSupported() bool {
	if x != nil {
		return x.Supported
	}
	return false
}

func (m *WorkspaceFoldersServerCapabilities) GetChangeNotifications() isWorkspaceFoldersServerCapabilities_ChangeNotifications {
	if m != nil {
		return m.ChangeNotifications
	}
	return nil
}

func (x *WorkspaceFoldersServerCapabilities) GetId() string {
	if x, ok := x.GetChangeNotifications().(*WorkspaceFoldersServerCapabilities_Id); ok {
		return x.Id
	}
	return ""
}

func (x *WorkspaceFoldersServerCapabilities) GetEnable() bool {
	if x, ok := x.GetChangeNotifications().(*WorkspaceFoldersServerCapabilities_Enable); ok {
		return x.Enable
	}
	return false
}

type isWorkspaceFoldersServerCapabilities_ChangeNotifications interface {
	isWorkspaceFoldersServerCapabilities_ChangeNotifications()
}

type WorkspaceFoldersServerCapabilities_Id struct {
	// The id of registered notification.
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

type WorkspaceFoldersServerCapabilities_Enable struct {
	// Whether the enable change notifications.
	Enable bool `protobuf:"varint,3,opt,name=enable,proto3,oneof"`
}

func (*WorkspaceFoldersServerCapabilities_Id) isWorkspaceFoldersServerCapabilities_ChangeNotifications() {
}

func (*WorkspaceFoldersServerCapabilities_Enable) isWorkspaceFoldersServerCapabilities_ChangeNotifications() {
}

// WorkspaceFolder represents a workspace root folder.
// (-- api-linter: core::0123::resource-annotation=disabled --)
type WorkspaceFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The associated URI for this workspace folder.
	Uri *protocol.DocumentURI `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// The name of the workspace folder. Used to refer to this
	// workspace folder in the user interface.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WorkspaceFolder) Reset() {
	*x = WorkspaceFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceFolder) ProtoMessage() {}

func (x *WorkspaceFolder) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceFolder.ProtoReflect.Descriptor instead.
func (*WorkspaceFolder) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{68}
}

func (x *WorkspaceFolder) GetUri() *protocol.DocumentURI {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *WorkspaceFolder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// WorkspaceFoldersChangeEvent is the workspace folder change event.
type WorkspaceFoldersChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The array of added workspace folders.
	Added []*WorkspaceFolder `protobuf:"bytes,1,rep,name=added,proto3" json:"added,omitempty"`
	// The array of the removed workspace folders.
	Removed []*WorkspaceFolder `protobuf:"bytes,2,rep,name=removed,proto3" json:"removed,omitempty"`
}

func (x *WorkspaceFoldersChangeEvent) Reset() {
	*x = WorkspaceFoldersChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceFoldersChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceFoldersChangeEvent) ProtoMessage() {}

func (x *WorkspaceFoldersChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceFoldersChangeEvent.ProtoReflect.Descriptor instead.
func (*WorkspaceFoldersChangeEvent) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{69}
}

func (x *WorkspaceFoldersChangeEvent) GetAdded() []*WorkspaceFolder {
	if x != nil {
		return x.Added
	}
	return nil
}

func (x *WorkspaceFoldersChangeEvent) GetRemoved() []*WorkspaceFolder {
	if x != nil {
		return x.Removed
	}
	return nil
}

// DidChangeWorkspaceFoldersRequest represents a `workspace/didChangeWorkspaceFolders` notification
// params.
type DidChangeWorkspaceFoldersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual workspace folder change event.
	Event *WorkspaceFoldersChangeEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *DidChangeWorkspaceFoldersRequest) Reset() {
	*x = DidChangeWorkspaceFoldersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidChangeWorkspaceFoldersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidChangeWorkspaceFoldersRequest) ProtoMessage() {}

func (x *DidChangeWorkspaceFoldersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidChangeWorkspaceFoldersRequest.ProtoReflect.Descriptor instead.
func (*DidChangeWorkspaceFoldersRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{70}
}

func (x *DidChangeWorkspaceFoldersRequest) GetEvent() *WorkspaceFoldersChangeEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

// DidChangeConfigurationClientCapabilities represents a client capabilities of
// `workspace/didChangeConfiguration` notification.
type DidChangeConfigurationClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Did change configuration notification supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *DidChangeConfigurationClientCapabilities) Reset() {
	*x = DidChangeConfigurationClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidChangeConfigurationClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidChangeConfigurationClientCapabilities) ProtoMessage() {}

func (x *DidChangeConfigurationClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidChangeConfigurationClientCapabilities.ProtoReflect.Descriptor instead.
func (*DidChangeConfigurationClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{71}
}

func (x *DidChangeConfigurationClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// DidChangeConfigurationRequest represents a `workspace/didChangeConfiguration` notification
// params.
type DidChangeConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual changed settings
	Settings *anypb.Any `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *DidChangeConfigurationRequest) Reset() {
	*x = DidChangeConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidChangeConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidChangeConfigurationRequest) ProtoMessage() {}

func (x *DidChangeConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidChangeConfigurationRequest.ProtoReflect.Descriptor instead.
func (*DidChangeConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{72}
}

func (x *DidChangeConfigurationRequest) GetSettings() *anypb.Any {
	if x != nil {
		return x.Settings
	}
	return nil
}

// ConfigurationItem represents a configuration section to ask for and an additional scope URI.
type ConfigurationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scope to get the configuration section for.
	ScopeUri *protocol.DocumentURI `protobuf:"bytes,1,opt,name=scope_uri,json=scopeUri,proto3" json:"scope_uri,omitempty"`
	// The configuration section asked for.
	Section *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=section,proto3" json:"section,omitempty"`
}

func (x *ConfigurationItem) Reset() {
	*x = ConfigurationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationItem) ProtoMessage() {}

func (x *ConfigurationItem) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationItem.ProtoReflect.Descriptor instead.
func (*ConfigurationItem) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{73}
}

func (x *ConfigurationItem) GetScopeUri() *protocol.DocumentURI {
	if x != nil {
		return x.ScopeUri
	}
	return nil
}

func (x *ConfigurationItem) GetSection() *wrapperspb.StringValue {
	if x != nil {
		return x.Section
	}
	return nil
}

// ConfigurationRequest represents a Configuration request params.
//
// @since 3.6.0
type ConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ConfigurationItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ConfigurationRequest) Reset() {
	*x = ConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationRequest) ProtoMessage() {}

func (x *ConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{74}
}

func (x *ConfigurationRequest) GetItems() []*ConfigurationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// DidChangeWatchedFilesClientCapabilities represents a client capabilities of
// `workspace/didChangeWatchedFiles` notification.
type DidChangeWatchedFilesClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Did change watched files notification supports dynamic registration. Please note
	// that the current protocol doesn't support static configuration for file changes
	// from the server side.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *DidChangeWatchedFilesClientCapabilities) Reset() {
	*x = DidChangeWatchedFilesClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidChangeWatchedFilesClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidChangeWatchedFilesClientCapabilities) ProtoMessage() {}

func (x *DidChangeWatchedFilesClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidChangeWatchedFilesClientCapabilities.ProtoReflect.Descriptor instead.
func (*DidChangeWatchedFilesClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{75}
}

func (x *DidChangeWatchedFilesClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// FileSystemWatcher represents a watcher of file system.
type FileSystemWatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The  glob pattern to watch.
	//
	// Glob patterns can have the following syntax:
	// - `*` to match one or more characters in a path segment
	// - `?` to match on one character in a path segment
	// - `**` to match any number of path segments, including none
	// - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
	// - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to
	// match on `example.0`, `example.1`, …)
	// - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]`
	// to match on `example.a`, `example.b`, but not `example.0`)
	GlobPattern string `protobuf:"bytes,1,opt,name=glob_pattern,json=globPattern,proto3" json:"glob_pattern,omitempty"`
	// Optional. The kind of events of interest. If omitted it defaults
	// to follows which is 7.
	//
	//  WatchKind.CREATE | WatchKind.CHANGE | WatchKind.DELETE
	Kind FileSystemWatcher_WatchKind `protobuf:"varint,2,opt,name=kind,proto3,enum=protocol.rpc.FileSystemWatcher_WatchKind" json:"kind,omitempty"`
}

func (x *FileSystemWatcher) Reset() {
	*x = FileSystemWatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSystemWatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSystemWatcher) ProtoMessage() {}

func (x *FileSystemWatcher) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSystemWatcher.ProtoReflect.Descriptor instead.
func (*FileSystemWatcher) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{76}
}

func (x *FileSystemWatcher) GetGlobPattern() string {
	if x != nil {
		return x.GlobPattern
	}
	return ""
}

func (x *FileSystemWatcher) GetKind() FileSystemWatcher_WatchKind {
	if x != nil {
		return x.Kind
	}
	return FileSystemWatcher_WATCH_KIND_UNSPECIFIED
}

// DidChangeWatchedFilesRegistrationOptions describe options to be used when registering for file
// system change events.
type DidChangeWatchedFilesRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The watchers to register.
	Watchers []*FileSystemWatcher `protobuf:"bytes,1,rep,name=watchers,proto3" json:"watchers,omitempty"`
}

func (x *DidChangeWatchedFilesRegistrationOptions) Reset() {
	*x = DidChangeWatchedFilesRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidChangeWatchedFilesRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidChangeWatchedFilesRegistrationOptions) ProtoMessage() {}

func (x *DidChangeWatchedFilesRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidChangeWatchedFilesRegistrationOptions.ProtoReflect.Descriptor instead.
func (*DidChangeWatchedFilesRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{77}
}

func (x *DidChangeWatchedFilesRegistrationOptions) GetWatchers() []*FileSystemWatcher {
	if x != nil {
		return x.Watchers
	}
	return nil
}

// FileEvent an event describing a file change.
type FileEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The file's URI.
	Uri *protocol.DocumentURI `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// The change type.
	Type FileEvent_FileChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=protocol.rpc.FileEvent_FileChangeType" json:"type,omitempty"`
}

func (x *FileEvent) Reset() {
	*x = FileEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileEvent) ProtoMessage() {}

func (x *FileEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileEvent.ProtoReflect.Descriptor instead.
func (*FileEvent) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{78}
}

func (x *FileEvent) GetUri() *protocol.DocumentURI {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *FileEvent) GetType() FileEvent_FileChangeType {
	if x != nil {
		return x.Type
	}
	return FileEvent_FILE_CHANGE_TYPE_UNSPECIFIED
}

// DidChangeWatchedFilesRequest is the parameters of a `workspace/didChangeWatchedFiles`
// notification.
type DidChangeWatchedFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual file events.
	Changes []*FileEvent `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *DidChangeWatchedFilesRequest) Reset() {
	*x = DidChangeWatchedFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidChangeWatchedFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidChangeWatchedFilesRequest) ProtoMessage() {}

func (x *DidChangeWatchedFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidChangeWatchedFilesRequest.ProtoReflect.Descriptor instead.
func (*DidChangeWatchedFilesRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{79}
}

func (x *DidChangeWatchedFilesRequest) GetChanges() []*FileEvent {
	if x != nil {
		return x.Changes
	}
	return nil
}

// WorkspaceSymbolClientCapabilities represents a client capabilities of
// `workspace/symbol` request.
type WorkspaceSymbolClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Symbol request supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
	SymbolKind *WorkspaceSymbolClientCapabilities_SymbolKind `protobuf:"bytes,2,opt,name=symbol_kind,json=symbolKind,proto3" json:"symbol_kind,omitempty"`
}

func (x *WorkspaceSymbolClientCapabilities) Reset() {
	*x = WorkspaceSymbolClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceSymbolClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceSymbolClientCapabilities) ProtoMessage() {}

func (x *WorkspaceSymbolClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceSymbolClientCapabilities.ProtoReflect.Descriptor instead.
func (*WorkspaceSymbolClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{80}
}

func (x *WorkspaceSymbolClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *WorkspaceSymbolClientCapabilities) GetSymbolKind() *WorkspaceSymbolClientCapabilities_SymbolKind {
	if x != nil {
		return x.SymbolKind
	}
	return nil
}

// WorkspaceSymbolParams is the parameters of a `workspace/symbol` request.
type WorkspaceSymbolParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// A query string to filter symbols by. Clients may send an empty
	// string here to request all symbols.
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *WorkspaceSymbolParams) Reset() {
	*x = WorkspaceSymbolParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceSymbolParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceSymbolParams) ProtoMessage() {}

func (x *WorkspaceSymbolParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceSymbolParams.ProtoReflect.Descriptor instead.
func (*WorkspaceSymbolParams) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{81}
}

func (x *WorkspaceSymbolParams) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *WorkspaceSymbolParams) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *WorkspaceSymbolParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// ExecuteCommandClientCapabilities represents a client capabilities of
// `workspace/executeCommand` request.
type ExecuteCommandClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Execute command supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *ExecuteCommandClientCapabilities) Reset() {
	*x = ExecuteCommandClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCommandClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCommandClientCapabilities) ProtoMessage() {}

func (x *ExecuteCommandClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCommandClientCapabilities.ProtoReflect.Descriptor instead.
func (*ExecuteCommandClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{82}
}

func (x *ExecuteCommandClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

type ExecuteCommandOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
	// The commands to be executed on the server
	Commands []string `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *ExecuteCommandOptions) Reset() {
	*x = ExecuteCommandOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCommandOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCommandOptions) ProtoMessage() {}

func (x *ExecuteCommandOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCommandOptions.ProtoReflect.Descriptor instead.
func (*ExecuteCommandOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{83}
}

func (x *ExecuteCommandOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

func (x *ExecuteCommandOptions) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

// ExecuteCommandRegistrationOptions execute command registration options.
type ExecuteCommandRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	ExecuteCommandOptions *ExecuteCommandOptions `protobuf:"bytes,1,opt,name=execute_command_options,json=executeCommandOptions,proto3" json:"execute_command_options,omitempty"`
}

func (x *ExecuteCommandRegistrationOptions) Reset() {
	*x = ExecuteCommandRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCommandRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCommandRegistrationOptions) ProtoMessage() {}

func (x *ExecuteCommandRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCommandRegistrationOptions.ProtoReflect.Descriptor instead.
func (*ExecuteCommandRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{84}
}

func (x *ExecuteCommandRegistrationOptions) GetExecuteCommandOptions() *ExecuteCommandOptions {
	if x != nil {
		return x.ExecuteCommandOptions
	}
	return nil
}

// ExecuteCommandParams is the parameters of a `workspace/executeCommand` request.
type ExecuteCommandParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// The identifier of the actual command handler.
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// Arguments that the command should be invoked with.
	// (-- api-linter: core::0140::reserved-words=disabled --)
	Arguments []*anypb.Any `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ExecuteCommandParams) Reset() {
	*x = ExecuteCommandParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteCommandParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteCommandParams) ProtoMessage() {}

func (x *ExecuteCommandParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteCommandParams.ProtoReflect.Descriptor instead.
func (*ExecuteCommandParams) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{85}
}

func (x *ExecuteCommandParams) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *ExecuteCommandParams) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ExecuteCommandParams) GetArguments() []*anypb.Any {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// ApplyWorkspaceEditRequest is the parameters of a `workspace/applyEdit` request.
type ApplyWorkspaceEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional label of the workspace edit. This label is
	// presented in the user interface for example on an undo
	// stack to undo the workspace edit.
	Label *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// The edits to apply.
	Edit *protocol.WorkspaceEdit `protobuf:"bytes,2,opt,name=edit,proto3" json:"edit,omitempty"`
}

func (x *ApplyWorkspaceEditRequest) Reset() {
	*x = ApplyWorkspaceEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyWorkspaceEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyWorkspaceEditRequest) ProtoMessage() {}

func (x *ApplyWorkspaceEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyWorkspaceEditRequest.ProtoReflect.Descriptor instead.
func (*ApplyWorkspaceEditRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{86}
}

func (x *ApplyWorkspaceEditRequest) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ApplyWorkspaceEditRequest) GetEdit() *protocol.WorkspaceEdit {
	if x != nil {
		return x.Edit
	}
	return nil
}

// ApplyWorkspaceEditResponse is the parameters of a ApplyWorkspaceEdit response.
type ApplyWorkspaceEditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether the edit was applied or not.
	Applied bool `protobuf:"varint,1,opt,name=applied,proto3" json:"applied,omitempty"`
	// An optional textual description for why the edit was not applied.
	// This may be used may be used by the server for diagnostic
	// logging or to provide a suitable error for a request that
	// triggered the edit.
	FailureReason *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *ApplyWorkspaceEditResponse) Reset() {
	*x = ApplyWorkspaceEditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyWorkspaceEditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyWorkspaceEditResponse) ProtoMessage() {}

func (x *ApplyWorkspaceEditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyWorkspaceEditResponse.ProtoReflect.Descriptor instead.
func (*ApplyWorkspaceEditResponse) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{87}
}

func (x *ApplyWorkspaceEditResponse) GetApplied() bool {
	if x != nil {
		return x.Applied
	}
	return false
}

func (x *ApplyWorkspaceEditResponse) GetFailureReason() *wrapperspb.StringValue {
	if x != nil {
		return x.FailureReason
	}
	return nil
}

// TextDocumentSyncOptions represents a server capabilities option of textDocumentSync.
type TextDocumentSyncOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Open and close notifications are sent to the server. If omitted open close
	// notification should not be sent.
	OpenClose bool `protobuf:"varint,1,opt,name=open_close,json=openClose,proto3" json:"open_close,omitempty"`
	// Optional. Change notifications are sent to the server. See
	// [TextDocumentSyncKind][TextDocumentSyncKind]. If omitted it defaults to
	// TextDocumentSyncKind.None.
	Change TextDocumentSyncKind `protobuf:"varint,2,opt,name=change,proto3,enum=protocol.rpc.TextDocumentSyncKind" json:"change,omitempty"`
	// Optional. If present will save notifications are sent to the server. If omitted the
	// notification should not be sent.
	WillSave bool `protobuf:"varint,3,opt,name=will_save,json=willSave,proto3" json:"will_save,omitempty"`
	// Optional. If present will save wait until requests are sent to the server. If omitted the
	// request should not be sent.
	WillSaveWaitUntil bool `protobuf:"varint,4,opt,name=will_save_wait_until,json=willSaveWaitUntil,proto3" json:"will_save_wait_until,omitempty"`
	// If present save notifications are sent to the server. If omitted the notification should not be
	// sent.
	//
	// Types that are assignable to Save:
	//	*TextDocumentSyncOptions_Enable
	//	*TextDocumentSyncOptions_SaveOptions
	Save isTextDocumentSyncOptions_Save `protobuf_oneof:"save"`
}

func (x *TextDocumentSyncOptions) Reset() {
	*x = TextDocumentSyncOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentSyncOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentSyncOptions) ProtoMessage() {}

func (x *TextDocumentSyncOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentSyncOptions.ProtoReflect.Descriptor instead.
func (*TextDocumentSyncOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{88}
}

func (x *TextDocumentSyncOptions) GetOpenClose() bool {
	if x != nil {
		return x.OpenClose
	}
	return false
}

func (x *TextDocumentSyncOptions) GetChange() TextDocumentSyncKind {
	if x != nil {
		return x.Change
	}
	return TextDocumentSyncKind_NONE
}

func (x *TextDocumentSyncOptions) GetWillSave() bool {
	if x != nil {
		return x.WillSave
	}
	return false
}

func (x *TextDocumentSyncOptions) GetWillSaveWaitUntil() bool {
	if x != nil {
		return x.WillSaveWaitUntil
	}
	return false
}

func (m *TextDocumentSyncOptions) GetSave() isTextDocumentSyncOptions_Save {
	if m != nil {
		return m.Save
	}
	return nil
}

func (x *TextDocumentSyncOptions) GetEnable() bool {
	if x, ok := x.GetSave().(*TextDocumentSyncOptions_Enable); ok {
		return x.Enable
	}
	return false
}

func (x *TextDocumentSyncOptions) GetSaveOptions() *SaveOptions {
	if x, ok := x.GetSave().(*TextDocumentSyncOptions_SaveOptions); ok {
		return x.SaveOptions
	}
	return nil
}

type isTextDocumentSyncOptions_Save interface {
	isTextDocumentSyncOptions_Save()
}

type TextDocumentSyncOptions_Enable struct {
	Enable bool `protobuf:"varint,5,opt,name=enable,proto3,oneof"`
}

type TextDocumentSyncOptions_SaveOptions struct {
	SaveOptions *SaveOptions `protobuf:"bytes,6,opt,name=save_options,json=saveOptions,proto3,oneof"`
}

func (*TextDocumentSyncOptions_Enable) isTextDocumentSyncOptions_Save() {}

func (*TextDocumentSyncOptions_SaveOptions) isTextDocumentSyncOptions_Save() {}

// DidOpenTextDocumentRequest is the parameters of a `textDocument/didOpen` notification.
type DidOpenTextDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The document that was opened.
	TextDocument *protocol.TextDocumentItem `protobuf:"bytes,1,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
}

func (x *DidOpenTextDocumentRequest) Reset() {
	*x = DidOpenTextDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidOpenTextDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidOpenTextDocumentRequest) ProtoMessage() {}

func (x *DidOpenTextDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidOpenTextDocumentRequest.ProtoReflect.Descriptor instead.
func (*DidOpenTextDocumentRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{89}
}

func (x *DidOpenTextDocumentRequest) GetTextDocument() *protocol.TextDocumentItem {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

// TextDocumentChangeRegistrationOptions describe options to be used when registering for text
// document change events.
type TextDocumentChangeRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// How documents are synced to the server. See TextDocumentSyncKind.Full
	// and TextDocumentSyncKind.Incremental.
	SyncKind TextDocumentSyncKind `protobuf:"varint,2,opt,name=sync_kind,json=syncKind,proto3,enum=protocol.rpc.TextDocumentSyncKind" json:"sync_kind,omitempty"`
}

func (x *TextDocumentChangeRegistrationOptions) Reset() {
	*x = TextDocumentChangeRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentChangeRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentChangeRegistrationOptions) ProtoMessage() {}

func (x *TextDocumentChangeRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentChangeRegistrationOptions.ProtoReflect.Descriptor instead.
func (*TextDocumentChangeRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{90}
}

func (x *TextDocumentChangeRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *TextDocumentChangeRegistrationOptions) GetSyncKind() TextDocumentSyncKind {
	if x != nil {
		return x.SyncKind
	}
	return TextDocumentSyncKind_NONE
}

// DidChangeTextDocumentRequest is the parameters of a `textDocument/didChange` notification.
type DidChangeTextDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The document that did change. The version number points
	// to the version after all provided content changes have
	// been applied.
	TextDocument *protocol.VersionedTextDocumentIdentifier `protobuf:"bytes,1,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// The actual content changes. The content changes describe single state changes
	// to the document. So if there are two content changes c1 (at array index 0) and
	// c2 (at array index 1) for a document in state S then c1 moves the document from
	// S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
	// on the state S'.
	//
	// To mirror the content of a document using change events use the following approach:
	// - start with the same initial content
	// - apply the 'textDocument/didChange' notifications in the order you receive them.
	// - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
	//   you receive them.
	ContentChanges []*TextDocumentContentChangeEvent `protobuf:"bytes,2,rep,name=content_changes,json=contentChanges,proto3" json:"content_changes,omitempty"`
}

func (x *DidChangeTextDocumentRequest) Reset() {
	*x = DidChangeTextDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidChangeTextDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidChangeTextDocumentRequest) ProtoMessage() {}

func (x *DidChangeTextDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidChangeTextDocumentRequest.ProtoReflect.Descriptor instead.
func (*DidChangeTextDocumentRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{91}
}

func (x *DidChangeTextDocumentRequest) GetTextDocument() *protocol.VersionedTextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *DidChangeTextDocumentRequest) GetContentChanges() []*TextDocumentContentChangeEvent {
	if x != nil {
		return x.ContentChanges
	}
	return nil
}

// TextDocumentContentChangeEvent an event describing a change to a text document. If range and
// rangeLength are omitted the new text is considered to be the full content of the document.
type TextDocumentContentChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TextDocumentContentChangeEvent:
	//	*TextDocumentContentChangeEvent_ContentChangeEvent_
	//	*TextDocumentContentChangeEvent_Text
	TextDocumentContentChangeEvent isTextDocumentContentChangeEvent_TextDocumentContentChangeEvent `protobuf_oneof:"text_document_content_change_event"`
}

func (x *TextDocumentContentChangeEvent) Reset() {
	*x = TextDocumentContentChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentContentChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentContentChangeEvent) ProtoMessage() {}

func (x *TextDocumentContentChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentContentChangeEvent.ProtoReflect.Descriptor instead.
func (*TextDocumentContentChangeEvent) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{92}
}

func (m *TextDocumentContentChangeEvent) GetTextDocumentContentChangeEvent() isTextDocumentContentChangeEvent_TextDocumentContentChangeEvent {
	if m != nil {
		return m.TextDocumentContentChangeEvent
	}
	return nil
}

func (x *TextDocumentContentChangeEvent) GetContentChangeEvent() *TextDocumentContentChangeEvent_ContentChangeEvent {
	if x, ok := x.GetTextDocumentContentChangeEvent().(*TextDocumentContentChangeEvent_ContentChangeEvent_); ok {
		return x.ContentChangeEvent
	}
	return nil
}

func (x *TextDocumentContentChangeEvent) GetText() string {
	if x, ok := x.GetTextDocumentContentChangeEvent().(*TextDocumentContentChangeEvent_Text); ok {
		return x.Text
	}
	return ""
}

type isTextDocumentContentChangeEvent_TextDocumentContentChangeEvent interface {
	isTextDocumentContentChangeEvent_TextDocumentContentChangeEvent()
}

type TextDocumentContentChangeEvent_ContentChangeEvent_ struct {
	ContentChangeEvent *TextDocumentContentChangeEvent_ContentChangeEvent `protobuf:"bytes,1,opt,name=content_change_event,json=contentChangeEvent,proto3,oneof"`
}

type TextDocumentContentChangeEvent_Text struct {
	// The new text of the whole document.
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

func (*TextDocumentContentChangeEvent_ContentChangeEvent_) isTextDocumentContentChangeEvent_TextDocumentContentChangeEvent() {
}

func (*TextDocumentContentChangeEvent_Text) isTextDocumentContentChangeEvent_TextDocumentContentChangeEvent() {
}

// WillSaveTextDocumentRequest is the parameters send in a will save `textDocument/willSave`
// notification.
type WillSaveTextDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The document that will be saved.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,1,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// The [TextDocumentSaveReason][TextDocumentSaveReason].
	Reason TextDocumentSaveReason `protobuf:"varint,2,opt,name=reason,proto3,enum=protocol.rpc.TextDocumentSaveReason" json:"reason,omitempty"`
}

func (x *WillSaveTextDocumentRequest) Reset() {
	*x = WillSaveTextDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WillSaveTextDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WillSaveTextDocumentRequest) ProtoMessage() {}

func (x *WillSaveTextDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WillSaveTextDocumentRequest.ProtoReflect.Descriptor instead.
func (*WillSaveTextDocumentRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{93}
}

func (x *WillSaveTextDocumentRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *WillSaveTextDocumentRequest) GetReason() TextDocumentSaveReason {
	if x != nil {
		return x.Reason
	}
	return TextDocumentSaveReason_TEXT_DOCUMENT_SAVE_REASON_UNSPECIFIED
}

// SaveOptions represents a server capabilities option of textDocumentSync.save.
type SaveOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The client is supposed to include the content on save.
	IncludeText bool `protobuf:"varint,1,opt,name=include_text,json=includeText,proto3" json:"include_text,omitempty"`
}

func (x *SaveOptions) Reset() {
	*x = SaveOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveOptions) ProtoMessage() {}

func (x *SaveOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveOptions.ProtoReflect.Descriptor instead.
func (*SaveOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{94}
}

func (x *SaveOptions) GetIncludeText() bool {
	if x != nil {
		return x.IncludeText
	}
	return false
}

// TextDocumentSaveRegistrationOptions represents a registration option of TextDocumentSave.
type TextDocumentSaveRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// Optional. The client is supposed to include the content on save.
	IncludeText bool `protobuf:"varint,2,opt,name=include_text,json=includeText,proto3" json:"include_text,omitempty"`
}

func (x *TextDocumentSaveRegistrationOptions) Reset() {
	*x = TextDocumentSaveRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentSaveRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentSaveRegistrationOptions) ProtoMessage() {}

func (x *TextDocumentSaveRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentSaveRegistrationOptions.ProtoReflect.Descriptor instead.
func (*TextDocumentSaveRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{95}
}

func (x *TextDocumentSaveRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *TextDocumentSaveRegistrationOptions) GetIncludeText() bool {
	if x != nil {
		return x.IncludeText
	}
	return false
}

// DidSaveTextDocumentRequest is the parameters of a `textDocument/didSave` notification.
type DidSaveTextDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The document that was saved.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,1,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// Optional the content when saved. Depends on the includeText value
	// when the save notification was requested.
	Text *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *DidSaveTextDocumentRequest) Reset() {
	*x = DidSaveTextDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidSaveTextDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidSaveTextDocumentRequest) ProtoMessage() {}

func (x *DidSaveTextDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidSaveTextDocumentRequest.ProtoReflect.Descriptor instead.
func (*DidSaveTextDocumentRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{96}
}

func (x *DidSaveTextDocumentRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *DidSaveTextDocumentRequest) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

// DidCloseTextDocumentRequest is the parameters of a `textDocument/didClose` notification.
type DidCloseTextDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The document that was closed.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,1,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
}

func (x *DidCloseTextDocumentRequest) Reset() {
	*x = DidCloseTextDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DidCloseTextDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DidCloseTextDocumentRequest) ProtoMessage() {}

func (x *DidCloseTextDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DidCloseTextDocumentRequest.ProtoReflect.Descriptor instead.
func (*DidCloseTextDocumentRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{97}
}

func (x *DidCloseTextDocumentRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

// TextDocumentSyncClientCapabilities represents a client capabilities of `textDocument/didXXX`
// notification.
type TextDocumentSyncClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether text document synchronization supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Optional. The client supports sending will save notifications.
	WillSave bool `protobuf:"varint,2,opt,name=will_save,json=willSave,proto3" json:"will_save,omitempty"`
	// Optional. The client supports sending a will save request and
	// waits for a response providing text edits which will
	// be applied to the document before it is saved.
	WillSaveWaitUntil bool `protobuf:"varint,3,opt,name=will_save_wait_until,json=willSaveWaitUntil,proto3" json:"will_save_wait_until,omitempty"`
	// Optional. The client supports did save notifications.
	DidSave bool `protobuf:"varint,4,opt,name=did_save,json=didSave,proto3" json:"did_save,omitempty"`
}

func (x *TextDocumentSyncClientCapabilities) Reset() {
	*x = TextDocumentSyncClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentSyncClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentSyncClientCapabilities) ProtoMessage() {}

func (x *TextDocumentSyncClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentSyncClientCapabilities.ProtoReflect.Descriptor instead.
func (*TextDocumentSyncClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{98}
}

func (x *TextDocumentSyncClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *TextDocumentSyncClientCapabilities) GetWillSave() bool {
	if x != nil {
		return x.WillSave
	}
	return false
}

func (x *TextDocumentSyncClientCapabilities) GetWillSaveWaitUntil() bool {
	if x != nil {
		return x.WillSaveWaitUntil
	}
	return false
}

func (x *TextDocumentSyncClientCapabilities) GetDidSave() bool {
	if x != nil {
		return x.DidSave
	}
	return false
}

// PublishDiagnosticsClientCapabilities represents a client capabilities of
// `textDocument/publishDiagnostics` notification.
type PublishDiagnosticsClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether the clients accepts diagnostics with related information.
	RelatedInformation bool `protobuf:"varint,1,opt,name=related_information,json=relatedInformation,proto3" json:"related_information,omitempty"`
	// Client supports the tag property to provide meta data about a diagnostic.
	// Clients supporting tags have to handle unknown tags gracefully.
	//
	// @since 3.15.0
	TagSupport *PublishDiagnosticsClientCapabilities_TagSupport `protobuf:"bytes,3,opt,name=tag_support,json=tagSupport,proto3" json:"tag_support,omitempty"`
	// Optional. Whether the client interprets the version property of the
	// `textDocument/publishDiagnostics` notification's parameter.
	//
	// @since 3.15.0
	VersionSupport bool `protobuf:"varint,4,opt,name=version_support,json=versionSupport,proto3" json:"version_support,omitempty"`
}

func (x *PublishDiagnosticsClientCapabilities) Reset() {
	*x = PublishDiagnosticsClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishDiagnosticsClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDiagnosticsClientCapabilities) ProtoMessage() {}

func (x *PublishDiagnosticsClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDiagnosticsClientCapabilities.ProtoReflect.Descriptor instead.
func (*PublishDiagnosticsClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{99}
}

func (x *PublishDiagnosticsClientCapabilities) GetRelatedInformation() bool {
	if x != nil {
		return x.RelatedInformation
	}
	return false
}

func (x *PublishDiagnosticsClientCapabilities) GetTagSupport() *PublishDiagnosticsClientCapabilities_TagSupport {
	if x != nil {
		return x.TagSupport
	}
	return nil
}

func (x *PublishDiagnosticsClientCapabilities) GetVersionSupport() bool {
	if x != nil {
		return x.VersionSupport
	}
	return false
}

// PublishDiagnosticsRequest is the parameters of a `textDocument/publishDiagnostics` notification.
type PublishDiagnosticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URI for which diagnostic information is reported.
	Uri *protocol.DocumentURI `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Optional the version number of the document the diagnostics are published for.
	//
	// @since 3.15.0
	Version int32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// An array of diagnostic information items.
	Diagnostics []*protocol.Diagnostic `protobuf:"bytes,3,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *PublishDiagnosticsRequest) Reset() {
	*x = PublishDiagnosticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishDiagnosticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDiagnosticsRequest) ProtoMessage() {}

func (x *PublishDiagnosticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDiagnosticsRequest.ProtoReflect.Descriptor instead.
func (*PublishDiagnosticsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{100}
}

func (x *PublishDiagnosticsRequest) GetUri() *protocol.DocumentURI {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *PublishDiagnosticsRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PublishDiagnosticsRequest) GetDiagnostics() []*protocol.Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// CompletionClientCapabilities represents a client capabilities of
// `textDocument/completion` request.
type CompletionClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether completion supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// The client supports the following `CompletionItem` specific
	// capabilities.
	CompletionItem     *CompletionClientCapabilities_CompletionItem     `protobuf:"bytes,2,opt,name=completion_item,json=completionItem,proto3" json:"completion_item,omitempty"`
	CompletionItemKind *CompletionClientCapabilities_CompletionItemKind `protobuf:"bytes,3,opt,name=completion_item_kind,json=completionItemKind,proto3" json:"completion_item_kind,omitempty"`
	// Optional. The client supports to send additional context information for a
	// `textDocument/completion` request.
	ContextSupport bool `protobuf:"varint,4,opt,name=context_support,json=contextSupport,proto3" json:"context_support,omitempty"`
}

func (x *CompletionClientCapabilities) Reset() {
	*x = CompletionClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionClientCapabilities) ProtoMessage() {}

func (x *CompletionClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionClientCapabilities.ProtoReflect.Descriptor instead.
func (*CompletionClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{101}
}

func (x *CompletionClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *CompletionClientCapabilities) GetCompletionItem() *CompletionClientCapabilities_CompletionItem {
	if x != nil {
		return x.CompletionItem
	}
	return nil
}

func (x *CompletionClientCapabilities) GetCompletionItemKind() *CompletionClientCapabilities_CompletionItemKind {
	if x != nil {
		return x.CompletionItemKind
	}
	return nil
}

func (x *CompletionClientCapabilities) GetContextSupport() bool {
	if x != nil {
		return x.ContextSupport
	}
	return false
}

// CompletionOptions represents a server capabilities option of completionProvider.
type CompletionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
	// Most tools trigger completion request automatically without explicitly requesting
	// it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
	// starts to type an identifier. For example if the user types `c` in a JavaScript file
	// code complete will automatically pop up present `console` besides others as a
	// completion item. Characters that make up identifiers don't need to be listed here.
	//
	// If code complete should automatically be trigger on characters not being valid inside
	// an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.
	TriggerCharacters []string `protobuf:"bytes,2,rep,name=trigger_characters,json=triggerCharacters,proto3" json:"trigger_characters,omitempty"`
	// The list of all possible characters that commit a completion. This field can be used
	// if clients don't support individual commit characters per completion item. See
	// `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`.
	//
	// If a server provides both `allCommitCharacters` and commit characters on an individual
	// completion item the ones on the completion item win.
	//
	// @since 3.2.0
	AllCommitCharacters []string `protobuf:"bytes,3,rep,name=all_commit_characters,json=allCommitCharacters,proto3" json:"all_commit_characters,omitempty"`
	// Optional. The server provides support to resolve additional
	// information for a completion item.
	ResolveProvider bool `protobuf:"varint,4,opt,name=resolve_provider,json=resolveProvider,proto3" json:"resolve_provider,omitempty"`
}

func (x *CompletionOptions) Reset() {
	*x = CompletionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionOptions) ProtoMessage() {}

func (x *CompletionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionOptions.ProtoReflect.Descriptor instead.
func (*CompletionOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{102}
}

func (x *CompletionOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

func (x *CompletionOptions) GetTriggerCharacters() []string {
	if x != nil {
		return x.TriggerCharacters
	}
	return nil
}

func (x *CompletionOptions) GetAllCommitCharacters() []string {
	if x != nil {
		return x.AllCommitCharacters
	}
	return nil
}

func (x *CompletionOptions) GetResolveProvider() bool {
	if x != nil {
		return x.ResolveProvider
	}
	return false
}

// CompletionRegistrationOptions represents a registration option of Completion.
type CompletionRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	CompletionOptions *CompletionOptions `protobuf:"bytes,2,opt,name=completion_options,json=completionOptions,proto3" json:"completion_options,omitempty"`
}

func (x *CompletionRegistrationOptions) Reset() {
	*x = CompletionRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionRegistrationOptions) ProtoMessage() {}

func (x *CompletionRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionRegistrationOptions.ProtoReflect.Descriptor instead.
func (*CompletionRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{103}
}

func (x *CompletionRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *CompletionRegistrationOptions) GetCompletionOptions() *CompletionOptions {
	if x != nil {
		return x.CompletionOptions
	}
	return nil
}

// CompletionRequest is the parameters of a `textDocument/completion` request.
type CompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,3,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The completion context. This is only available if the client specifies
	// to send this using `ClientCapabilities.textDocument.completion.contextSupport === true`
	Context *CompletionContext `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *CompletionRequest) Reset() {
	*x = CompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionRequest) ProtoMessage() {}

func (x *CompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionRequest.ProtoReflect.Descriptor instead.
func (*CompletionRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{104}
}

func (x *CompletionRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *CompletionRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *CompletionRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *CompletionRequest) GetContext() *CompletionContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// CompletionContext contains additional information about the context in which a completion request
// is triggered.
type CompletionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How the completion was triggered.
	TriggerKind CompletionTriggerKind `protobuf:"varint,1,opt,name=trigger_kind,json=triggerKind,proto3,enum=protocol.rpc.CompletionTriggerKind" json:"trigger_kind,omitempty"`
	// The trigger character (a single character) that has trigger code complete.
	// Is undefined if `triggerKind !== CompletionTriggerKind.TriggerCharacter`
	TriggerCharacter *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=trigger_character,json=triggerCharacter,proto3" json:"trigger_character,omitempty"`
}

func (x *CompletionContext) Reset() {
	*x = CompletionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionContext) ProtoMessage() {}

func (x *CompletionContext) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionContext.ProtoReflect.Descriptor instead.
func (*CompletionContext) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{105}
}

func (x *CompletionContext) GetTriggerKind() CompletionTriggerKind {
	if x != nil {
		return x.TriggerKind
	}
	return CompletionTriggerKind_COMPLETION_TRIGGER_KIND_UNSPECIFIED
}

func (x *CompletionContext) GetTriggerCharacter() *wrapperspb.StringValue {
	if x != nil {
		return x.TriggerCharacter
	}
	return nil
}

// CompletionList represents a collection of [completion items](#CompletionItem) to be presented
// in the editor.
type CompletionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. This list it not complete. Further typing should result in recomputing
	// this list.
	IsIncomplete bool `protobuf:"varint,1,opt,name=is_incomplete,json=isIncomplete,proto3" json:"is_incomplete,omitempty"`
	// The completion items.
	Items []*CompletionItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CompletionList) Reset() {
	*x = CompletionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionList) ProtoMessage() {}

func (x *CompletionList) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionList.ProtoReflect.Descriptor instead.
func (*CompletionList) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{106}
}

func (x *CompletionList) GetIsIncomplete() bool {
	if x != nil {
		return x.IsIncomplete
	}
	return false
}

func (x *CompletionList) GetItems() []*CompletionItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// CompletionItem is the completion items.
type CompletionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label of this completion item. By default
	// also the text that is inserted when selecting
	// this completion.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// The kind of this completion item. Based of the kind
	// an icon is chosen by the editor. The standardized set
	// of available values is defined in `CompletionItemKind`.
	Kind CompletionItemKind `protobuf:"varint,2,opt,name=kind,proto3,enum=protocol.rpc.CompletionItemKind" json:"kind,omitempty"`
	// Tags for this completion item.
	//
	// @since 3.15.0
	Tags []CompletionItemTag `protobuf:"varint,3,rep,packed,name=tags,proto3,enum=protocol.rpc.CompletionItemTag" json:"tags,omitempty"`
	// A human-readable string with additional information
	// about this item, like type or symbol information.
	Detail *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	// A human-readable string that represents a doc-comment.
	//
	// Types that are assignable to Documentation:
	//	*CompletionItem_MarkupContent
	//	*CompletionItem_Content
	Documentation isCompletionItem_Documentation `protobuf_oneof:"documentation"`
	// Indicates if this item is deprecated.
	//
	// Use tags instead if supported.
	//
	// Deprecated: Do not use.
	Deprecated bool `protobuf:"varint,7,opt,name=deprecated,proto3" json:"deprecated,omitempty"` // optional
	// Optional. Select this item when showing.
	//
	// *Note* that only one completion item can be selected and that the
	// tool / client decides which item that is. The rule is that the *first*
	// item of those that match best is selected.
	Preselect bool `protobuf:"varint,8,opt,name=preselect,proto3" json:"preselect,omitempty"`
	// A string that should be used when comparing this item
	// with other items. When `falsy` the label is used.
	SortText *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=sort_text,json=sortText,proto3" json:"sort_text,omitempty"`
	// A string that should be used when filtering a set of
	// completion items. When `falsy` the label is used.
	FilterText *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=filter_text,json=filterText,proto3" json:"filter_text,omitempty"`
	// A string that should be inserted into a document when selecting
	// this completion. When `falsy` the label is used.
	//
	// The `insertText` is subject to interpretation by the client side.
	// Some tools might not take the string literally. For example
	// VS Code when code complete is requested in this example `con<cursor position>`
	// and a completion item with an `insertText` of `console` is provided it
	// will only insert `sole`. Therefore it is recommended to use `textEdit` instead
	// since it avoids additional client side interpretation.
	InsertText *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=insert_text,json=insertText,proto3" json:"insert_text,omitempty"`
	// The format of the insert text. The format applies to both the `insertText` property
	// and the `newText` property of a provided `textEdit`. If omitted defaults to
	// `InsertTextFormat.PlainText`.
	InsertTextFormat InsertTextFormat `protobuf:"varint,12,opt,name=insert_text_format,json=insertTextFormat,proto3,enum=protocol.rpc.InsertTextFormat" json:"insert_text_format,omitempty"`
	// An edit which is applied to a document when selecting this completion. When an edit is provided
	// the value of `insertText` is ignored.
	//
	// NOTE: The range of the edit must be a single line range and it must contain the position at
	// which completion has been requested.
	TextEdit *protocol.TextEdit `protobuf:"bytes,13,opt,name=text_edit,json=textEdit,proto3" json:"text_edit,omitempty"`
	// An optional array of additional text edits that are applied when
	// selecting this completion. Edits must not overlap (including the same insert position)
	// with the main edit nor with themselves.
	//
	// Additional text edits should be used to change text unrelated to the current cursor position
	// (for example adding an import statement at the top of the file if the completion item will
	// insert an unqualified type).
	AdditionalTextEdits []*protocol.TextEdit `protobuf:"bytes,14,rep,name=additional_text_edits,json=additionalTextEdits,proto3" json:"additional_text_edits,omitempty"`
	// An optional set of characters that when pressed while this completion is active will accept it
	// first and then type that character. *Note* that all commit characters should have `length=1`
	// and that superfluous characters will be ignored.
	CommitCharacters []string `protobuf:"bytes,15,rep,name=commit_characters,json=commitCharacters,proto3" json:"commit_characters,omitempty"`
	// Optional. An optional command that is executed *after* inserting this completion. *Note* that
	// additional modifications to the current document should be described with the
	// additionalTextEdits-property.
	Command *protocol.Command `protobuf:"bytes,16,opt,name=command,proto3" json:"command,omitempty"`
	// A data entry field that is preserved on a completion item between
	// a completion and a completion resolve request.
	Data *anypb.Any `protobuf:"bytes,17,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CompletionItem) Reset() {
	*x = CompletionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionItem) ProtoMessage() {}

func (x *CompletionItem) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionItem.ProtoReflect.Descriptor instead.
func (*CompletionItem) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{107}
}

func (x *CompletionItem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CompletionItem) GetKind() CompletionItemKind {
	if x != nil {
		return x.Kind
	}
	return CompletionItemKind_COMPLETION_ITEM_KIND_UNSPECIFIED
}

func (x *CompletionItem) GetTags() []CompletionItemTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CompletionItem) GetDetail() *wrapperspb.StringValue {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (m *CompletionItem) GetDocumentation() isCompletionItem_Documentation {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (x *CompletionItem) GetMarkupContent() *protocol.MarkupContent {
	if x, ok := x.GetDocumentation().(*CompletionItem_MarkupContent); ok {
		return x.MarkupContent
	}
	return nil
}

func (x *CompletionItem) GetContent() string {
	if x, ok := x.GetDocumentation().(*CompletionItem_Content); ok {
		return x.Content
	}
	return ""
}

// Deprecated: Do not use.
func (x *CompletionItem) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *CompletionItem) GetPreselect() bool {
	if x != nil {
		return x.Preselect
	}
	return false
}

func (x *CompletionItem) GetSortText() *wrapperspb.StringValue {
	if x != nil {
		return x.SortText
	}
	return nil
}

func (x *CompletionItem) GetFilterText() *wrapperspb.StringValue {
	if x != nil {
		return x.FilterText
	}
	return nil
}

func (x *CompletionItem) GetInsertText() *wrapperspb.StringValue {
	if x != nil {
		return x.InsertText
	}
	return nil
}

func (x *CompletionItem) GetInsertTextFormat() InsertTextFormat {
	if x != nil {
		return x.InsertTextFormat
	}
	return InsertTextFormat_INSERT_TEXT_FORMAT_UNSPECIFIED
}

func (x *CompletionItem) GetTextEdit() *protocol.TextEdit {
	if x != nil {
		return x.TextEdit
	}
	return nil
}

func (x *CompletionItem) GetAdditionalTextEdits() []*protocol.TextEdit {
	if x != nil {
		return x.AdditionalTextEdits
	}
	return nil
}

func (x *CompletionItem) GetCommitCharacters() []string {
	if x != nil {
		return x.CommitCharacters
	}
	return nil
}

func (x *CompletionItem) GetCommand() *protocol.Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CompletionItem) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type isCompletionItem_Documentation interface {
	isCompletionItem_Documentation()
}

type CompletionItem_MarkupContent struct {
	MarkupContent *protocol.MarkupContent `protobuf:"bytes,5,opt,name=markup_content,json=markupContent,proto3,oneof"`
}

type CompletionItem_Content struct {
	Content string `protobuf:"bytes,6,opt,name=content,proto3,oneof"`
}

func (*CompletionItem_MarkupContent) isCompletionItem_Documentation() {}

func (*CompletionItem_Content) isCompletionItem_Documentation() {}

// HoverClientCapabilities represents a client capabilities of `textDocument/hover` request.
type HoverClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether hover supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Client supports the follow content formats for the content
	// property. The order describes the preferred format of the client.
	ContentFormat []protocol.MarkupKind `protobuf:"varint,2,rep,packed,name=content_format,json=contentFormat,proto3,enum=protocol.MarkupKind" json:"content_format,omitempty"`
}

func (x *HoverClientCapabilities) Reset() {
	*x = HoverClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoverClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoverClientCapabilities) ProtoMessage() {}

func (x *HoverClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoverClientCapabilities.ProtoReflect.Descriptor instead.
func (*HoverClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{108}
}

func (x *HoverClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *HoverClientCapabilities) GetContentFormat() []protocol.MarkupKind {
	if x != nil {
		return x.ContentFormat
	}
	return nil
}

// HoverOptions represents a server capabilities option of hoverProvider.
type HoverOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *HoverOptions) Reset() {
	*x = HoverOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoverOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoverOptions) ProtoMessage() {}

func (x *HoverOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoverOptions.ProtoReflect.Descriptor instead.
func (*HoverOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{109}
}

func (x *HoverOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// CompletionRegistrationOptions represents a registration option of Hover.
type HoverRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	HoverOptions *HoverOptions `protobuf:"bytes,2,opt,name=hover_options,json=hoverOptions,proto3" json:"hover_options,omitempty"`
}

func (x *HoverRegistrationOptions) Reset() {
	*x = HoverRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoverRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoverRegistrationOptions) ProtoMessage() {}

func (x *HoverRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoverRegistrationOptions.ProtoReflect.Descriptor instead.
func (*HoverRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{110}
}

func (x *HoverRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *HoverRegistrationOptions) GetHoverOptions() *HoverOptions {
	if x != nil {
		return x.HoverOptions
	}
	return nil
}

// HoverRequest is the parameters of a `textDocument/hover` request.
type HoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
}

func (x *HoverRequest) Reset() {
	*x = HoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoverRequest) ProtoMessage() {}

func (x *HoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoverRequest.ProtoReflect.Descriptor instead.
func (*HoverRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{111}
}

func (x *HoverRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *HoverRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

// Hover is the result of a hover request.
type Hover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hover's content
	//
	// Types that are assignable to Contents:
	//	*Hover_MarkedString
	//	*Hover_MarkedStrings_
	//	*Hover_MarkupContent
	Contents isHover_Contents `protobuf_oneof:"contents"`
	// An optional range is a range inside a text document
	// that is used to visualize a hover, e.g. by changing the background color.
	Range *protocol.Range `protobuf:"bytes,4,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Hover) Reset() {
	*x = Hover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hover) ProtoMessage() {}

func (x *Hover) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hover.ProtoReflect.Descriptor instead.
func (*Hover) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{112}
}

func (m *Hover) GetContents() isHover_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *Hover) GetMarkedString() *MarkedString {
	if x, ok := x.GetContents().(*Hover_MarkedString); ok {
		return x.MarkedString
	}
	return nil
}

func (x *Hover) GetMarkedStrings() *Hover_MarkedStrings {
	if x, ok := x.GetContents().(*Hover_MarkedStrings_); ok {
		return x.MarkedStrings
	}
	return nil
}

func (x *Hover) GetMarkupContent() *protocol.MarkupContent {
	if x, ok := x.GetContents().(*Hover_MarkupContent); ok {
		return x.MarkupContent
	}
	return nil
}

func (x *Hover) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type isHover_Contents interface {
	isHover_Contents()
}

type Hover_MarkedString struct {
	MarkedString *MarkedString `protobuf:"bytes,1,opt,name=marked_string,json=markedString,proto3,oneof"`
}

type Hover_MarkedStrings_ struct {
	MarkedStrings *Hover_MarkedStrings `protobuf:"bytes,2,opt,name=marked_strings,json=markedStrings,proto3,oneof"`
}

type Hover_MarkupContent struct {
	MarkupContent *protocol.MarkupContent `protobuf:"bytes,3,opt,name=markup_content,json=markupContent,proto3,oneof"`
}

func (*Hover_MarkedString) isHover_Contents() {}

func (*Hover_MarkedStrings_) isHover_Contents() {}

func (*Hover_MarkupContent) isHover_Contents() {}

// MarkedString can be used to render human readable text. It is either a markdown string
// or a code-block that provides a language and a code snippet. The language identifier
// is semantically equal to the optional language identifier in fenced code blocks in GitHub
// issues. See
// https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting
//
// The pair of a language and a value is an equivalent to markdown:
//
// ```${language}
// ${value}
// ```
//
// Note that markdown strings will be sanitized - that means html will be escaped.
//
// Deprecated: use MarkupContent instead.
type MarkedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MarkedString:
	//	*MarkedString_Text
	//	*MarkedString_CodeBlock_
	MarkedString isMarkedString_MarkedString `protobuf_oneof:"marked_string"`
}

func (x *MarkedString) Reset() {
	*x = MarkedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkedString) ProtoMessage() {}

func (x *MarkedString) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkedString.ProtoReflect.Descriptor instead.
func (*MarkedString) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{113}
}

func (m *MarkedString) GetMarkedString() isMarkedString_MarkedString {
	if m != nil {
		return m.MarkedString
	}
	return nil
}

func (x *MarkedString) GetText() string {
	if x, ok := x.GetMarkedString().(*MarkedString_Text); ok {
		return x.Text
	}
	return ""
}

func (x *MarkedString) GetCodeBlock() *MarkedString_CodeBlock {
	if x, ok := x.GetMarkedString().(*MarkedString_CodeBlock_); ok {
		return x.CodeBlock
	}
	return nil
}

type isMarkedString_MarkedString interface {
	isMarkedString_MarkedString()
}

type MarkedString_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type MarkedString_CodeBlock_ struct {
	CodeBlock *MarkedString_CodeBlock `protobuf:"bytes,2,opt,name=code_block,json=codeBlock,proto3,oneof"`
}

func (*MarkedString_Text) isMarkedString_MarkedString() {}

func (*MarkedString_CodeBlock_) isMarkedString_MarkedString() {}

// SignatureHelpClientCapabilities represents a client capabilities of `textDocument/signatureHelp`
// request.
type SignatureHelpClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether signature help supports dynamic registration.
	DynamicRegistration  bool                                                  `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	SignatureInformation *SignatureHelpClientCapabilities_SignatureInformation `protobuf:"bytes,2,opt,name=signature_information,json=signatureInformation,proto3" json:"signature_information,omitempty"`
	// Optional. The client supports to send additional context information for a
	// `textDocument/signatureHelp` request. A client that opts into
	// contextSupport will also support the `retriggerCharacters` on
	// `SignatureHelpOptions`.
	//
	// @since 3.15.0
	ContextSupport bool `protobuf:"varint,3,opt,name=context_support,json=contextSupport,proto3" json:"context_support,omitempty"`
}

func (x *SignatureHelpClientCapabilities) Reset() {
	*x = SignatureHelpClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelpClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelpClientCapabilities) ProtoMessage() {}

func (x *SignatureHelpClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelpClientCapabilities.ProtoReflect.Descriptor instead.
func (*SignatureHelpClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{114}
}

func (x *SignatureHelpClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *SignatureHelpClientCapabilities) GetSignatureInformation() *SignatureHelpClientCapabilities_SignatureInformation {
	if x != nil {
		return x.SignatureInformation
	}
	return nil
}

func (x *SignatureHelpClientCapabilities) GetContextSupport() bool {
	if x != nil {
		return x.ContextSupport
	}
	return false
}

// SignatureHelpOptions represents a server capabilities option of signatureHelpProvider.
type SignatureHelpOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
	// The characters that trigger signature help
	// automatically.
	TriggerCharacters []string `protobuf:"bytes,2,rep,name=trigger_characters,json=triggerCharacters,proto3" json:"trigger_characters,omitempty"`
	// List of characters that re-trigger signature help.
	//
	// These trigger characters are only active when signature help is already showing. All trigger
	// characters are also counted as re-trigger characters.
	//
	// @since 3.15.0
	RetriggerCharacters []string `protobuf:"bytes,3,rep,name=retrigger_characters,json=retriggerCharacters,proto3" json:"retrigger_characters,omitempty"`
}

func (x *SignatureHelpOptions) Reset() {
	*x = SignatureHelpOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelpOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelpOptions) ProtoMessage() {}

func (x *SignatureHelpOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelpOptions.ProtoReflect.Descriptor instead.
func (*SignatureHelpOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{115}
}

func (x *SignatureHelpOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

func (x *SignatureHelpOptions) GetTriggerCharacters() []string {
	if x != nil {
		return x.TriggerCharacters
	}
	return nil
}

func (x *SignatureHelpOptions) GetRetriggerCharacters() []string {
	if x != nil {
		return x.RetriggerCharacters
	}
	return nil
}

// SignatureHelpRegistrationOptions represents a registration option of SignatureHelp.
type SignatureHelpRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	SignatureHelpOptions *SignatureHelpOptions `protobuf:"bytes,2,opt,name=signature_help_options,json=signatureHelpOptions,proto3" json:"signature_help_options,omitempty"`
}

func (x *SignatureHelpRegistrationOptions) Reset() {
	*x = SignatureHelpRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelpRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelpRegistrationOptions) ProtoMessage() {}

func (x *SignatureHelpRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelpRegistrationOptions.ProtoReflect.Descriptor instead.
func (*SignatureHelpRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{116}
}

func (x *SignatureHelpRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *SignatureHelpRegistrationOptions) GetSignatureHelpOptions() *SignatureHelpOptions {
	if x != nil {
		return x.SignatureHelpOptions
	}
	return nil
}

// SignatureHelpRequest is the parameters of a `textDocument/signatureHelp` request.
type SignatureHelpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// The signature help context. This is only available if the client specifies
	// to send this using the client capability `textDocument.signatureHelp.contextSupport === true`
	//
	// @since 3.15.0
	Context *SignatureHelpContext `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *SignatureHelpRequest) Reset() {
	*x = SignatureHelpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelpRequest) ProtoMessage() {}

func (x *SignatureHelpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelpRequest.ProtoReflect.Descriptor instead.
func (*SignatureHelpRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{117}
}

func (x *SignatureHelpRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *SignatureHelpRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *SignatureHelpRequest) GetContext() *SignatureHelpContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// Additional information about the context in which a signature help request was triggered.
//
// @since 3.15.0
type SignatureHelpContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action that caused signature help to be triggered.
	TriggerKind SignatureHelpContext_SignatureHelpTriggerKind `protobuf:"varint,1,opt,name=trigger_kind,json=triggerKind,proto3,enum=protocol.rpc.SignatureHelpContext_SignatureHelpTriggerKind" json:"trigger_kind,omitempty"`
	// Character that caused signature help to be triggered.
	//
	// This is undefined when `trigger_kind !== SignatureHelpTriggerKind.TriggerCharacter`
	TriggerCharacter string `protobuf:"bytes,2,opt,name=trigger_character,json=triggerCharacter,proto3" json:"trigger_character,omitempty"`
	// `true` if signature help was already showing when it was triggered.
	//
	// Retriggers occur when the signature help is already active and can be caused by actions such as
	// typing a trigger character, a cursor move, or document content changes.
	IsRetrigger bool `protobuf:"varint,3,opt,name=is_retrigger,json=isRetrigger,proto3" json:"is_retrigger,omitempty"`
	// The currently active `SignatureHelp`.
	//
	// The `activeSignatureHelp` has its `SignatureHelp.activeSignature` field updated based on
	// the user navigating through available signatures.
	ActiveSignatureHelp *SignatureHelp `protobuf:"bytes,4,opt,name=active_signature_help,json=activeSignatureHelp,proto3" json:"active_signature_help,omitempty"`
}

func (x *SignatureHelpContext) Reset() {
	*x = SignatureHelpContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelpContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelpContext) ProtoMessage() {}

func (x *SignatureHelpContext) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelpContext.ProtoReflect.Descriptor instead.
func (*SignatureHelpContext) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{118}
}

func (x *SignatureHelpContext) GetTriggerKind() SignatureHelpContext_SignatureHelpTriggerKind {
	if x != nil {
		return x.TriggerKind
	}
	return SignatureHelpContext_SIGNATURE_HELP_TRIGGER_KIND_UNSPECIFIED
}

func (x *SignatureHelpContext) GetTriggerCharacter() string {
	if x != nil {
		return x.TriggerCharacter
	}
	return ""
}

func (x *SignatureHelpContext) GetIsRetrigger() bool {
	if x != nil {
		return x.IsRetrigger
	}
	return false
}

func (x *SignatureHelpContext) GetActiveSignatureHelp() *SignatureHelp {
	if x != nil {
		return x.ActiveSignatureHelp
	}
	return nil
}

// SignatureHelp represents the signature of something
// callable. There can be multiple signature but only one
// active and only one active parameter.
type SignatureHelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more signatures. If no signatures are available the signature help
	// request should return `null`.
	Signatures []*SignatureInformation `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// The active signature. If omitted or the value lies outside the
	// range of `signatures` the value defaults to zero or is ignore if
	// the `SignatureHelp` as no signatures.
	//
	// Whenever possible implementors should make an active decision about
	// the active signature and shouldn't rely on a default value.
	//
	// In future version of the protocol this property might become
	// mandatory to better express this.
	ActiveSignature *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=active_signature,json=activeSignature,proto3" json:"active_signature,omitempty"`
	// The active parameter of the active signature. If omitted or the value
	// lies outside the range of `signatures[activeSignature].parameters`
	// defaults to 0 if the active signature has parameters. If
	// the active signature has no parameters it is ignored.
	// In future version of the protocol this property might become
	// mandatory to better express the active parameter if the
	// active signature does have any.
	ActiveParameter *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=active_parameter,json=activeParameter,proto3" json:"active_parameter,omitempty"`
}

func (x *SignatureHelp) Reset() {
	*x = SignatureHelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelp) ProtoMessage() {}

func (x *SignatureHelp) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelp.ProtoReflect.Descriptor instead.
func (*SignatureHelp) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{119}
}

func (x *SignatureHelp) GetSignatures() []*SignatureInformation {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SignatureHelp) GetActiveSignature() *wrapperspb.Int32Value {
	if x != nil {
		return x.ActiveSignature
	}
	return nil
}

func (x *SignatureHelp) GetActiveParameter() *wrapperspb.Int32Value {
	if x != nil {
		return x.ActiveParameter
	}
	return nil
}

// SignatureInformation represents the signature of something callable. A signature
// can have a label, like a function-name, a doc-comment, and
// a set of parameters.
type SignatureInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label of this signature. Will be shown in
	// the UI.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// The human-readable doc-comment of this signature. Will be shown
	// in the UI but can be omitted.
	//
	// Types that are assignable to Documentation:
	//	*SignatureInformation_Markup
	//	*SignatureInformation_MarkupContent
	Documentation isSignatureInformation_Documentation `protobuf_oneof:"documentation"`
	// The parameters of this signature.
	Parameters []*ParameterInformation `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// The index of the active parameter.
	//
	// If provided, this is used in place of `SignatureHelp.activeParameter`.
	//
	// @since 3.16.0 - proposed state
	ActiveParameter *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=active_parameter,json=activeParameter,proto3" json:"active_parameter,omitempty"`
}

func (x *SignatureInformation) Reset() {
	*x = SignatureInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureInformation) ProtoMessage() {}

func (x *SignatureInformation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureInformation.ProtoReflect.Descriptor instead.
func (*SignatureInformation) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{120}
}

func (x *SignatureInformation) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (m *SignatureInformation) GetDocumentation() isSignatureInformation_Documentation {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (x *SignatureInformation) GetMarkup() string {
	if x, ok := x.GetDocumentation().(*SignatureInformation_Markup); ok {
		return x.Markup
	}
	return ""
}

func (x *SignatureInformation) GetMarkupContent() *protocol.MarkupContent {
	if x, ok := x.GetDocumentation().(*SignatureInformation_MarkupContent); ok {
		return x.MarkupContent
	}
	return nil
}

func (x *SignatureInformation) GetParameters() []*ParameterInformation {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SignatureInformation) GetActiveParameter() *wrapperspb.Int32Value {
	if x != nil {
		return x.ActiveParameter
	}
	return nil
}

type isSignatureInformation_Documentation interface {
	isSignatureInformation_Documentation()
}

type SignatureInformation_Markup struct {
	Markup string `protobuf:"bytes,2,opt,name=markup,proto3,oneof"`
}

type SignatureInformation_MarkupContent struct {
	MarkupContent *protocol.MarkupContent `protobuf:"bytes,3,opt,name=markup_content,json=markupContent,proto3,oneof"`
}

func (*SignatureInformation_Markup) isSignatureInformation_Documentation() {}

func (*SignatureInformation_MarkupContent) isSignatureInformation_Documentation() {}

// ParameterInformation represents a parameter of a callable-signature. A parameter can
// have a label and a doc-comment.
// (-- api-linter: core::0123::resource-annotation=disabled --)
type ParameterInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label of this parameter information.
	//
	// Either a string or an inclusive start and exclusive end offsets within its containing
	// signature label. (see SignatureInformation.label). The offsets are based on a UTF-16
	// string representation as `Position` and `Range` does.
	//
	// NOTE: a label of type string should be a substring of its containing signature label.
	// Its intended use case is to highlight the parameter label part in the
	// `SignatureInformation.label`.
	//
	// Types that are assignable to Label:
	//	*ParameterInformation_Name
	//	*ParameterInformation_Offset_
	Label isParameterInformation_Label `protobuf_oneof:"label"`
	// The human-readable doc-comment of this parameter. Will be shown
	// in the UI but can be omitted.
	//
	// Types that are assignable to Documentation:
	//	*ParameterInformation_Markup
	//	*ParameterInformation_MarkupContent
	Documentation isParameterInformation_Documentation `protobuf_oneof:"documentation"`
}

func (x *ParameterInformation) Reset() {
	*x = ParameterInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterInformation) ProtoMessage() {}

func (x *ParameterInformation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterInformation.ProtoReflect.Descriptor instead.
func (*ParameterInformation) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{121}
}

func (m *ParameterInformation) GetLabel() isParameterInformation_Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (x *ParameterInformation) GetName() string {
	if x, ok := x.GetLabel().(*ParameterInformation_Name); ok {
		return x.Name
	}
	return ""
}

func (x *ParameterInformation) GetOffset() *ParameterInformation_Offset {
	if x, ok := x.GetLabel().(*ParameterInformation_Offset_); ok {
		return x.Offset
	}
	return nil
}

func (m *ParameterInformation) GetDocumentation() isParameterInformation_Documentation {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (x *ParameterInformation) GetMarkup() string {
	if x, ok := x.GetDocumentation().(*ParameterInformation_Markup); ok {
		return x.Markup
	}
	return ""
}

func (x *ParameterInformation) GetMarkupContent() *protocol.MarkupContent {
	if x, ok := x.GetDocumentation().(*ParameterInformation_MarkupContent); ok {
		return x.MarkupContent
	}
	return nil
}

type isParameterInformation_Label interface {
	isParameterInformation_Label()
}

type ParameterInformation_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type ParameterInformation_Offset_ struct {
	Offset *ParameterInformation_Offset `protobuf:"bytes,2,opt,name=offset,proto3,oneof"`
}

func (*ParameterInformation_Name) isParameterInformation_Label() {}

func (*ParameterInformation_Offset_) isParameterInformation_Label() {}

type isParameterInformation_Documentation interface {
	isParameterInformation_Documentation()
}

type ParameterInformation_Markup struct {
	Markup string `protobuf:"bytes,3,opt,name=markup,proto3,oneof"`
}

type ParameterInformation_MarkupContent struct {
	MarkupContent *protocol.MarkupContent `protobuf:"bytes,4,opt,name=markup_content,json=markupContent,proto3,oneof"`
}

func (*ParameterInformation_Markup) isParameterInformation_Documentation() {}

func (*ParameterInformation_MarkupContent) isParameterInformation_Documentation() {}

// DeclarationClientCapabilities represents a client capabilities of `textDocument/declaration`
// request.
type DeclarationClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether declaration supports dynamic registration. If this is set to `true`
	// the client supports the new `DeclarationRegistrationOptions` return value
	// for the corresponding server capability as well.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Optional. The client supports additional metadata in the form of declaration links.
	LinkSupport bool `protobuf:"varint,2,opt,name=link_support,json=linkSupport,proto3" json:"link_support,omitempty"`
}

func (x *DeclarationClientCapabilities) Reset() {
	*x = DeclarationClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclarationClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclarationClientCapabilities) ProtoMessage() {}

func (x *DeclarationClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclarationClientCapabilities.ProtoReflect.Descriptor instead.
func (*DeclarationClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{122}
}

func (x *DeclarationClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *DeclarationClientCapabilities) GetLinkSupport() bool {
	if x != nil {
		return x.LinkSupport
	}
	return false
}

// DeclarationOptions represents a server capabilities option of declarationProvider.
type DeclarationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *DeclarationOptions) Reset() {
	*x = DeclarationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclarationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclarationOptions) ProtoMessage() {}

func (x *DeclarationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclarationOptions.ProtoReflect.Descriptor instead.
func (*DeclarationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{123}
}

func (x *DeclarationOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// SignatureHelpRegistrationOptions represents a registration option of Declaration.
type DeclarationRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	DeclarationOptions *DeclarationOptions `protobuf:"bytes,1,opt,name=declaration_options,json=declarationOptions,proto3" json:"declaration_options,omitempty"`
	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,2,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	StaticRegistrationOptions *protocol.StaticRegistrationOptions `protobuf:"bytes,3,opt,name=static_registration_options,json=staticRegistrationOptions,proto3" json:"static_registration_options,omitempty"`
}

func (x *DeclarationRegistrationOptions) Reset() {
	*x = DeclarationRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclarationRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclarationRegistrationOptions) ProtoMessage() {}

func (x *DeclarationRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclarationRegistrationOptions.ProtoReflect.Descriptor instead.
func (*DeclarationRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{124}
}

func (x *DeclarationRegistrationOptions) GetDeclarationOptions() *DeclarationOptions {
	if x != nil {
		return x.DeclarationOptions
	}
	return nil
}

func (x *DeclarationRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *DeclarationRegistrationOptions) GetStaticRegistrationOptions() *protocol.StaticRegistrationOptions {
	if x != nil {
		return x.StaticRegistrationOptions
	}
	return nil
}

// DeclarationRequest is the parameters of a `textDocument/declaration` request.
type DeclarationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,3,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
}

func (x *DeclarationRequest) Reset() {
	*x = DeclarationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclarationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclarationRequest) ProtoMessage() {}

func (x *DeclarationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclarationRequest.ProtoReflect.Descriptor instead.
func (*DeclarationRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{125}
}

func (x *DeclarationRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *DeclarationRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *DeclarationRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

// DefinitionClientCapabilities represents a client capabilities of `textDocument/definition`
// request.
type DefinitionClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether definition supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Optional. The client supports additional metadata in the form of definition links.
	//
	// @since 3.14.0
	LinkSupport bool `protobuf:"varint,2,opt,name=link_support,json=linkSupport,proto3" json:"link_support,omitempty"`
}

func (x *DefinitionClientCapabilities) Reset() {
	*x = DefinitionClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionClientCapabilities) ProtoMessage() {}

func (x *DefinitionClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionClientCapabilities.ProtoReflect.Descriptor instead.
func (*DefinitionClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{126}
}

func (x *DefinitionClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *DefinitionClientCapabilities) GetLinkSupport() bool {
	if x != nil {
		return x.LinkSupport
	}
	return false
}

// DefinitionOptions represents a server capabilities option of definitionProvider.
type DefinitionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *DefinitionOptions) Reset() {
	*x = DefinitionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionOptions) ProtoMessage() {}

func (x *DefinitionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionOptions.ProtoReflect.Descriptor instead.
func (*DefinitionOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{127}
}

func (x *DefinitionOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// DefinitionRegistrationOptions represents a registration option of Definition.
type DefinitionRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	DefinitionOptions *DefinitionOptions `protobuf:"bytes,2,opt,name=definition_options,json=definitionOptions,proto3" json:"definition_options,omitempty"`
}

func (x *DefinitionRegistrationOptions) Reset() {
	*x = DefinitionRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionRegistrationOptions) ProtoMessage() {}

func (x *DefinitionRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionRegistrationOptions.ProtoReflect.Descriptor instead.
func (*DefinitionRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{128}
}

func (x *DefinitionRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *DefinitionRegistrationOptions) GetDefinitionOptions() *DefinitionOptions {
	if x != nil {
		return x.DefinitionOptions
	}
	return nil
}

// DefinitionRequest is the parameters of a `textDocument/definition` request.
type DefinitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,3,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
}

func (x *DefinitionRequest) Reset() {
	*x = DefinitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionRequest) ProtoMessage() {}

func (x *DefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionRequest.ProtoReflect.Descriptor instead.
func (*DefinitionRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{129}
}

func (x *DefinitionRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *DefinitionRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *DefinitionRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

// TypeDefinitionClientCapabilities represents a client capabilities of
// `textDocument/typeDefinition` request.
type TypeDefinitionClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether implementation supports dynamic registration. If this is set to `true`
	// the client supports the new `TypeDefinitionRegistrationOptions` return value
	// for the corresponding server capability as well.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Optional. The client supports additional metadata in the form of definition links.
	//
	// @since 3.14.0
	LinkSupport bool `protobuf:"varint,2,opt,name=link_support,json=linkSupport,proto3" json:"link_support,omitempty"`
}

func (x *TypeDefinitionClientCapabilities) Reset() {
	*x = TypeDefinitionClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDefinitionClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDefinitionClientCapabilities) ProtoMessage() {}

func (x *TypeDefinitionClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDefinitionClientCapabilities.ProtoReflect.Descriptor instead.
func (*TypeDefinitionClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{130}
}

func (x *TypeDefinitionClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *TypeDefinitionClientCapabilities) GetLinkSupport() bool {
	if x != nil {
		return x.LinkSupport
	}
	return false
}

// TypeDefinitionOptions represents a server capabilities option of typeDefinitionProvider.
type TypeDefinitionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *TypeDefinitionOptions) Reset() {
	*x = TypeDefinitionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDefinitionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDefinitionOptions) ProtoMessage() {}

func (x *TypeDefinitionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDefinitionOptions.ProtoReflect.Descriptor instead.
func (*TypeDefinitionOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{131}
}

func (x *TypeDefinitionOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// TypeDefinitionRegistrationOptions represents a registration option of TypeDefinition.
type TypeDefinitionRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	TypeDefinitionOptions *TypeDefinitionOptions `protobuf:"bytes,2,opt,name=type_definition_options,json=typeDefinitionOptions,proto3" json:"type_definition_options,omitempty"`
	// extends
	StaticRegistrationOptions *protocol.StaticRegistrationOptions `protobuf:"bytes,3,opt,name=static_registration_options,json=staticRegistrationOptions,proto3" json:"static_registration_options,omitempty"`
}

func (x *TypeDefinitionRegistrationOptions) Reset() {
	*x = TypeDefinitionRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDefinitionRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDefinitionRegistrationOptions) ProtoMessage() {}

func (x *TypeDefinitionRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDefinitionRegistrationOptions.ProtoReflect.Descriptor instead.
func (*TypeDefinitionRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{132}
}

func (x *TypeDefinitionRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *TypeDefinitionRegistrationOptions) GetTypeDefinitionOptions() *TypeDefinitionOptions {
	if x != nil {
		return x.TypeDefinitionOptions
	}
	return nil
}

func (x *TypeDefinitionRegistrationOptions) GetStaticRegistrationOptions() *protocol.StaticRegistrationOptions {
	if x != nil {
		return x.StaticRegistrationOptions
	}
	return nil
}

// TypeDefinitionRequest is the parameters of a `textDocument/typeDefinition` request.
type TypeDefinitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,3,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
}

func (x *TypeDefinitionRequest) Reset() {
	*x = TypeDefinitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDefinitionRequest) ProtoMessage() {}

func (x *TypeDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDefinitionRequest.ProtoReflect.Descriptor instead.
func (*TypeDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{133}
}

func (x *TypeDefinitionRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *TypeDefinitionRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *TypeDefinitionRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

// ImplementationClientCapabilities represents a client capabilities of
// `textDocument/implementation` request.
type ImplementationClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether implementation supports dynamic registration. If this is set to `true`
	// the client supports the new `ImplementationRegistrationOptions` return value
	// for the corresponding server capability as well.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Optional. The client supports additional metadata in the form of definition links.
	//
	// @since 3.14.0
	LinkSupport bool `protobuf:"varint,2,opt,name=link_support,json=linkSupport,proto3" json:"link_support,omitempty"`
}

func (x *ImplementationClientCapabilities) Reset() {
	*x = ImplementationClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationClientCapabilities) ProtoMessage() {}

func (x *ImplementationClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationClientCapabilities.ProtoReflect.Descriptor instead.
func (*ImplementationClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{134}
}

func (x *ImplementationClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *ImplementationClientCapabilities) GetLinkSupport() bool {
	if x != nil {
		return x.LinkSupport
	}
	return false
}

// ImplementationOptions represents a server capabilities option of implementationProvider.
type ImplementationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *ImplementationOptions) Reset() {
	*x = ImplementationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationOptions) ProtoMessage() {}

func (x *ImplementationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationOptions.ProtoReflect.Descriptor instead.
func (*ImplementationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{135}
}

func (x *ImplementationOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// ImplementationRegistrationOptions represents a registration option of Implementation.
type ImplementationRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	ImplementationOptions *ImplementationOptions `protobuf:"bytes,2,opt,name=implementation_options,json=implementationOptions,proto3" json:"implementation_options,omitempty"`
	// extends
	StaticRegistrationOptions *protocol.StaticRegistrationOptions `protobuf:"bytes,3,opt,name=static_registration_options,json=staticRegistrationOptions,proto3" json:"static_registration_options,omitempty"`
}

func (x *ImplementationRegistrationOptions) Reset() {
	*x = ImplementationRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationRegistrationOptions) ProtoMessage() {}

func (x *ImplementationRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationRegistrationOptions.ProtoReflect.Descriptor instead.
func (*ImplementationRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{136}
}

func (x *ImplementationRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *ImplementationRegistrationOptions) GetImplementationOptions() *ImplementationOptions {
	if x != nil {
		return x.ImplementationOptions
	}
	return nil
}

func (x *ImplementationRegistrationOptions) GetStaticRegistrationOptions() *protocol.StaticRegistrationOptions {
	if x != nil {
		return x.StaticRegistrationOptions
	}
	return nil
}

// ImplementationRequest is the parameters of a `textDocument/implementation` request.
type ImplementationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,3,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
}

func (x *ImplementationRequest) Reset() {
	*x = ImplementationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationRequest) ProtoMessage() {}

func (x *ImplementationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationRequest.ProtoReflect.Descriptor instead.
func (*ImplementationRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{137}
}

func (x *ImplementationRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *ImplementationRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *ImplementationRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

// ImplementationClientCapabilities represents a client capabilities of `textDocument/references`
// request.
type ReferenceClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether references supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *ReferenceClientCapabilities) Reset() {
	*x = ReferenceClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceClientCapabilities) ProtoMessage() {}

func (x *ReferenceClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceClientCapabilities.ProtoReflect.Descriptor instead.
func (*ReferenceClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{138}
}

func (x *ReferenceClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// ReferenceOptions represents a server capabilities option of referenceProvider.
type ReferenceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *ReferenceOptions) Reset() {
	*x = ReferenceOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceOptions) ProtoMessage() {}

func (x *ReferenceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceOptions.ProtoReflect.Descriptor instead.
func (*ReferenceOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{139}
}

func (x *ReferenceOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// ReferenceRegistrationOptions represents a registration option of Reference.
type ReferenceRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	ReferenceOptions *ReferenceOptions `protobuf:"bytes,2,opt,name=reference_options,json=referenceOptions,proto3" json:"reference_options,omitempty"`
}

func (x *ReferenceRegistrationOptions) Reset() {
	*x = ReferenceRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceRegistrationOptions) ProtoMessage() {}

func (x *ReferenceRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceRegistrationOptions.ProtoReflect.Descriptor instead.
func (*ReferenceRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{140}
}

func (x *ReferenceRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *ReferenceRegistrationOptions) GetReferenceOptions() *ReferenceOptions {
	if x != nil {
		return x.ReferenceOptions
	}
	return nil
}

// ReferenceRequest is the parameters of a `textDocument/references` request.
type ReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,3,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	Context             *ReferenceContext    `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ReferenceRequest) Reset() {
	*x = ReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceRequest) ProtoMessage() {}

func (x *ReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceRequest.ProtoReflect.Descriptor instead.
func (*ReferenceRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{141}
}

func (x *ReferenceRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *ReferenceRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *ReferenceRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *ReferenceRequest) GetContext() *ReferenceContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// ReferenceContext whether the references supports include the declaration
type ReferenceContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Include the declaration of the current symbol.
	IncludeDeclaration bool `protobuf:"varint,1,opt,name=include_declaration,json=includeDeclaration,proto3" json:"include_declaration,omitempty"`
}

func (x *ReferenceContext) Reset() {
	*x = ReferenceContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceContext) ProtoMessage() {}

func (x *ReferenceContext) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceContext.ProtoReflect.Descriptor instead.
func (*ReferenceContext) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{142}
}

func (x *ReferenceContext) GetIncludeDeclaration() bool {
	if x != nil {
		return x.IncludeDeclaration
	}
	return false
}

// DocumentHighlightClientCapabilities represents a client capabilities of
// `textDocument/documentHighlight` request.
type DocumentHighlightClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether document highlight supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *DocumentHighlightClientCapabilities) Reset() {
	*x = DocumentHighlightClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentHighlightClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentHighlightClientCapabilities) ProtoMessage() {}

func (x *DocumentHighlightClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentHighlightClientCapabilities.ProtoReflect.Descriptor instead.
func (*DocumentHighlightClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{143}
}

func (x *DocumentHighlightClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// DocumentHighlightOptions represents a server capabilities option of documentHighlightProvider.
type DocumentHighlightOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *DocumentHighlightOptions) Reset() {
	*x = DocumentHighlightOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentHighlightOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentHighlightOptions) ProtoMessage() {}

func (x *DocumentHighlightOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentHighlightOptions.ProtoReflect.Descriptor instead.
func (*DocumentHighlightOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{144}
}

func (x *DocumentHighlightOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// DocumentHighlightRegistrationOptions represents a registration option of DocumentHighlight.
type DocumentHighlightRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	DocumentHighlightOptions *DocumentHighlightOptions `protobuf:"bytes,2,opt,name=document_highlight_options,json=documentHighlightOptions,proto3" json:"document_highlight_options,omitempty"`
}

func (x *DocumentHighlightRegistrationOptions) Reset() {
	*x = DocumentHighlightRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentHighlightRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentHighlightRegistrationOptions) ProtoMessage() {}

func (x *DocumentHighlightRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentHighlightRegistrationOptions.ProtoReflect.Descriptor instead.
func (*DocumentHighlightRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{145}
}

func (x *DocumentHighlightRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *DocumentHighlightRegistrationOptions) GetDocumentHighlightOptions() *DocumentHighlightOptions {
	if x != nil {
		return x.DocumentHighlightOptions
	}
	return nil
}

// DocumentHighlightRequest is the parameters of a `textDocument/documentHighlight` request.
type DocumentHighlightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,3,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
}

func (x *DocumentHighlightRequest) Reset() {
	*x = DocumentHighlightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentHighlightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentHighlightRequest) ProtoMessage() {}

func (x *DocumentHighlightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentHighlightRequest.ProtoReflect.Descriptor instead.
func (*DocumentHighlightRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{146}
}

func (x *DocumentHighlightRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *DocumentHighlightRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *DocumentHighlightRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

// DocumentHighlight is a document highlight is a range inside a text document which deserves
// special attention. Usually a document highlight is visualized by changing
// the background color of its range.
type DocumentHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range this highlight applies to.
	Range *protocol.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// Optional. The highlight kind, default is DocumentHighlightKind.Text.
	Kind DocumentHighlight_DocumentHighlightKind `protobuf:"varint,2,opt,name=kind,proto3,enum=protocol.rpc.DocumentHighlight_DocumentHighlightKind" json:"kind,omitempty"`
}

func (x *DocumentHighlight) Reset() {
	*x = DocumentHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentHighlight) ProtoMessage() {}

func (x *DocumentHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentHighlight.ProtoReflect.Descriptor instead.
func (*DocumentHighlight) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{147}
}

func (x *DocumentHighlight) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *DocumentHighlight) GetKind() DocumentHighlight_DocumentHighlightKind {
	if x != nil {
		return x.Kind
	}
	return DocumentHighlight_DOCUMENT_HIGHLIGHT_KIND_UNSPECIFIED
}

// DocumentSymbolClientCapabilities represents a client capabilities of
// `textDocument/documentSymbol` request.
type DocumentSymbolClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether document symbol supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Specific capabilities for the `SymbolKind` in the `textDocument/documentSymbol` request.
	SymbolKind *DocumentSymbolClientCapabilities_SymbolKind `protobuf:"bytes,2,opt,name=symbol_kind,json=symbolKind,proto3" json:"symbol_kind,omitempty"`
	// Optional. The client supports hierarchical document symbols.
	HierarchicalDocumentSymbolSupport bool `protobuf:"varint,3,opt,name=hierarchical_document_symbol_support,json=hierarchicalDocumentSymbolSupport,proto3" json:"hierarchical_document_symbol_support,omitempty"`
}

func (x *DocumentSymbolClientCapabilities) Reset() {
	*x = DocumentSymbolClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbolClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbolClientCapabilities) ProtoMessage() {}

func (x *DocumentSymbolClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbolClientCapabilities.ProtoReflect.Descriptor instead.
func (*DocumentSymbolClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{148}
}

func (x *DocumentSymbolClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *DocumentSymbolClientCapabilities) GetSymbolKind() *DocumentSymbolClientCapabilities_SymbolKind {
	if x != nil {
		return x.SymbolKind
	}
	return nil
}

func (x *DocumentSymbolClientCapabilities) GetHierarchicalDocumentSymbolSupport() bool {
	if x != nil {
		return x.HierarchicalDocumentSymbolSupport
	}
	return false
}

// DocumentSymbolOptions represents a server capabilities option of documentSymbolProvider.
type DocumentSymbolOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *DocumentSymbolOptions) Reset() {
	*x = DocumentSymbolOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbolOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbolOptions) ProtoMessage() {}

func (x *DocumentSymbolOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbolOptions.ProtoReflect.Descriptor instead.
func (*DocumentSymbolOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{149}
}

func (x *DocumentSymbolOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// DocumentSymbolRegistrationOptions represents a registration option of DocumentSymbol.
type DocumentSymbolRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	DocumentSymbolOptions *DocumentSymbolOptions `protobuf:"bytes,2,opt,name=document_symbol_options,json=documentSymbolOptions,proto3" json:"document_symbol_options,omitempty"`
}

func (x *DocumentSymbolRegistrationOptions) Reset() {
	*x = DocumentSymbolRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbolRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbolRegistrationOptions) ProtoMessage() {}

func (x *DocumentSymbolRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbolRegistrationOptions.ProtoReflect.Descriptor instead.
func (*DocumentSymbolRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{150}
}

func (x *DocumentSymbolRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *DocumentSymbolRegistrationOptions) GetDocumentSymbolOptions() *DocumentSymbolOptions {
	if x != nil {
		return x.DocumentSymbolOptions
	}
	return nil
}

// DocumentSymbolRequest is the parameters of a `textDocument/documentSymbol` request.
type DocumentSymbolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The text document.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
}

func (x *DocumentSymbolRequest) Reset() {
	*x = DocumentSymbolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbolRequest) ProtoMessage() {}

func (x *DocumentSymbolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbolRequest.ProtoReflect.Descriptor instead.
func (*DocumentSymbolRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{151}
}

func (x *DocumentSymbolRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *DocumentSymbolRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *DocumentSymbolRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

// DocumentSymbol represents programming constructs like variables, classes, interfaces etc. that
// appear in a document. Document symbols can be hierarchical and they have two ranges: one that
// encloses its definition and one that points to its most interesting range, e.g. the range of an
// identifier.
// (-- api-linter: core::0123::resource-annotation=disabled --)
type DocumentSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this symbol. Will be displayed in the user interface and therefore must not be
	// an empty string or a string only consisting of white spaces.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// More detail for this symbol, e.g the signature of a function.
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	// The kind of this symbol.
	Kind SymbolKind `protobuf:"varint,3,opt,name=kind,proto3,enum=protocol.rpc.SymbolKind" json:"kind,omitempty"`
	// Optional. Indicates if this symbol is deprecated.
	Deprecated bool `protobuf:"varint,4,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// The range enclosing this symbol not including leading/trailing whitespace but everything else
	// like comments. This information is typically used to determine if the clients cursor is
	// inside the symbol to reveal in the symbol in the UI.
	Range *protocol.Range `protobuf:"bytes,5,opt,name=range,proto3" json:"range,omitempty"`
	// The range that should be selected and revealed when this symbol is being picked, e.g the name
	// of a function. Must be contained by the `range`.
	SelectionRange *protocol.Range `protobuf:"bytes,6,opt,name=selection_range,json=selectionRange,proto3" json:"selection_range,omitempty"`
	// Children of this symbol, e.g. properties of a class.
	Children []*DocumentSymbol `protobuf:"bytes,7,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *DocumentSymbol) Reset() {
	*x = DocumentSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbol) ProtoMessage() {}

func (x *DocumentSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbol.ProtoReflect.Descriptor instead.
func (*DocumentSymbol) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{152}
}

func (x *DocumentSymbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentSymbol) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *DocumentSymbol) GetKind() SymbolKind {
	if x != nil {
		return x.Kind
	}
	return SymbolKind_SYMBOL_KIND_UNSPECIFIED
}

func (x *DocumentSymbol) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *DocumentSymbol) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *DocumentSymbol) GetSelectionRange() *protocol.Range {
	if x != nil {
		return x.SelectionRange
	}
	return nil
}

func (x *DocumentSymbol) GetChildren() []*DocumentSymbol {
	if x != nil {
		return x.Children
	}
	return nil
}

// SymbolInformation represents information about programming constructs like variables, classes,
// interfaces etc.
// (-- api-linter: core::0123::resource-annotation=disabled --)
type SymbolInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this symbol.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The kind of this symbol.
	Kind SymbolKind `protobuf:"varint,2,opt,name=kind,proto3,enum=protocol.rpc.SymbolKind" json:"kind,omitempty"`
	// Optional. Indicates if this symbol is deprecated.
	Deprecated bool `protobuf:"varint,3,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// The location of this symbol. The location's range is used by a tool
	// to reveal the location in the editor. If the symbol is selected in the
	// tool the range's start information is used to position the cursor. So
	// the range usually spans more then the actual symbol's name and does
	// normally include things like visibility modifiers.
	//
	// The range doesn't have to denote a node range in the sense of a abstract
	// syntax tree. It can therefore not be used to re-construct a hierarchy of
	// the symbols.
	Location *protocol.Location `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// Optional. The name of the symbol containing this symbol. This information is for
	// user interface purposes (e.g. to render a qualifier in the user interface
	// if necessary). It can't be used to re-infer a hierarchy for the document
	// symbols.
	// (-- api-linter: core::0123::resource-annotation=disabled
	//     api-linter: core::0122::name-suffix=disabled --)
	ContainerName string `protobuf:"bytes,5,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
}

func (x *SymbolInformation) Reset() {
	*x = SymbolInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInformation) ProtoMessage() {}

func (x *SymbolInformation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInformation.ProtoReflect.Descriptor instead.
func (*SymbolInformation) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{153}
}

func (x *SymbolInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SymbolInformation) GetKind() SymbolKind {
	if x != nil {
		return x.Kind
	}
	return SymbolKind_SYMBOL_KIND_UNSPECIFIED
}

func (x *SymbolInformation) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *SymbolInformation) GetLocation() *protocol.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *SymbolInformation) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

// CodeActionClientCapabilities represents a client capabilities of `textDocument/codeAction`
// request.
type CodeActionClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether code action supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// The client supports code action literals as a valid
	// response of the `textDocument/codeAction` request.
	//
	// @since 3.8.0
	CodeActionLiteralSupport *CodeActionClientCapabilities_CodeActionLiteralSupport `protobuf:"bytes,2,opt,name=code_action_literal_support,json=codeActionLiteralSupport,proto3" json:"code_action_literal_support,omitempty"`
	// Optional. Whether code action supports the `isPreferred` property.
	//
	// @since 3.15.0
	IsPreferredSupport bool `protobuf:"varint,3,opt,name=is_preferred_support,json=isPreferredSupport,proto3" json:"is_preferred_support,omitempty"`
}

func (x *CodeActionClientCapabilities) Reset() {
	*x = CodeActionClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeActionClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeActionClientCapabilities) ProtoMessage() {}

func (x *CodeActionClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeActionClientCapabilities.ProtoReflect.Descriptor instead.
func (*CodeActionClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{154}
}

func (x *CodeActionClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *CodeActionClientCapabilities) GetCodeActionLiteralSupport() *CodeActionClientCapabilities_CodeActionLiteralSupport {
	if x != nil {
		return x.CodeActionLiteralSupport
	}
	return nil
}

func (x *CodeActionClientCapabilities) GetIsPreferredSupport() bool {
	if x != nil {
		return x.IsPreferredSupport
	}
	return false
}

// CodeActionOptions represents a server capabilities option of codeActionProvider.
type CodeActionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
	// CodeActionKinds that this server may return.
	//
	// The list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server
	// may list out every specific kind they provide.
	CodeActionKinds []CodeActionKind `protobuf:"varint,2,rep,packed,name=code_action_kinds,json=codeActionKinds,proto3,enum=protocol.rpc.CodeActionKind" json:"code_action_kinds,omitempty"`
}

func (x *CodeActionOptions) Reset() {
	*x = CodeActionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeActionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeActionOptions) ProtoMessage() {}

func (x *CodeActionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeActionOptions.ProtoReflect.Descriptor instead.
func (*CodeActionOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{155}
}

func (x *CodeActionOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

func (x *CodeActionOptions) GetCodeActionKinds() []CodeActionKind {
	if x != nil {
		return x.CodeActionKinds
	}
	return nil
}

// CodeActionRegistrationOptions represents a registration option of CodeAction.
type CodeActionRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	CodeActionOptions *CodeActionOptions `protobuf:"bytes,2,opt,name=code_action_options,json=codeActionOptions,proto3" json:"code_action_options,omitempty"`
}

func (x *CodeActionRegistrationOptions) Reset() {
	*x = CodeActionRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeActionRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeActionRegistrationOptions) ProtoMessage() {}

func (x *CodeActionRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeActionRegistrationOptions.ProtoReflect.Descriptor instead.
func (*CodeActionRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{156}
}

func (x *CodeActionRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *CodeActionRegistrationOptions) GetCodeActionOptions() *CodeActionOptions {
	if x != nil {
		return x.CodeActionOptions
	}
	return nil
}

// CodeActionRequest params for the CodeActionRequest.
type CodeActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The document in which the command was invoked.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// The range for which the command was invoked.
	Range *protocol.Range `protobuf:"bytes,4,opt,name=range,proto3" json:"range,omitempty"`
	// Context carrying additional information.
	Context *CodeActionContext `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *CodeActionRequest) Reset() {
	*x = CodeActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeActionRequest) ProtoMessage() {}

func (x *CodeActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeActionRequest.ProtoReflect.Descriptor instead.
func (*CodeActionRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{157}
}

func (x *CodeActionRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *CodeActionRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *CodeActionRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *CodeActionRequest) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CodeActionRequest) GetContext() *CodeActionContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// CodeActionContext contains additional diagnostic information about the context in which
// a code action is run.
type CodeActionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An array of diagnostics known on the client side overlapping the range provided to the
	// `textDocument/codeAction` request. They are provided so that the server knows which
	// errors are currently presented to the user for the given range. There is no guarantee
	// that these accurately reflect the error state of the resource. The primary parameter
	// to compute code actions is the provided range.
	Diagnostics []*protocol.Diagnostic `protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// Requested kind of actions to return.
	//
	// Actions not of this kind are filtered out by the client before being shown. So servers
	// can omit computing them.
	Only []CodeActionKind `protobuf:"varint,2,rep,packed,name=only,proto3,enum=protocol.rpc.CodeActionKind" json:"only,omitempty"`
}

func (x *CodeActionContext) Reset() {
	*x = CodeActionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeActionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeActionContext) ProtoMessage() {}

func (x *CodeActionContext) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeActionContext.ProtoReflect.Descriptor instead.
func (*CodeActionContext) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{158}
}

func (x *CodeActionContext) GetDiagnostics() []*protocol.Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *CodeActionContext) GetOnly() []CodeActionKind {
	if x != nil {
		return x.Only
	}
	return nil
}

// CodeAction is a code action represents a change that can be performed in code, e.g. to fix a
// problem or to refactor code.
//
// A CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is
// applied first, then the `command` is executed.
type CodeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A short, human-readable, title for this code action.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// The kind of the code action.
	//
	// Used to filter code actions.
	Kind CodeActionKind `protobuf:"varint,2,opt,name=kind,proto3,enum=protocol.rpc.CodeActionKind" json:"kind,omitempty"`
	// The diagnostics that this code action resolves.
	Diagnostics []*protocol.Diagnostic `protobuf:"bytes,3,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// Optional. Marks this as a preferred action. Preferred actions are used by the `auto fix`
	// command and can be targeted by keybindings.
	//
	// A quick fix should be marked preferred if it properly addresses the underlying error.
	// A refactoring should be marked preferred if it is the most reasonable choice of actions to
	// take.
	//
	// @since 3.15.0
	IsPreferred bool `protobuf:"varint,4,opt,name=is_preferred,json=isPreferred,proto3" json:"is_preferred,omitempty"`
	// Optional. The workspace edit this code action performs.
	Edit *protocol.WorkspaceEdit `protobuf:"bytes,5,opt,name=edit,proto3" json:"edit,omitempty"`
	// Optional. A command this code action executes. If a code action
	// provides an edit and a command, first the edit is
	// executed and then the command.
	Command *protocol.Command `protobuf:"bytes,6,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *CodeAction) Reset() {
	*x = CodeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeAction) ProtoMessage() {}

func (x *CodeAction) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeAction.ProtoReflect.Descriptor instead.
func (*CodeAction) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{159}
}

func (x *CodeAction) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CodeAction) GetKind() CodeActionKind {
	if x != nil {
		return x.Kind
	}
	return CodeActionKind_EMPTY
}

func (x *CodeAction) GetDiagnostics() []*protocol.Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *CodeAction) GetIsPreferred() bool {
	if x != nil {
		return x.IsPreferred
	}
	return false
}

func (x *CodeAction) GetEdit() *protocol.WorkspaceEdit {
	if x != nil {
		return x.Edit
	}
	return nil
}

func (x *CodeAction) GetCommand() *protocol.Command {
	if x != nil {
		return x.Command
	}
	return nil
}

// CodeLensClientCapabilities represents a client capabilities of `textDocument/codeLens` request.
type CodeLensClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether code lens supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *CodeLensClientCapabilities) Reset() {
	*x = CodeLensClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLensClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLensClientCapabilities) ProtoMessage() {}

func (x *CodeLensClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLensClientCapabilities.ProtoReflect.Descriptor instead.
func (*CodeLensClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{160}
}

func (x *CodeLensClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// CodeLensOptions represents a server capabilities option of codeLensProvider.
type CodeLensOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
	// Optional. Code lens has a resolve provider as well.
	ResolveProvider bool `protobuf:"varint,2,opt,name=resolve_provider,json=resolveProvider,proto3" json:"resolve_provider,omitempty"`
}

func (x *CodeLensOptions) Reset() {
	*x = CodeLensOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLensOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLensOptions) ProtoMessage() {}

func (x *CodeLensOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLensOptions.ProtoReflect.Descriptor instead.
func (*CodeLensOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{161}
}

func (x *CodeLensOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

func (x *CodeLensOptions) GetResolveProvider() bool {
	if x != nil {
		return x.ResolveProvider
	}
	return false
}

// CodeLensRegistrationOptions represents a registration option of CodeLens.
type CodeLensRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	CodeLensOptions *CodeLensOptions `protobuf:"bytes,2,opt,name=code_lens_options,json=codeLensOptions,proto3" json:"code_lens_options,omitempty"`
}

func (x *CodeLensRegistrationOptions) Reset() {
	*x = CodeLensRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLensRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLensRegistrationOptions) ProtoMessage() {}

func (x *CodeLensRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLensRegistrationOptions.ProtoReflect.Descriptor instead.
func (*CodeLensRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{162}
}

func (x *CodeLensRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *CodeLensRegistrationOptions) GetCodeLensOptions() *CodeLensOptions {
	if x != nil {
		return x.CodeLensOptions
	}
	return nil
}

// CodeLensRequest is the parameters of a `textDocument/codeLens` request.
type CodeLensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The document to request code lens for.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
}

func (x *CodeLensRequest) Reset() {
	*x = CodeLensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLensRequest) ProtoMessage() {}

func (x *CodeLensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLensRequest.ProtoReflect.Descriptor instead.
func (*CodeLensRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{163}
}

func (x *CodeLensRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *CodeLensRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *CodeLensRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

// CodeLens is a code lens represents a command that should be shown along with
// source text, like the number of references, a way to run tests, etc.
//
// A code lens is _unresolved_ when no command is associated to it. For performance
// reasons the creation of a code lens and resolving should be done in two stages.
type CodeLens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range in which this code lens is valid. Should only span a single line.
	Range *protocol.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// The command this code lens represents.
	Command *protocol.Command `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// A data entry field that is preserved on a code lens item between
	// a code lens and a code lens resolve request.
	Data *anypb.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CodeLens) Reset() {
	*x = CodeLens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLens) ProtoMessage() {}

func (x *CodeLens) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLens.ProtoReflect.Descriptor instead.
func (*CodeLens) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{164}
}

func (x *CodeLens) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CodeLens) GetCommand() *protocol.Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CodeLens) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

// DocumentLinkClientCapabilities represents a client capabilities of `textDocument/documentLink`
// request.
type DocumentLinkClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether document link supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Optional. Whether the client supports the `tooltip` property on `DocumentLink`.
	//
	// @since 3.15.0
	TooltipSupport bool `protobuf:"varint,2,opt,name=tooltip_support,json=tooltipSupport,proto3" json:"tooltip_support,omitempty"`
}

func (x *DocumentLinkClientCapabilities) Reset() {
	*x = DocumentLinkClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLinkClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLinkClientCapabilities) ProtoMessage() {}

func (x *DocumentLinkClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLinkClientCapabilities.ProtoReflect.Descriptor instead.
func (*DocumentLinkClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{165}
}

func (x *DocumentLinkClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *DocumentLinkClientCapabilities) GetTooltipSupport() bool {
	if x != nil {
		return x.TooltipSupport
	}
	return false
}

// DocumentLinkOptions represents a server capabilities option of documentLinkProvider.
type DocumentLinkOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
	// Optional. Document links have a resolve provider as well.
	ResolveProvider bool `protobuf:"varint,2,opt,name=resolve_provider,json=resolveProvider,proto3" json:"resolve_provider,omitempty"`
}

func (x *DocumentLinkOptions) Reset() {
	*x = DocumentLinkOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLinkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLinkOptions) ProtoMessage() {}

func (x *DocumentLinkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLinkOptions.ProtoReflect.Descriptor instead.
func (*DocumentLinkOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{166}
}

func (x *DocumentLinkOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

func (x *DocumentLinkOptions) GetResolveProvider() bool {
	if x != nil {
		return x.ResolveProvider
	}
	return false
}

// DocumentLinkRegistrationOptions represents a registration option of DocumentLink.
type DocumentLinkRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	DocumentLinkOptions *DocumentLinkOptions `protobuf:"bytes,2,opt,name=document_link_options,json=documentLinkOptions,proto3" json:"document_link_options,omitempty"`
}

func (x *DocumentLinkRegistrationOptions) Reset() {
	*x = DocumentLinkRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLinkRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLinkRegistrationOptions) ProtoMessage() {}

func (x *DocumentLinkRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLinkRegistrationOptions.ProtoReflect.Descriptor instead.
func (*DocumentLinkRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{167}
}

func (x *DocumentLinkRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *DocumentLinkRegistrationOptions) GetDocumentLinkOptions() *DocumentLinkOptions {
	if x != nil {
		return x.DocumentLinkOptions
	}
	return nil
}

// DocumentLinkRequest is the parameters of a `textDocument/documentLink` request.
type DocumentLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The document to provide document links for.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
}

func (x *DocumentLinkRequest) Reset() {
	*x = DocumentLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLinkRequest) ProtoMessage() {}

func (x *DocumentLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLinkRequest.ProtoReflect.Descriptor instead.
func (*DocumentLinkRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{168}
}

func (x *DocumentLinkRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *DocumentLinkRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *DocumentLinkRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

// DocumentLink is a document link is a range in a text document that links to an internal or
// external resource, like another text document or a web site.
type DocumentLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range this link applies to.
	Range *protocol.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// The uri this link points to. If missing a resolve request is sent later.
	Target *protocol.DocumentURI `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// The tooltip text when you hover over this link.
	//
	// If a tooltip is provided, is will be displayed in a string that includes instructions on how to
	// trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary depending on OS,
	// user settings, and localization.
	//
	// @since 3.15.0
	Tooltip *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	// A data entry field that is preserved on a document link between a
	// DocumentLinkRequest and a DocumentLinkResolveRequest.
	Data *anypb.Any `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DocumentLink) Reset() {
	*x = DocumentLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLink) ProtoMessage() {}

func (x *DocumentLink) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLink.ProtoReflect.Descriptor instead.
func (*DocumentLink) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{169}
}

func (x *DocumentLink) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *DocumentLink) GetTarget() *protocol.DocumentURI {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DocumentLink) GetTooltip() *wrapperspb.StringValue {
	if x != nil {
		return x.Tooltip
	}
	return nil
}

func (x *DocumentLink) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

// DocumentColorClientCapabilities represents a client capabilities of `textDocument/documentColor`
// request.
type DocumentColorClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether document color supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *DocumentColorClientCapabilities) Reset() {
	*x = DocumentColorClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentColorClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentColorClientCapabilities) ProtoMessage() {}

func (x *DocumentColorClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentColorClientCapabilities.ProtoReflect.Descriptor instead.
func (*DocumentColorClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{170}
}

func (x *DocumentColorClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// DocumentColorOptions represents a server capabilities option of documentColorProvider.
type DocumentColorOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *DocumentColorOptions) Reset() {
	*x = DocumentColorOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentColorOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentColorOptions) ProtoMessage() {}

func (x *DocumentColorOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentColorOptions.ProtoReflect.Descriptor instead.
func (*DocumentColorOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{171}
}

func (x *DocumentColorOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// DocumentColorRegistrationOptions represents a registration option of DocumentColor.
type DocumentColorRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	StaticRegistrationOptions *protocol.StaticRegistrationOptions `protobuf:"bytes,2,opt,name=static_registration_options,json=staticRegistrationOptions,proto3" json:"static_registration_options,omitempty"`
	// extends
	DocumentColorOptions *DocumentColorOptions `protobuf:"bytes,3,opt,name=document_color_options,json=documentColorOptions,proto3" json:"document_color_options,omitempty"`
}

func (x *DocumentColorRegistrationOptions) Reset() {
	*x = DocumentColorRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentColorRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentColorRegistrationOptions) ProtoMessage() {}

func (x *DocumentColorRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentColorRegistrationOptions.ProtoReflect.Descriptor instead.
func (*DocumentColorRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{172}
}

func (x *DocumentColorRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *DocumentColorRegistrationOptions) GetStaticRegistrationOptions() *protocol.StaticRegistrationOptions {
	if x != nil {
		return x.StaticRegistrationOptions
	}
	return nil
}

func (x *DocumentColorRegistrationOptions) GetDocumentColorOptions() *DocumentColorOptions {
	if x != nil {
		return x.DocumentColorOptions
	}
	return nil
}

// DocumentColorRequest is the parameters of a `textDocument/documentColor` request.
type DocumentColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The text document.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
}

func (x *DocumentColorRequest) Reset() {
	*x = DocumentColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentColorRequest) ProtoMessage() {}

func (x *DocumentColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentColorRequest.ProtoReflect.Descriptor instead.
func (*DocumentColorRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{173}
}

func (x *DocumentColorRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *DocumentColorRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *DocumentColorRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

// ColorInformation represents a color information.
type ColorInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range in the document where this color appears.
	Range *protocol.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// The actual color value for this color range.
	Color *Color `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *ColorInformation) Reset() {
	*x = ColorInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorInformation) ProtoMessage() {}

func (x *ColorInformation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorInformation.ProtoReflect.Descriptor instead.
func (*ColorInformation) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{174}
}

func (x *ColorInformation) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ColorInformation) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

// Color represents a color in RGBA space.
type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The red component of this color in the range [0-1].
	//
	// readonly
	Red int32 `protobuf:"varint,1,opt,name=red,proto3" json:"red,omitempty"`
	// The green component of this color in the range [0-1].
	//
	// readonly
	Green int32 `protobuf:"varint,2,opt,name=green,proto3" json:"green,omitempty"`
	// The blue component of this color in the range [0-1].
	//
	// readonly
	Blue int32 `protobuf:"varint,3,opt,name=blue,proto3" json:"blue,omitempty"`
	// The alpha component of this color in the range [0-1].
	//
	// readonly
	Alpha int32 `protobuf:"varint,4,opt,name=alpha,proto3" json:"alpha,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{175}
}

func (x *Color) GetRed() int32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *Color) GetGreen() int32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *Color) GetBlue() int32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *Color) GetAlpha() int32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

// ColorPresentationRequest is the parameters of a `textDocument/colorPresentation` request.
type ColorPresentationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The text document.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// The color information to request presentations for.
	Color *Color `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	// The range where the color would be inserted. Serves as a context.
	Range *protocol.Range `protobuf:"bytes,5,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *ColorPresentationRequest) Reset() {
	*x = ColorPresentationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorPresentationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorPresentationRequest) ProtoMessage() {}

func (x *ColorPresentationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorPresentationRequest.ProtoReflect.Descriptor instead.
func (*ColorPresentationRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{176}
}

func (x *ColorPresentationRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *ColorPresentationRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *ColorPresentationRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *ColorPresentationRequest) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ColorPresentationRequest) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// ColorPresentation represents a respeonse of `textDocument/colorPresentation`.
type ColorPresentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label of this color presentation. It will be shown on the color
	// picker header. By default this is also the text that is inserted when selecting
	// this color presentation.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// An [edit][TextEdit] which is applied to a document when selecting
	// this presentation for the color.  When `falsy` the [label][ColorPresentation.label]
	// is used.
	TextEdit *protocol.TextEdit `protobuf:"bytes,2,opt,name=text_edit,json=textEdit,proto3" json:"text_edit,omitempty"`
	// An optional array of additional [text edits](#TextEdit) that are applied when
	// selecting this color presentation. Edits must not overlap with the main
	// [edit][ColorPresentation.textEdit] nor with themselves.
	AdditionalTextEdits []*protocol.TextEdit `protobuf:"bytes,3,rep,name=additional_text_edits,json=additionalTextEdits,proto3" json:"additional_text_edits,omitempty"`
}

func (x *ColorPresentation) Reset() {
	*x = ColorPresentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorPresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorPresentation) ProtoMessage() {}

func (x *ColorPresentation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorPresentation.ProtoReflect.Descriptor instead.
func (*ColorPresentation) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{177}
}

func (x *ColorPresentation) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ColorPresentation) GetTextEdit() *protocol.TextEdit {
	if x != nil {
		return x.TextEdit
	}
	return nil
}

func (x *ColorPresentation) GetAdditionalTextEdits() []*protocol.TextEdit {
	if x != nil {
		return x.AdditionalTextEdits
	}
	return nil
}

// DocumentFormattingClientCapabilities represents a client capabilities of
// `textDocument/formatting` request.
type DocumentFormattingClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether formatting supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *DocumentFormattingClientCapabilities) Reset() {
	*x = DocumentFormattingClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentFormattingClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentFormattingClientCapabilities) ProtoMessage() {}

func (x *DocumentFormattingClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentFormattingClientCapabilities.ProtoReflect.Descriptor instead.
func (*DocumentFormattingClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{178}
}

func (x *DocumentFormattingClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// DocumentFormattingOptions represents a server capabilities option of documentFormattingProvider.
type DocumentFormattingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *DocumentFormattingOptions) Reset() {
	*x = DocumentFormattingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentFormattingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentFormattingOptions) ProtoMessage() {}

func (x *DocumentFormattingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentFormattingOptions.ProtoReflect.Descriptor instead.
func (*DocumentFormattingOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{179}
}

func (x *DocumentFormattingOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// DocumentFormattingRegistrationOptions represents a registration option of DocumentFormatting.
type DocumentFormattingRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	DocumentFormattingOptions *DocumentFormattingOptions `protobuf:"bytes,2,opt,name=document_formatting_options,json=documentFormattingOptions,proto3" json:"document_formatting_options,omitempty"`
}

func (x *DocumentFormattingRegistrationOptions) Reset() {
	*x = DocumentFormattingRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentFormattingRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentFormattingRegistrationOptions) ProtoMessage() {}

func (x *DocumentFormattingRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentFormattingRegistrationOptions.ProtoReflect.Descriptor instead.
func (*DocumentFormattingRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{180}
}

func (x *DocumentFormattingRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *DocumentFormattingRegistrationOptions) GetDocumentFormattingOptions() *DocumentFormattingOptions {
	if x != nil {
		return x.DocumentFormattingOptions
	}
	return nil
}

// DocumentFormattingRequest is the parameters of a `textDocument/formatting` request.
type DocumentFormattingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// The document to format.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,2,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// The format options.
	Options *FormattingOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *DocumentFormattingRequest) Reset() {
	*x = DocumentFormattingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentFormattingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentFormattingRequest) ProtoMessage() {}

func (x *DocumentFormattingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentFormattingRequest.ProtoReflect.Descriptor instead.
func (*DocumentFormattingRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{181}
}

func (x *DocumentFormattingRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *DocumentFormattingRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *DocumentFormattingRequest) GetOptions() *FormattingOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// FormattingOptions value-object describing what options formatting should use.
type FormattingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of a tab in spaces.
	TabSize int32 `protobuf:"varint,1,opt,name=tab_size,json=tabSize,proto3" json:"tab_size,omitempty"`
	// Prefer spaces over tabs.
	InsertSpaces bool `protobuf:"varint,2,opt,name=insert_spaces,json=insertSpaces,proto3" json:"insert_spaces,omitempty"`
	// Optional. Trim trailing whitespace on a line.
	//
	// @since 3.15.0
	TrimTrailingWhitespace bool `protobuf:"varint,3,opt,name=trim_trailing_whitespace,json=trimTrailingWhitespace,proto3" json:"trim_trailing_whitespace,omitempty"`
	// Optional. Insert a newline character at the end of the file if one does not exist.
	//
	// @since 3.15.0
	InsertFinalNewline bool `protobuf:"varint,4,opt,name=insert_final_newline,json=insertFinalNewline,proto3" json:"insert_final_newline,omitempty"`
	// Optional. Trim all newlines after the final newline at the end of the file.
	//
	// @since 3.15.0
	TrimFinalNewlines bool `protobuf:"varint,5,opt,name=trim_final_newlines,json=trimFinalNewlines,proto3" json:"trim_final_newlines,omitempty"`
	// Signature for further properties.
	Key map[string]*FormattingOptions_Value `protobuf:"bytes,9,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FormattingOptions) Reset() {
	*x = FormattingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormattingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormattingOptions) ProtoMessage() {}

func (x *FormattingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormattingOptions.ProtoReflect.Descriptor instead.
func (*FormattingOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{182}
}

func (x *FormattingOptions) GetTabSize() int32 {
	if x != nil {
		return x.TabSize
	}
	return 0
}

func (x *FormattingOptions) GetInsertSpaces() bool {
	if x != nil {
		return x.InsertSpaces
	}
	return false
}

func (x *FormattingOptions) GetTrimTrailingWhitespace() bool {
	if x != nil {
		return x.TrimTrailingWhitespace
	}
	return false
}

func (x *FormattingOptions) GetInsertFinalNewline() bool {
	if x != nil {
		return x.InsertFinalNewline
	}
	return false
}

func (x *FormattingOptions) GetTrimFinalNewlines() bool {
	if x != nil {
		return x.TrimFinalNewlines
	}
	return false
}

func (x *FormattingOptions) GetKey() map[string]*FormattingOptions_Value {
	if x != nil {
		return x.Key
	}
	return nil
}

// DocumentRangeFormattingClientCapabilities represents a client capabilities of
// `textDocument/rangeFormatting` request.
type DocumentRangeFormattingClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether formatting supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *DocumentRangeFormattingClientCapabilities) Reset() {
	*x = DocumentRangeFormattingClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentRangeFormattingClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRangeFormattingClientCapabilities) ProtoMessage() {}

func (x *DocumentRangeFormattingClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRangeFormattingClientCapabilities.ProtoReflect.Descriptor instead.
func (*DocumentRangeFormattingClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{183}
}

func (x *DocumentRangeFormattingClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// DocumentRangeFormattingOptions represents a server capabilities option of
// documentRangeFormattingProvider.
type DocumentRangeFormattingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *DocumentRangeFormattingOptions) Reset() {
	*x = DocumentRangeFormattingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentRangeFormattingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRangeFormattingOptions) ProtoMessage() {}

func (x *DocumentRangeFormattingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRangeFormattingOptions.ProtoReflect.Descriptor instead.
func (*DocumentRangeFormattingOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{184}
}

func (x *DocumentRangeFormattingOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// DocumentRangeFormattingRegistrationOptions represents a registration option of
// DocumentRangeFormatting.
type DocumentRangeFormattingRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	DocumentFormattingOptions *DocumentFormattingOptions `protobuf:"bytes,2,opt,name=document_formatting_options,json=documentFormattingOptions,proto3" json:"document_formatting_options,omitempty"`
}

func (x *DocumentRangeFormattingRegistrationOptions) Reset() {
	*x = DocumentRangeFormattingRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentRangeFormattingRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRangeFormattingRegistrationOptions) ProtoMessage() {}

func (x *DocumentRangeFormattingRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRangeFormattingRegistrationOptions.ProtoReflect.Descriptor instead.
func (*DocumentRangeFormattingRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{185}
}

func (x *DocumentRangeFormattingRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *DocumentRangeFormattingRegistrationOptions) GetDocumentFormattingOptions() *DocumentFormattingOptions {
	if x != nil {
		return x.DocumentFormattingOptions
	}
	return nil
}

// DocumentRangeFormattingRequest is the parameters of a `textDocument/rangeFormatting` request.
type DocumentRangeFormattingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// The document to format.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,2,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// The range to format
	Range *protocol.Range `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	// The format options
	Options *FormattingOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *DocumentRangeFormattingRequest) Reset() {
	*x = DocumentRangeFormattingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentRangeFormattingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRangeFormattingRequest) ProtoMessage() {}

func (x *DocumentRangeFormattingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRangeFormattingRequest.ProtoReflect.Descriptor instead.
func (*DocumentRangeFormattingRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{186}
}

func (x *DocumentRangeFormattingRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *DocumentRangeFormattingRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *DocumentRangeFormattingRequest) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *DocumentRangeFormattingRequest) GetOptions() *FormattingOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// DocumentOnTypeFormattingClientCapabilities represents a client capabilities of
// `textDocument/onTypeFormatting` request.
type DocumentOnTypeFormattingClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether on type formatting supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *DocumentOnTypeFormattingClientCapabilities) Reset() {
	*x = DocumentOnTypeFormattingClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentOnTypeFormattingClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentOnTypeFormattingClientCapabilities) ProtoMessage() {}

func (x *DocumentOnTypeFormattingClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentOnTypeFormattingClientCapabilities.ProtoReflect.Descriptor instead.
func (*DocumentOnTypeFormattingClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{187}
}

func (x *DocumentOnTypeFormattingClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// DocumentOnTypeFormattingOptions represents a server capabilities option of
// documentOnTypeFormattingProvider.
type DocumentOnTypeFormattingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A character on which formatting should be triggered, like `}`.
	FirstTriggerCharacter string `protobuf:"bytes,1,opt,name=first_trigger_character,json=firstTriggerCharacter,proto3" json:"first_trigger_character,omitempty"`
	// More trigger characters.
	MoreTriggerCharacter []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=more_trigger_character,json=moreTriggerCharacter,proto3" json:"more_trigger_character,omitempty"`
}

func (x *DocumentOnTypeFormattingOptions) Reset() {
	*x = DocumentOnTypeFormattingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentOnTypeFormattingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentOnTypeFormattingOptions) ProtoMessage() {}

func (x *DocumentOnTypeFormattingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentOnTypeFormattingOptions.ProtoReflect.Descriptor instead.
func (*DocumentOnTypeFormattingOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{188}
}

func (x *DocumentOnTypeFormattingOptions) GetFirstTriggerCharacter() string {
	if x != nil {
		return x.FirstTriggerCharacter
	}
	return ""
}

func (x *DocumentOnTypeFormattingOptions) GetMoreTriggerCharacter() []*wrapperspb.StringValue {
	if x != nil {
		return x.MoreTriggerCharacter
	}
	return nil
}

// DocumentOnTypeFormattingRegistrationOptions represents a registration option of
// DocumentOnTypeFormatting.
type DocumentOnTypeFormattingRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	DocumentOnTypeFormattingOptions *DocumentOnTypeFormattingOptions `protobuf:"bytes,2,opt,name=document_on_type_formatting_options,json=documentOnTypeFormattingOptions,proto3" json:"document_on_type_formatting_options,omitempty"`
}

func (x *DocumentOnTypeFormattingRegistrationOptions) Reset() {
	*x = DocumentOnTypeFormattingRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentOnTypeFormattingRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentOnTypeFormattingRegistrationOptions) ProtoMessage() {}

func (x *DocumentOnTypeFormattingRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentOnTypeFormattingRegistrationOptions.ProtoReflect.Descriptor instead.
func (*DocumentOnTypeFormattingRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{189}
}

func (x *DocumentOnTypeFormattingRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *DocumentOnTypeFormattingRegistrationOptions) GetDocumentOnTypeFormattingOptions() *DocumentOnTypeFormattingOptions {
	if x != nil {
		return x.DocumentOnTypeFormattingOptions
	}
	return nil
}

// DocumentOnTypeFormattingRequest is the parameters of a `textDocument/onTypeFormatting` request.
type DocumentOnTypeFormattingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// The character that has been typed.
	Ch string `protobuf:"bytes,2,opt,name=ch,proto3" json:"ch,omitempty"`
	// The format options.
	Options *FormattingOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *DocumentOnTypeFormattingRequest) Reset() {
	*x = DocumentOnTypeFormattingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentOnTypeFormattingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentOnTypeFormattingRequest) ProtoMessage() {}

func (x *DocumentOnTypeFormattingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentOnTypeFormattingRequest.ProtoReflect.Descriptor instead.
func (*DocumentOnTypeFormattingRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{190}
}

func (x *DocumentOnTypeFormattingRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *DocumentOnTypeFormattingRequest) GetCh() string {
	if x != nil {
		return x.Ch
	}
	return ""
}

func (x *DocumentOnTypeFormattingRequest) GetOptions() *FormattingOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// RenameClientCapabilities represents a client capabilities of `textDocument/rename` request.
type RenameClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether rename supports dynamic registration.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Optional. Client supports testing for validity of rename operations
	// before execution.
	//
	// @since version 3.12.0
	PrepareSupport bool `protobuf:"varint,2,opt,name=prepare_support,json=prepareSupport,proto3" json:"prepare_support,omitempty"`
}

func (x *RenameClientCapabilities) Reset() {
	*x = RenameClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameClientCapabilities) ProtoMessage() {}

func (x *RenameClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameClientCapabilities.ProtoReflect.Descriptor instead.
func (*RenameClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{191}
}

func (x *RenameClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *RenameClientCapabilities) GetPrepareSupport() bool {
	if x != nil {
		return x.PrepareSupport
	}
	return false
}

// RenameOptions represents a server capabilities option of renameProvider.
type RenameOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
	// Optional. Renames should be checked and tested before being executed.
	PrepareProvider bool `protobuf:"varint,2,opt,name=prepare_provider,json=prepareProvider,proto3" json:"prepare_provider,omitempty"`
}

func (x *RenameOptions) Reset() {
	*x = RenameOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameOptions) ProtoMessage() {}

func (x *RenameOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameOptions.ProtoReflect.Descriptor instead.
func (*RenameOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{192}
}

func (x *RenameOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

func (x *RenameOptions) GetPrepareProvider() bool {
	if x != nil {
		return x.PrepareProvider
	}
	return false
}

// RenameRegistrationOptions represents a registration option of Rename.
type RenameRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	RenameOptions *RenameOptions `protobuf:"bytes,2,opt,name=rename_options,json=renameOptions,proto3" json:"rename_options,omitempty"`
}

func (x *RenameRegistrationOptions) Reset() {
	*x = RenameRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRegistrationOptions) ProtoMessage() {}

func (x *RenameRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRegistrationOptions.ProtoReflect.Descriptor instead.
func (*RenameRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{193}
}

func (x *RenameRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *RenameRegistrationOptions) GetRenameOptions() *RenameOptions {
	if x != nil {
		return x.RenameOptions
	}
	return nil
}

// RenameRequest is the parameters of a `textDocument/rename` request.
type RenameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// The new name of the symbol. If the given name is not valid the
	// request must return a [ResponseError](#ResponseError) with an
	// appropriate message set.
	//
	// (-- api-linter: core::0122::name-suffix=disabled --)
	NewName string `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameRequest) Reset() {
	*x = RenameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRequest) ProtoMessage() {}

func (x *RenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRequest.ProtoReflect.Descriptor instead.
func (*RenameRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{194}
}

func (x *RenameRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *RenameRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *RenameRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

// PrepareRenameRequest is the parameters of a `textDocument/prepareRename` request.
type PrepareRenameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
}

func (x *PrepareRenameRequest) Reset() {
	*x = PrepareRenameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareRenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRenameRequest) ProtoMessage() {}

func (x *PrepareRenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRenameRequest.ProtoReflect.Descriptor instead.
func (*PrepareRenameRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{195}
}

func (x *PrepareRenameRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

// FoldingRangeClientCapabilities represents a client capabilities of `textDocument/foldingRange`
// request.
type FoldingRangeClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether implementation supports dynamic registration for folding range providers. If
	// this is set to `true` the client supports the new `FoldingRangeRegistrationOptions` return
	// value for the corresponding server capability as well.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// The maximum number of folding ranges that the client prefers to receive per document. The value
	// serves as a hint, servers are free to follow the limit.
	RangeLimit *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=range_limit,json=rangeLimit,proto3" json:"range_limit,omitempty"`
	// Optional. If set, the client signals that it only supports folding complete lines. If set,
	// client will ignore specified `startCharacter` and `endCharacter` properties in a FoldingRange.
	LineFoldingOnly bool `protobuf:"varint,3,opt,name=line_folding_only,json=lineFoldingOnly,proto3" json:"line_folding_only,omitempty"`
}

func (x *FoldingRangeClientCapabilities) Reset() {
	*x = FoldingRangeClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldingRangeClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldingRangeClientCapabilities) ProtoMessage() {}

func (x *FoldingRangeClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldingRangeClientCapabilities.ProtoReflect.Descriptor instead.
func (*FoldingRangeClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{196}
}

func (x *FoldingRangeClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *FoldingRangeClientCapabilities) GetRangeLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.RangeLimit
	}
	return nil
}

func (x *FoldingRangeClientCapabilities) GetLineFoldingOnly() bool {
	if x != nil {
		return x.LineFoldingOnly
	}
	return false
}

// FoldingRangeOptions represents a server capabilities option of foldingRangeProvider.
type FoldingRangeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *FoldingRangeOptions) Reset() {
	*x = FoldingRangeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldingRangeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldingRangeOptions) ProtoMessage() {}

func (x *FoldingRangeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldingRangeOptions.ProtoReflect.Descriptor instead.
func (*FoldingRangeOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{197}
}

func (x *FoldingRangeOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// FoldingRangeRegistrationOptions represents a registration option of FoldingRange.
type FoldingRangeRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	FoldingRangeOptions             *FoldingRangeOptions                      `protobuf:"bytes,2,opt,name=folding_range_options,json=foldingRangeOptions,proto3" json:"folding_range_options,omitempty"`
	// extends
	StaticRegistrationOptions *protocol.StaticRegistrationOptions `protobuf:"bytes,3,opt,name=static_registration_options,json=staticRegistrationOptions,proto3" json:"static_registration_options,omitempty"`
}

func (x *FoldingRangeRegistrationOptions) Reset() {
	*x = FoldingRangeRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldingRangeRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldingRangeRegistrationOptions) ProtoMessage() {}

func (x *FoldingRangeRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldingRangeRegistrationOptions.ProtoReflect.Descriptor instead.
func (*FoldingRangeRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{198}
}

func (x *FoldingRangeRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *FoldingRangeRegistrationOptions) GetFoldingRangeOptions() *FoldingRangeOptions {
	if x != nil {
		return x.FoldingRangeOptions
	}
	return nil
}

func (x *FoldingRangeRegistrationOptions) GetStaticRegistrationOptions() *protocol.StaticRegistrationOptions {
	if x != nil {
		return x.StaticRegistrationOptions
	}
	return nil
}

// FoldingRangeRequest is the parameters of a `textDocument/foldingRange` request.
type FoldingRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The text document.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
}

func (x *FoldingRangeRequest) Reset() {
	*x = FoldingRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldingRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldingRangeRequest) ProtoMessage() {}

func (x *FoldingRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldingRangeRequest.ProtoReflect.Descriptor instead.
func (*FoldingRangeRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{199}
}

func (x *FoldingRangeRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *FoldingRangeRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *FoldingRangeRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

// FoldingRange represents a folding range.
type FoldingRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The zero-based line number from where the folded range starts.
	StartLine int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	// The zero-based character offset from where the folded range starts. If not defined, defaults to
	// the length of the start line.
	StartCharacter *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=start_character,json=startCharacter,proto3" json:"start_character,omitempty"`
	// The zero-based line number where the folded range ends.
	EndLine int32 `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	// The zero-based character offset before the folded range ends. If not defined, defaults to the
	// length of the end line.
	EndCharacter *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=end_character,json=endCharacter,proto3" json:"end_character,omitempty"`
	// Describes the kind of the folding range such as `comment` or `region`. The kind
	// is used to categorize folding ranges and used by commands like 'Fold all comments'. See
	// [FoldingRangeKind][FoldingRangeKind] for an enumeration of standardized kinds.
	Kind FoldingRangeKind `protobuf:"varint,5,opt,name=kind,proto3,enum=protocol.rpc.FoldingRangeKind" json:"kind,omitempty"`
}

func (x *FoldingRange) Reset() {
	*x = FoldingRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldingRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldingRange) ProtoMessage() {}

func (x *FoldingRange) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldingRange.ProtoReflect.Descriptor instead.
func (*FoldingRange) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{200}
}

func (x *FoldingRange) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *FoldingRange) GetStartCharacter() *wrapperspb.Int32Value {
	if x != nil {
		return x.StartCharacter
	}
	return nil
}

func (x *FoldingRange) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *FoldingRange) GetEndCharacter() *wrapperspb.Int32Value {
	if x != nil {
		return x.EndCharacter
	}
	return nil
}

func (x *FoldingRange) GetKind() FoldingRangeKind {
	if x != nil {
		return x.Kind
	}
	return FoldingRangeKind_FOLDING_RANGE_KIND_UNSPECIFIED
}

// FoldingRangeClientCapabilities represents a client capabilities of `textDocument/selectionRange`
// request.
type SelectionRangeClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether implementatirn supports dynamic registration for selection range providers.
	// If this is set to `true` the client supports the new `SelectionRangeRegistrationOptions` return
	// value for the corresponding server capability as well.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *SelectionRangeClientCapabilities) Reset() {
	*x = SelectionRangeClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionRangeClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionRangeClientCapabilities) ProtoMessage() {}

func (x *SelectionRangeClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionRangeClientCapabilities.ProtoReflect.Descriptor instead.
func (*SelectionRangeClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{201}
}

func (x *SelectionRangeClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// SelectionRangeOptions represents a server capabilities option of selectionRangeProvider.
type SelectionRangeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *SelectionRangeOptions) Reset() {
	*x = SelectionRangeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionRangeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionRangeOptions) ProtoMessage() {}

func (x *SelectionRangeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionRangeOptions.ProtoReflect.Descriptor instead.
func (*SelectionRangeOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{202}
}

func (x *SelectionRangeOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// SelectionRangeRegistrationOptions represents a registration option of SelectionRange.
type SelectionRangeRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionRangeOptions *SelectionRangeOptions `protobuf:"bytes,1,opt,name=selection_range_options,json=selectionRangeOptions,proto3" json:"selection_range_options,omitempty"`
	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,2,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	// extends
	StaticRegistrationOptions *protocol.StaticRegistrationOptions `protobuf:"bytes,3,opt,name=static_registration_options,json=staticRegistrationOptions,proto3" json:"static_registration_options,omitempty"`
}

func (x *SelectionRangeRegistrationOptions) Reset() {
	*x = SelectionRangeRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionRangeRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionRangeRegistrationOptions) ProtoMessage() {}

func (x *SelectionRangeRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionRangeRegistrationOptions.ProtoReflect.Descriptor instead.
func (*SelectionRangeRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{203}
}

func (x *SelectionRangeRegistrationOptions) GetSelectionRangeOptions() *SelectionRangeOptions {
	if x != nil {
		return x.SelectionRangeOptions
	}
	return nil
}

func (x *SelectionRangeRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *SelectionRangeRegistrationOptions) GetStaticRegistrationOptions() *protocol.StaticRegistrationOptions {
	if x != nil {
		return x.StaticRegistrationOptions
	}
	return nil
}

// SelectionRangeRequest is the parameters of a `textDocument/selectionRange` request.
type SelectionRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The text document.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// The positions inside the text document.
	Positions []*protocol.Position `protobuf:"bytes,4,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *SelectionRangeRequest) Reset() {
	*x = SelectionRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionRangeRequest) ProtoMessage() {}

func (x *SelectionRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionRangeRequest.ProtoReflect.Descriptor instead.
func (*SelectionRangeRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{204}
}

func (x *SelectionRangeRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *SelectionRangeRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *SelectionRangeRequest) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *SelectionRangeRequest) GetPositions() []*protocol.Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

// SelectionRange represents a range of selection.
type SelectionRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The [range][Range] of this selection range.
	Range *protocol.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// The parent selection range containing this range. Therefore `parent.range` must contain
	// `this.range`.
	Parent *SelectionRange `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *SelectionRange) Reset() {
	*x = SelectionRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionRange) ProtoMessage() {}

func (x *SelectionRange) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionRange.ProtoReflect.Descriptor instead.
func (*SelectionRange) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{205}
}

func (x *SelectionRange) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *SelectionRange) GetParent() *SelectionRange {
	if x != nil {
		return x.Parent
	}
	return nil
}

// CallHierarchyClientCapabilities represents a client capabilities of
// `textDocument/prepareCallHierarchy` request.
//
// @since 3.16.0
type CallHierarchyClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether implementation supports dynamic registration. If this is set to `true`
	// the client supports the new
	// `([TextDocumentRegistrationOptions][TextDocumentRegistrationOptions] &
	// [StaticRegistrationOptions][StaticRegistrationOptions])` return value for the corresponding
	// server capability as well.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
}

func (x *CallHierarchyClientCapabilities) Reset() {
	*x = CallHierarchyClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyClientCapabilities) ProtoMessage() {}

func (x *CallHierarchyClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyClientCapabilities.ProtoReflect.Descriptor instead.
func (*CallHierarchyClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{206}
}

func (x *CallHierarchyClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

// CallHierarchyOptions represents a server capabilities option of callHierarchyProvider.
//
// @since 3.16.0
type CallHierarchyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
}

func (x *CallHierarchyOptions) Reset() {
	*x = CallHierarchyOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyOptions) ProtoMessage() {}

func (x *CallHierarchyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyOptions.ProtoReflect.Descriptor instead.
func (*CallHierarchyOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{207}
}

func (x *CallHierarchyOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

// CallHierarchyRegistrationOptions represents a registration option of CallHierarchy.
//
// @since 3.16.0
type CallHierarchyRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	CallHierarchyOptions            *CallHierarchyOptions                     `protobuf:"bytes,2,opt,name=call_hierarchy_options,json=callHierarchyOptions,proto3" json:"call_hierarchy_options,omitempty"`
	// extends
	StaticRegistrationOptions *protocol.StaticRegistrationOptions `protobuf:"bytes,3,opt,name=static_registration_options,json=staticRegistrationOptions,proto3" json:"static_registration_options,omitempty"`
}

func (x *CallHierarchyRegistrationOptions) Reset() {
	*x = CallHierarchyRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyRegistrationOptions) ProtoMessage() {}

func (x *CallHierarchyRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyRegistrationOptions.ProtoReflect.Descriptor instead.
func (*CallHierarchyRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{208}
}

func (x *CallHierarchyRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *CallHierarchyRegistrationOptions) GetCallHierarchyOptions() *CallHierarchyOptions {
	if x != nil {
		return x.CallHierarchyOptions
	}
	return nil
}

func (x *CallHierarchyRegistrationOptions) GetStaticRegistrationOptions() *protocol.StaticRegistrationOptions {
	if x != nil {
		return x.StaticRegistrationOptions
	}
	return nil
}

// CallHierarchyPrepareRequest is the parameters of a `textDocument/prepareCallHierarchy` request.
//
// @since 3.16.0
type CallHierarchyPrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentPositionParams *protocol.TextDocumentPositionParams `protobuf:"bytes,1,opt,name=text_document_position_params,json=textDocumentPositionParams,proto3" json:"text_document_position_params,omitempty"`
	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,2,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
}

func (x *CallHierarchyPrepareRequest) Reset() {
	*x = CallHierarchyPrepareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyPrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyPrepareRequest) ProtoMessage() {}

func (x *CallHierarchyPrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyPrepareRequest.ProtoReflect.Descriptor instead.
func (*CallHierarchyPrepareRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{209}
}

func (x *CallHierarchyPrepareRequest) GetTextDocumentPositionParams() *protocol.TextDocumentPositionParams {
	if x != nil {
		return x.TextDocumentPositionParams
	}
	return nil
}

func (x *CallHierarchyPrepareRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

// CallHierarchyItem represents a item of call hierarchy.
//
// @since 3.16.0
// (-- api-linter: core::0123::resource-annotation=disabled --)
type CallHierarchyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this item.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The kind of this item.
	Kind SymbolKind `protobuf:"varint,2,opt,name=kind,proto3,enum=protocol.rpc.SymbolKind" json:"kind,omitempty"`
	// Tags for this item.
	Tags []SymbolTag `protobuf:"varint,3,rep,packed,name=tags,proto3,enum=protocol.rpc.SymbolTag" json:"tags,omitempty"`
	// More detail for this item, e.g. the signature of a function.
	Detail *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	// The resource identifier of this item.
	Uri *protocol.DocumentURI `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	// The range enclosing this symbol not including leading/trailing whitespace but everything else,
	// e.g. comments and code.
	Range *protocol.Range `protobuf:"bytes,6,opt,name=range,proto3" json:"range,omitempty"`
	// The range that should be selected and revealed when this symbol is being picked, e.g. the name
	// of a function. Must be contained by the [`range`][CallHierarchyItem.range].
	SelectionRange *protocol.Range `protobuf:"bytes,7,opt,name=selection_range,json=selectionRange,proto3" json:"selection_range,omitempty"`
}

func (x *CallHierarchyItem) Reset() {
	*x = CallHierarchyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyItem) ProtoMessage() {}

func (x *CallHierarchyItem) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyItem.ProtoReflect.Descriptor instead.
func (*CallHierarchyItem) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{210}
}

func (x *CallHierarchyItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CallHierarchyItem) GetKind() SymbolKind {
	if x != nil {
		return x.Kind
	}
	return SymbolKind_SYMBOL_KIND_UNSPECIFIED
}

func (x *CallHierarchyItem) GetTags() []SymbolTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CallHierarchyItem) GetDetail() *wrapperspb.StringValue {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *CallHierarchyItem) GetUri() *protocol.DocumentURI {
	if x != nil {
		return x.Uri
	}
	return nil
}

func (x *CallHierarchyItem) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CallHierarchyItem) GetSelectionRange() *protocol.Range {
	if x != nil {
		return x.SelectionRange
	}
	return nil
}

// CallHierarchyIncomingCallsRequest is the parameters of a `textDocument/incomingCalls` request.
//
// @since 3.16.0
type CallHierarchyIncomingCallsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	Item                *CallHierarchyItem   `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CallHierarchyIncomingCallsRequest) Reset() {
	*x = CallHierarchyIncomingCallsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyIncomingCallsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyIncomingCallsRequest) ProtoMessage() {}

func (x *CallHierarchyIncomingCallsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyIncomingCallsRequest.ProtoReflect.Descriptor instead.
func (*CallHierarchyIncomingCallsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{211}
}

func (x *CallHierarchyIncomingCallsRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *CallHierarchyIncomingCallsRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *CallHierarchyIncomingCallsRequest) GetItem() *CallHierarchyItem {
	if x != nil {
		return x.Item
	}
	return nil
}

// CallHierarchyIncomingCall represents a item of call hierarchy incoming call.
//
// @since 3.16.0
type CallHierarchyIncomingCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The item that makes the call.
	// (-- api-linter: core::0140::reserved-words=disabled
	//     api-linter: core::0140::prepositions=disabled --)
	From *CallHierarchyItem `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// The ranges at which the calls appear. This is relative to the caller
	// denoted by [`this.from`][CallHierarchyIncomingCall.from].
	// (-- api-linter: core::0140::prepositions=disabled --)
	FromRanges []*protocol.Range `protobuf:"bytes,2,rep,name=from_ranges,json=fromRanges,proto3" json:"from_ranges,omitempty"`
}

func (x *CallHierarchyIncomingCall) Reset() {
	*x = CallHierarchyIncomingCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyIncomingCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyIncomingCall) ProtoMessage() {}

func (x *CallHierarchyIncomingCall) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyIncomingCall.ProtoReflect.Descriptor instead.
func (*CallHierarchyIncomingCall) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{212}
}

func (x *CallHierarchyIncomingCall) GetFrom() *CallHierarchyItem {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CallHierarchyIncomingCall) GetFromRanges() []*protocol.Range {
	if x != nil {
		return x.FromRanges
	}
	return nil
}

// CallHierarchyOutgoingCallsRequest is the parameters of a `callHierarchy/outgoingCalls` request.
//
// @since 3.16.0
type CallHierarchyOutgoingCallsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	Item                *CallHierarchyItem   `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CallHierarchyOutgoingCallsRequest) Reset() {
	*x = CallHierarchyOutgoingCallsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyOutgoingCallsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyOutgoingCallsRequest) ProtoMessage() {}

func (x *CallHierarchyOutgoingCallsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyOutgoingCallsRequest.ProtoReflect.Descriptor instead.
func (*CallHierarchyOutgoingCallsRequest) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{213}
}

func (x *CallHierarchyOutgoingCallsRequest) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *CallHierarchyOutgoingCallsRequest) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *CallHierarchyOutgoingCallsRequest) GetItem() *CallHierarchyItem {
	if x != nil {
		return x.Item
	}
	return nil
}

// CallHierarchyOutgoingCall represents a item of call hierarchy outgoing call.
//
// @since 3.16.0
type CallHierarchyOutgoingCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The item that is called.
	// (-- api-linter: core::0140::prepositions=disabled --)
	To *CallHierarchyItem `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	// The range at which this item is called. This is the range relative to the caller, e.g the item
	// passed to
	// [`provideCallHierarchyOutgoingCalls`][CallHierarchyItemProvider.provideCallHierarchyOutgoingCalls]
	// and not [`this.to`][CallHierarchyOutgoingCall.to].
	// (-- api-linter: core::0140::prepositions=disabled --)
	FromRanges []*protocol.Range `protobuf:"bytes,2,rep,name=from_ranges,json=fromRanges,proto3" json:"from_ranges,omitempty"`
}

func (x *CallHierarchyOutgoingCall) Reset() {
	*x = CallHierarchyOutgoingCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyOutgoingCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyOutgoingCall) ProtoMessage() {}

func (x *CallHierarchyOutgoingCall) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyOutgoingCall.ProtoReflect.Descriptor instead.
func (*CallHierarchyOutgoingCall) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{214}
}

func (x *CallHierarchyOutgoingCall) GetTo() *CallHierarchyItem {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CallHierarchyOutgoingCall) GetFromRanges() []*protocol.Range {
	if x != nil {
		return x.FromRanges
	}
	return nil
}

// SemanticTokensLegend represents a legend of semantic tokens.
//
// @since 3.16.0
type SemanticTokensLegend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token types a server uses.
	TokenTypes []SemanticTokenTypes `protobuf:"varint,1,rep,packed,name=token_types,json=tokenTypes,proto3,enum=protocol.rpc.SemanticTokenTypes" json:"token_types,omitempty"`
	// The token modifiers a server uses.
	TokenModifiers []SemanticTokenModifiers `protobuf:"varint,2,rep,packed,name=token_modifiers,json=tokenModifiers,proto3,enum=protocol.rpc.SemanticTokenModifiers" json:"token_modifiers,omitempty"`
}

func (x *SemanticTokensLegend) Reset() {
	*x = SemanticTokensLegend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensLegend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensLegend) ProtoMessage() {}

func (x *SemanticTokensLegend) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensLegend.ProtoReflect.Descriptor instead.
func (*SemanticTokensLegend) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{215}
}

func (x *SemanticTokensLegend) GetTokenTypes() []SemanticTokenTypes {
	if x != nil {
		return x.TokenTypes
	}
	return nil
}

func (x *SemanticTokensLegend) GetTokenModifiers() []SemanticTokenModifiers {
	if x != nil {
		return x.TokenModifiers
	}
	return nil
}

// SemanticTokensClientCapabilities represents a client capabilities of
// `textDocument/semanticTokens/*` request.
//
// @since 3.16.0
type SemanticTokensClientCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether implementation supports dynamic registration. If this is set to `true`
	// the client supports the new
	// `([TextDocumentRegistrationOptions][TextDocumentRegistrationOptions] &
	// [StaticRegistrationOptions][StaticRegistrationOptions])` return value for the corresponding
	// server capability as well.
	DynamicRegistration bool `protobuf:"varint,1,opt,name=dynamic_registration,json=dynamicRegistration,proto3" json:"dynamic_registration,omitempty"`
	// Which requests the client supports and might send to the server.
	Requests *SemanticTokensClientCapabilities_Requests `protobuf:"bytes,2,opt,name=requests,proto3" json:"requests,omitempty"`
	// The token types that the client supports.
	TokenTypes []SemanticTokenTypes `protobuf:"varint,3,rep,packed,name=token_types,json=tokenTypes,proto3,enum=protocol.rpc.SemanticTokenTypes" json:"token_types,omitempty"`
	// The token modifiers that the client supports.
	TokenModifiers []SemanticTokenModifiers `protobuf:"varint,4,rep,packed,name=token_modifiers,json=tokenModifiers,proto3,enum=protocol.rpc.SemanticTokenModifiers" json:"token_modifiers,omitempty"`
	// The formats the clients supports.
	Formats []TokenFormat `protobuf:"varint,5,rep,packed,name=formats,proto3,enum=protocol.rpc.TokenFormat" json:"formats,omitempty"`
}

func (x *SemanticTokensClientCapabilities) Reset() {
	*x = SemanticTokensClientCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensClientCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensClientCapabilities) ProtoMessage() {}

func (x *SemanticTokensClientCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensClientCapabilities.ProtoReflect.Descriptor instead.
func (*SemanticTokensClientCapabilities) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{216}
}

func (x *SemanticTokensClientCapabilities) GetDynamicRegistration() bool {
	if x != nil {
		return x.DynamicRegistration
	}
	return false
}

func (x *SemanticTokensClientCapabilities) GetRequests() *SemanticTokensClientCapabilities_Requests {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *SemanticTokensClientCapabilities) GetTokenTypes() []SemanticTokenTypes {
	if x != nil {
		return x.TokenTypes
	}
	return nil
}

func (x *SemanticTokensClientCapabilities) GetTokenModifiers() []SemanticTokenModifiers {
	if x != nil {
		return x.TokenModifiers
	}
	return nil
}

func (x *SemanticTokensClientCapabilities) GetFormats() []TokenFormat {
	if x != nil {
		return x.Formats
	}
	return nil
}

// SemanticTokensOptions represents a server capabilities option of semanticTokensProvider.
//
// @since 3.16.0
type SemanticTokensOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressOptions *protocol.WorkDoneProgressOptions `protobuf:"bytes,1,opt,name=work_done_progress_options,json=workDoneProgressOptions,proto3" json:"work_done_progress_options,omitempty"`
	// The legend used by the server
	Legend *SemanticTokensLegend `protobuf:"bytes,2,opt,name=legend,proto3" json:"legend,omitempty"`
	// Types that are assignable to Range:
	//	*SemanticTokensOptions_EnableRange
	//	*SemanticTokensOptions_Empty
	Range isSemanticTokensOptions_Range `protobuf_oneof:"range"`
	// Types that are assignable to Full:
	//	*SemanticTokensOptions_EnableFull
	//	*SemanticTokensOptions_Delta
	Full isSemanticTokensOptions_Full `protobuf_oneof:"full"`
}

func (x *SemanticTokensOptions) Reset() {
	*x = SemanticTokensOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensOptions) ProtoMessage() {}

func (x *SemanticTokensOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensOptions.ProtoReflect.Descriptor instead.
func (*SemanticTokensOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{217}
}

func (x *SemanticTokensOptions) GetWorkDoneProgressOptions() *protocol.WorkDoneProgressOptions {
	if x != nil {
		return x.WorkDoneProgressOptions
	}
	return nil
}

func (x *SemanticTokensOptions) GetLegend() *SemanticTokensLegend {
	if x != nil {
		return x.Legend
	}
	return nil
}

func (m *SemanticTokensOptions) GetRange() isSemanticTokensOptions_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (x *SemanticTokensOptions) GetEnableRange() bool {
	if x, ok := x.GetRange().(*SemanticTokensOptions_EnableRange); ok {
		return x.EnableRange
	}
	return false
}

func (x *SemanticTokensOptions) GetEmpty() structpb.NullValue {
	if x, ok := x.GetRange().(*SemanticTokensOptions_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (m *SemanticTokensOptions) GetFull() isSemanticTokensOptions_Full {
	if m != nil {
		return m.Full
	}
	return nil
}

func (x *SemanticTokensOptions) GetEnableFull() bool {
	if x, ok := x.GetFull().(*SemanticTokensOptions_EnableFull); ok {
		return x.EnableFull
	}
	return false
}

func (x *SemanticTokensOptions) GetDelta() bool {
	if x, ok := x.GetFull().(*SemanticTokensOptions_Delta); ok {
		return x.Delta
	}
	return false
}

type isSemanticTokensOptions_Range interface {
	isSemanticTokensOptions_Range()
}

type SemanticTokensOptions_EnableRange struct {
	EnableRange bool `protobuf:"varint,3,opt,name=enable_range,json=enableRange,proto3,oneof"`
}

type SemanticTokensOptions_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,4,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

func (*SemanticTokensOptions_EnableRange) isSemanticTokensOptions_Range() {}

func (*SemanticTokensOptions_Empty) isSemanticTokensOptions_Range() {}

type isSemanticTokensOptions_Full interface {
	isSemanticTokensOptions_Full()
}

type SemanticTokensOptions_EnableFull struct {
	EnableFull bool `protobuf:"varint,5,opt,name=enable_full,json=enableFull,proto3,oneof"`
}

type SemanticTokensOptions_Delta struct {
	Delta bool `protobuf:"varint,6,opt,name=delta,proto3,oneof"`
}

func (*SemanticTokensOptions_EnableFull) isSemanticTokensOptions_Full() {}

func (*SemanticTokensOptions_Delta) isSemanticTokensOptions_Full() {}

// SemanticTokensRegistrationOptions represents a registration option of SemanticTokens.
//
// @since 3.16.0
type SemanticTokensRegistrationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	TextDocumentRegistrationOptions *protocol.TextDocumentRegistrationOptions `protobuf:"bytes,1,opt,name=text_document_registration_options,json=textDocumentRegistrationOptions,proto3" json:"text_document_registration_options,omitempty"`
	SemanticTokensOptions           *SemanticTokensOptions                    `protobuf:"bytes,2,opt,name=semantic_tokens_options,json=semanticTokensOptions,proto3" json:"semantic_tokens_options,omitempty"`
	// extends
	StaticRegistrationOptions *protocol.StaticRegistrationOptions `protobuf:"bytes,3,opt,name=static_registration_options,json=staticRegistrationOptions,proto3" json:"static_registration_options,omitempty"`
}

func (x *SemanticTokensRegistrationOptions) Reset() {
	*x = SemanticTokensRegistrationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensRegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensRegistrationOptions) ProtoMessage() {}

func (x *SemanticTokensRegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensRegistrationOptions.ProtoReflect.Descriptor instead.
func (*SemanticTokensRegistrationOptions) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{218}
}

func (x *SemanticTokensRegistrationOptions) GetTextDocumentRegistrationOptions() *protocol.TextDocumentRegistrationOptions {
	if x != nil {
		return x.TextDocumentRegistrationOptions
	}
	return nil
}

func (x *SemanticTokensRegistrationOptions) GetSemanticTokensOptions() *SemanticTokensOptions {
	if x != nil {
		return x.SemanticTokensOptions
	}
	return nil
}

func (x *SemanticTokensRegistrationOptions) GetStaticRegistrationOptions() *protocol.StaticRegistrationOptions {
	if x != nil {
		return x.StaticRegistrationOptions
	}
	return nil
}

// SemanticTokensParams is the parameters of a `textDocument/semanticTokens/full` request.
//
// @since 3.16.0
type SemanticTokensParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The text document.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
}

func (x *SemanticTokensParams) Reset() {
	*x = SemanticTokensParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensParams) ProtoMessage() {}

func (x *SemanticTokensParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensParams.ProtoReflect.Descriptor instead.
func (*SemanticTokensParams) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{219}
}

func (x *SemanticTokensParams) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *SemanticTokensParams) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *SemanticTokensParams) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

// SemanticTokens represents a list of semantic token.
//
// @since 3.16.0
type SemanticTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional result id. If provided and clients support delta updating
	// the client will include the result id in the next semantic token request.
	// A server can then instead of computing all semantic tokens again simply
	// send a delta.
	ResultId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// The actual tokens.
	Data []int32 `protobuf:"varint,2,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *SemanticTokens) Reset() {
	*x = SemanticTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokens) ProtoMessage() {}

func (x *SemanticTokens) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokens.ProtoReflect.Descriptor instead.
func (*SemanticTokens) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{220}
}

func (x *SemanticTokens) GetResultId() *wrapperspb.StringValue {
	if x != nil {
		return x.ResultId
	}
	return nil
}

func (x *SemanticTokens) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

// SemanticTokensPartialResult represents a partial result of `textDocument/semanticTokens/full`
// request.
//
// @since 3.16.0
type SemanticTokensPartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []int32 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *SemanticTokensPartialResult) Reset() {
	*x = SemanticTokensPartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensPartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensPartialResult) ProtoMessage() {}

func (x *SemanticTokensPartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensPartialResult.ProtoReflect.Descriptor instead.
func (*SemanticTokensPartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{221}
}

func (x *SemanticTokensPartialResult) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

// SemanticTokensDeltaParams is the parameters of a `textDocument/semanticTokens/full/delta`
// request.
//
// @since 3.16.0
type SemanticTokensDeltaParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// extends
	WorkDoneProgressParams *WorkDoneProgressParams `protobuf:"bytes,1,opt,name=work_done_progress_params,json=workDoneProgressParams,proto3" json:"work_done_progress_params,omitempty"`
	// extends
	PartialResultParams *PartialResultParams `protobuf:"bytes,2,opt,name=partial_result_params,json=partialResultParams,proto3" json:"partial_result_params,omitempty"`
	// The text document.
	TextDocument *protocol.TextDocumentIdentifier `protobuf:"bytes,3,opt,name=text_document,json=textDocument,proto3" json:"text_document,omitempty"`
	// The previous result id.
	PreviousResultId string `protobuf:"bytes,4,opt,name=previous_result_id,json=previousResultId,proto3" json:"previous_result_id,omitempty"`
}

func (x *SemanticTokensDeltaParams) Reset() {
	*x = SemanticTokensDeltaParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensDeltaParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensDeltaParams) ProtoMessage() {}

func (x *SemanticTokensDeltaParams) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensDeltaParams.ProtoReflect.Descriptor instead.
func (*SemanticTokensDeltaParams) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{222}
}

func (x *SemanticTokensDeltaParams) GetWorkDoneProgressParams() *WorkDoneProgressParams {
	if x != nil {
		return x.WorkDoneProgressParams
	}
	return nil
}

func (x *SemanticTokensDeltaParams) GetPartialResultParams() *PartialResultParams {
	if x != nil {
		return x.PartialResultParams
	}
	return nil
}

func (x *SemanticTokensDeltaParams) GetTextDocument() *protocol.TextDocumentIdentifier {
	if x != nil {
		return x.TextDocument
	}
	return nil
}

func (x *SemanticTokensDeltaParams) GetPreviousResultId() string {
	if x != nil {
		return x.PreviousResultId
	}
	return ""
}

// SemanticTokensDelta represents a list of semantic delta token.
type SemanticTokensDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// readonly
	ResultId string `protobuf:"bytes,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// The semantic token edits to transform a previous result into a new result.
	Edits []*SemanticTokensEdit `protobuf:"bytes,2,rep,name=edits,proto3" json:"edits,omitempty"`
}

func (x *SemanticTokensDelta) Reset() {
	*x = SemanticTokensDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensDelta) ProtoMessage() {}

func (x *SemanticTokensDelta) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensDelta.ProtoReflect.Descriptor instead.
func (*SemanticTokensDelta) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{223}
}

func (x *SemanticTokensDelta) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

func (x *SemanticTokensDelta) GetEdits() []*SemanticTokensEdit {
	if x != nil {
		return x.Edits
	}
	return nil
}

// SemanticTokensEdit represents a semantic token edit.
type SemanticTokensEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start offset of the edit.
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// The count of elements to remove.
	DeleteCount int32 `protobuf:"varint,2,opt,name=delete_count,json=deleteCount,proto3" json:"delete_count,omitempty"`
	// The elements to insert.
	Data []int32 `protobuf:"varint,3,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *SemanticTokensEdit) Reset() {
	*x = SemanticTokensEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensEdit) ProtoMessage() {}

func (x *SemanticTokensEdit) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensEdit.ProtoReflect.Descriptor instead.
func (*SemanticTokensEdit) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{224}
}

func (x *SemanticTokensEdit) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SemanticTokensEdit) GetDeleteCount() int32 {
	if x != nil {
		return x.DeleteCount
	}
	return 0
}

func (x *SemanticTokensEdit) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

// SemanticTokensDeltaPartialResult represents a partial result of
// `textDocument/semanticTokens/full/delta` request.
type SemanticTokensDeltaPartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edits []*SemanticTokensEdit `protobuf:"bytes,2,rep,name=edits,proto3" json:"edits,omitempty"`
}

func (x *SemanticTokensDeltaPartialResult) Reset() {
	*x = SemanticTokensDeltaPartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensDeltaPartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensDeltaPartialResult) ProtoMessage() {}

func (x *SemanticTokensDeltaPartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensDeltaPartialResult.ProtoReflect.Descriptor instead.
func (*SemanticTokensDeltaPartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{225}
}

func (x *SemanticTokensDeltaPartialResult) GetEdits() []*SemanticTokensEdit {
	if x != nil {
		return x.Edits
	}
	return nil
}

// (-- api-linter: core::0140::abbreviations=disabled
//     api-linter: core::0123::resource-annotation=disabled --)
type InitializeRequest_ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the client as defined by the client.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The client's version as defined by the client.
	Version *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *InitializeRequest_ClientInfo) Reset() {
	*x = InitializeRequest_ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeRequest_ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequest_ClientInfo) ProtoMessage() {}

func (x *InitializeRequest_ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequest_ClientInfo.ProtoReflect.Descriptor instead.
func (*InitializeRequest_ClientInfo) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{5, 0}
}

func (x *InitializeRequest_ClientInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InitializeRequest_ClientInfo) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

type WorkspaceFoldersResponse_WorkspaceFolders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceFolders []*WorkspaceFolder `protobuf:"bytes,1,rep,name=workspace_folders,json=workspaceFolders,proto3" json:"workspace_folders,omitempty"`
}

func (x *WorkspaceFoldersResponse_WorkspaceFolders) Reset() {
	*x = WorkspaceFoldersResponse_WorkspaceFolders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceFoldersResponse_WorkspaceFolders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceFoldersResponse_WorkspaceFolders) ProtoMessage() {}

func (x *WorkspaceFoldersResponse_WorkspaceFolders) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceFoldersResponse_WorkspaceFolders.ProtoReflect.Descriptor instead.
func (*WorkspaceFoldersResponse_WorkspaceFolders) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{10, 0}
}

func (x *WorkspaceFoldersResponse_WorkspaceFolders) GetWorkspaceFolders() []*WorkspaceFolder {
	if x != nil {
		return x.WorkspaceFolders
	}
	return nil
}

type ConfigurationResponse_Anys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anys []*anypb.Any `protobuf:"bytes,1,rep,name=anys,proto3" json:"anys,omitempty"`
}

func (x *ConfigurationResponse_Anys) Reset() {
	*x = ConfigurationResponse_Anys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationResponse_Anys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationResponse_Anys) ProtoMessage() {}

func (x *ConfigurationResponse_Anys) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationResponse_Anys.ProtoReflect.Descriptor instead.
func (*ConfigurationResponse_Anys) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ConfigurationResponse_Anys) GetAnys() []*anypb.Any {
	if x != nil {
		return x.Anys
	}
	return nil
}

type WorkspaceSymbolsResponse_SymbolInformations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolInformations []*SymbolInformation `protobuf:"bytes,1,rep,name=symbol_informations,json=symbolInformations,proto3" json:"symbol_informations,omitempty"`
}

func (x *WorkspaceSymbolsResponse_SymbolInformations) Reset() {
	*x = WorkspaceSymbolsResponse_SymbolInformations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceSymbolsResponse_SymbolInformations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceSymbolsResponse_SymbolInformations) ProtoMessage() {}

func (x *WorkspaceSymbolsResponse_SymbolInformations) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceSymbolsResponse_SymbolInformations.ProtoReflect.Descriptor instead.
func (*WorkspaceSymbolsResponse_SymbolInformations) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{12, 0}
}

func (x *WorkspaceSymbolsResponse_SymbolInformations) GetSymbolInformations() []*SymbolInformation {
	if x != nil {
		return x.SymbolInformations
	}
	return nil
}

type DeclarationResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location      *protocol.Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Locations     *Locations         `protobuf:"bytes,2,opt,name=locations,proto3" json:"locations,omitempty"`
	LocationLinks *LocationLinks     `protobuf:"bytes,3,opt,name=location_links,json=locationLinks,proto3" json:"location_links,omitempty"`
	Empty         structpb.NullValue `protobuf:"varint,4,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *DeclarationResponse_Result) Reset() {
	*x = DeclarationResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclarationResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclarationResponse_Result) ProtoMessage() {}

func (x *DeclarationResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclarationResponse_Result.ProtoReflect.Descriptor instead.
func (*DeclarationResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{24, 0}
}

func (x *DeclarationResponse_Result) GetLocation() *protocol.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DeclarationResponse_Result) GetLocations() *Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *DeclarationResponse_Result) GetLocationLinks() *LocationLinks {
	if x != nil {
		return x.LocationLinks
	}
	return nil
}

func (x *DeclarationResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type DeclarationResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations     *Locations     `protobuf:"bytes,1,opt,name=locations,proto3" json:"locations,omitempty"`
	LocationLinks *LocationLinks `protobuf:"bytes,2,opt,name=location_links,json=locationLinks,proto3" json:"location_links,omitempty"`
}

func (x *DeclarationResponse_PartialResult) Reset() {
	*x = DeclarationResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclarationResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclarationResponse_PartialResult) ProtoMessage() {}

func (x *DeclarationResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclarationResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*DeclarationResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{24, 1}
}

func (x *DeclarationResponse_PartialResult) GetLocations() *Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *DeclarationResponse_PartialResult) GetLocationLinks() *LocationLinks {
	if x != nil {
		return x.LocationLinks
	}
	return nil
}

type DefinitionResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location      *protocol.Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Locations     *Locations         `protobuf:"bytes,2,opt,name=locations,proto3" json:"locations,omitempty"`
	LocationLinks *LocationLinks     `protobuf:"bytes,3,opt,name=location_links,json=locationLinks,proto3" json:"location_links,omitempty"`
	Empty         structpb.NullValue `protobuf:"varint,4,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *DefinitionResponse_Result) Reset() {
	*x = DefinitionResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionResponse_Result) ProtoMessage() {}

func (x *DefinitionResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionResponse_Result.ProtoReflect.Descriptor instead.
func (*DefinitionResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{25, 0}
}

func (x *DefinitionResponse_Result) GetLocation() *protocol.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DefinitionResponse_Result) GetLocations() *Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *DefinitionResponse_Result) GetLocationLinks() *LocationLinks {
	if x != nil {
		return x.LocationLinks
	}
	return nil
}

func (x *DefinitionResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type DefinitionResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations     *Locations     `protobuf:"bytes,1,opt,name=locations,proto3" json:"locations,omitempty"`
	LocationLinks *LocationLinks `protobuf:"bytes,2,opt,name=location_links,json=locationLinks,proto3" json:"location_links,omitempty"`
}

func (x *DefinitionResponse_PartialResult) Reset() {
	*x = DefinitionResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionResponse_PartialResult) ProtoMessage() {}

func (x *DefinitionResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*DefinitionResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{25, 1}
}

func (x *DefinitionResponse_PartialResult) GetLocations() *Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *DefinitionResponse_PartialResult) GetLocationLinks() *LocationLinks {
	if x != nil {
		return x.LocationLinks
	}
	return nil
}

type TypeDefinitionResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location      *protocol.Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Locations     *Locations         `protobuf:"bytes,2,opt,name=locations,proto3" json:"locations,omitempty"`
	LocationLinks *LocationLinks     `protobuf:"bytes,3,opt,name=location_links,json=locationLinks,proto3" json:"location_links,omitempty"`
	Empty         structpb.NullValue `protobuf:"varint,4,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *TypeDefinitionResponse_Result) Reset() {
	*x = TypeDefinitionResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDefinitionResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDefinitionResponse_Result) ProtoMessage() {}

func (x *TypeDefinitionResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDefinitionResponse_Result.ProtoReflect.Descriptor instead.
func (*TypeDefinitionResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{26, 0}
}

func (x *TypeDefinitionResponse_Result) GetLocation() *protocol.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TypeDefinitionResponse_Result) GetLocations() *Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *TypeDefinitionResponse_Result) GetLocationLinks() *LocationLinks {
	if x != nil {
		return x.LocationLinks
	}
	return nil
}

func (x *TypeDefinitionResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type TypeDefinitionResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations     *Locations     `protobuf:"bytes,1,opt,name=locations,proto3" json:"locations,omitempty"`
	LocationLinks *LocationLinks `protobuf:"bytes,2,opt,name=location_links,json=locationLinks,proto3" json:"location_links,omitempty"`
}

func (x *TypeDefinitionResponse_PartialResult) Reset() {
	*x = TypeDefinitionResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDefinitionResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDefinitionResponse_PartialResult) ProtoMessage() {}

func (x *TypeDefinitionResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDefinitionResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*TypeDefinitionResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{26, 1}
}

func (x *TypeDefinitionResponse_PartialResult) GetLocations() *Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *TypeDefinitionResponse_PartialResult) GetLocationLinks() *LocationLinks {
	if x != nil {
		return x.LocationLinks
	}
	return nil
}

type ImplementationResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location      *protocol.Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Locations     *Locations         `protobuf:"bytes,2,opt,name=locations,proto3" json:"locations,omitempty"`
	LocationLinks *LocationLinks     `protobuf:"bytes,3,opt,name=location_links,json=locationLinks,proto3" json:"location_links,omitempty"`
	Empty         structpb.NullValue `protobuf:"varint,4,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *ImplementationResponse_Result) Reset() {
	*x = ImplementationResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationResponse_Result) ProtoMessage() {}

func (x *ImplementationResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationResponse_Result.ProtoReflect.Descriptor instead.
func (*ImplementationResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{27, 0}
}

func (x *ImplementationResponse_Result) GetLocation() *protocol.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ImplementationResponse_Result) GetLocations() *Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *ImplementationResponse_Result) GetLocationLinks() *LocationLinks {
	if x != nil {
		return x.LocationLinks
	}
	return nil
}

func (x *ImplementationResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type ImplementationResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations     *Locations     `protobuf:"bytes,1,opt,name=locations,proto3" json:"locations,omitempty"`
	LocationLinks *LocationLinks `protobuf:"bytes,2,opt,name=location_links,json=locationLinks,proto3" json:"location_links,omitempty"`
}

func (x *ImplementationResponse_PartialResult) Reset() {
	*x = ImplementationResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementationResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementationResponse_PartialResult) ProtoMessage() {}

func (x *ImplementationResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementationResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*ImplementationResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{27, 1}
}

func (x *ImplementationResponse_PartialResult) GetLocations() *Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *ImplementationResponse_PartialResult) GetLocationLinks() *LocationLinks {
	if x != nil {
		return x.LocationLinks
	}
	return nil
}

type ReferenceResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations *Locations         `protobuf:"bytes,1,opt,name=locations,proto3" json:"locations,omitempty"`
	Empty     structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *ReferenceResponse_Result) Reset() {
	*x = ReferenceResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceResponse_Result) ProtoMessage() {}

func (x *ReferenceResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceResponse_Result.ProtoReflect.Descriptor instead.
func (*ReferenceResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ReferenceResponse_Result) GetLocations() *Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *ReferenceResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type ReferenceResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations *Locations `protobuf:"bytes,1,opt,name=locations,proto3" json:"locations,omitempty"`
}

func (x *ReferenceResponse_PartialResult) Reset() {
	*x = ReferenceResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceResponse_PartialResult) ProtoMessage() {}

func (x *ReferenceResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*ReferenceResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{28, 1}
}

func (x *ReferenceResponse_PartialResult) GetLocations() *Locations {
	if x != nil {
		return x.Locations
	}
	return nil
}

type DocumentHighlightsResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentHighlights []*DocumentHighlight `protobuf:"bytes,1,rep,name=document_highlights,json=documentHighlights,proto3" json:"document_highlights,omitempty"`
	Empty              structpb.NullValue   `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *DocumentHighlightsResponse_Result) Reset() {
	*x = DocumentHighlightsResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentHighlightsResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentHighlightsResponse_Result) ProtoMessage() {}

func (x *DocumentHighlightsResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentHighlightsResponse_Result.ProtoReflect.Descriptor instead.
func (*DocumentHighlightsResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{29, 0}
}

func (x *DocumentHighlightsResponse_Result) GetDocumentHighlights() []*DocumentHighlight {
	if x != nil {
		return x.DocumentHighlights
	}
	return nil
}

func (x *DocumentHighlightsResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type DocumentHighlightsResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentHighlights []*DocumentHighlight `protobuf:"bytes,1,rep,name=document_highlights,json=documentHighlights,proto3" json:"document_highlights,omitempty"`
}

func (x *DocumentHighlightsResponse_PartialResult) Reset() {
	*x = DocumentHighlightsResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentHighlightsResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentHighlightsResponse_PartialResult) ProtoMessage() {}

func (x *DocumentHighlightsResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentHighlightsResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*DocumentHighlightsResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{29, 1}
}

func (x *DocumentHighlightsResponse_PartialResult) GetDocumentHighlights() []*DocumentHighlight {
	if x != nil {
		return x.DocumentHighlights
	}
	return nil
}

type DocumentSymbolResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentSymbols    []*DocumentSymbol    `protobuf:"bytes,1,rep,name=document_symbols,json=documentSymbols,proto3" json:"document_symbols,omitempty"`
	SymbolInformations []*SymbolInformation `protobuf:"bytes,2,rep,name=symbol_informations,json=symbolInformations,proto3" json:"symbol_informations,omitempty"`
	Empty              structpb.NullValue   `protobuf:"varint,3,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *DocumentSymbolResponse_Result) Reset() {
	*x = DocumentSymbolResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbolResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbolResponse_Result) ProtoMessage() {}

func (x *DocumentSymbolResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbolResponse_Result.ProtoReflect.Descriptor instead.
func (*DocumentSymbolResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{30, 0}
}

func (x *DocumentSymbolResponse_Result) GetDocumentSymbols() []*DocumentSymbol {
	if x != nil {
		return x.DocumentSymbols
	}
	return nil
}

func (x *DocumentSymbolResponse_Result) GetSymbolInformations() []*SymbolInformation {
	if x != nil {
		return x.SymbolInformations
	}
	return nil
}

func (x *DocumentSymbolResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type DocumentSymbolResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentSymbols    []*DocumentSymbol    `protobuf:"bytes,1,rep,name=document_symbols,json=documentSymbols,proto3" json:"document_symbols,omitempty"`
	SymbolInformations []*SymbolInformation `protobuf:"bytes,2,rep,name=symbol_informations,json=symbolInformations,proto3" json:"symbol_informations,omitempty"`
}

func (x *DocumentSymbolResponse_PartialResult) Reset() {
	*x = DocumentSymbolResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbolResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbolResponse_PartialResult) ProtoMessage() {}

func (x *DocumentSymbolResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbolResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*DocumentSymbolResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{30, 1}
}

func (x *DocumentSymbolResponse_PartialResult) GetDocumentSymbols() []*DocumentSymbol {
	if x != nil {
		return x.DocumentSymbols
	}
	return nil
}

func (x *DocumentSymbolResponse_PartialResult) GetSymbolInformations() []*SymbolInformation {
	if x != nil {
		return x.SymbolInformations
	}
	return nil
}

type CodeActionResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands    []*protocol.Command `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	CodeActions []*CodeAction       `protobuf:"bytes,2,rep,name=code_actions,json=codeActions,proto3" json:"code_actions,omitempty"`
	Empty       structpb.NullValue  `protobuf:"varint,3,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *CodeActionResponse_Result) Reset() {
	*x = CodeActionResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeActionResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeActionResponse_Result) ProtoMessage() {}

func (x *CodeActionResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeActionResponse_Result.ProtoReflect.Descriptor instead.
func (*CodeActionResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{31, 0}
}

func (x *CodeActionResponse_Result) GetCommands() []*protocol.Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *CodeActionResponse_Result) GetCodeActions() []*CodeAction {
	if x != nil {
		return x.CodeActions
	}
	return nil
}

func (x *CodeActionResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type CodeActionResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands    []*protocol.Command `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	CodeActions []*CodeAction       `protobuf:"bytes,2,rep,name=code_actions,json=codeActions,proto3" json:"code_actions,omitempty"`
}

func (x *CodeActionResponse_PartialResult) Reset() {
	*x = CodeActionResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeActionResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeActionResponse_PartialResult) ProtoMessage() {}

func (x *CodeActionResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeActionResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*CodeActionResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{31, 1}
}

func (x *CodeActionResponse_PartialResult) GetCommands() []*protocol.Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *CodeActionResponse_PartialResult) GetCodeActions() []*CodeAction {
	if x != nil {
		return x.CodeActions
	}
	return nil
}

type CodeLensResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeLens []*CodeLens        `protobuf:"bytes,1,rep,name=code_lens,json=codeLens,proto3" json:"code_lens,omitempty"`
	Empty    structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *CodeLensResponse_Result) Reset() {
	*x = CodeLensResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLensResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLensResponse_Result) ProtoMessage() {}

func (x *CodeLensResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLensResponse_Result.ProtoReflect.Descriptor instead.
func (*CodeLensResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{32, 0}
}

func (x *CodeLensResponse_Result) GetCodeLens() []*CodeLens {
	if x != nil {
		return x.CodeLens
	}
	return nil
}

func (x *CodeLensResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type CodeLensResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeLens []*CodeLens `protobuf:"bytes,1,rep,name=code_lens,json=codeLens,proto3" json:"code_lens,omitempty"`
}

func (x *CodeLensResponse_PartialResult) Reset() {
	*x = CodeLensResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeLensResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeLensResponse_PartialResult) ProtoMessage() {}

func (x *CodeLensResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeLensResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*CodeLensResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{32, 1}
}

func (x *CodeLensResponse_PartialResult) GetCodeLens() []*CodeLens {
	if x != nil {
		return x.CodeLens
	}
	return nil
}

type DocumentLinkResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentLinks []*DocumentLink    `protobuf:"bytes,1,rep,name=document_links,json=documentLinks,proto3" json:"document_links,omitempty"`
	Empty         structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *DocumentLinkResponse_Result) Reset() {
	*x = DocumentLinkResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLinkResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLinkResponse_Result) ProtoMessage() {}

func (x *DocumentLinkResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLinkResponse_Result.ProtoReflect.Descriptor instead.
func (*DocumentLinkResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{35, 0}
}

func (x *DocumentLinkResponse_Result) GetDocumentLinks() []*DocumentLink {
	if x != nil {
		return x.DocumentLinks
	}
	return nil
}

func (x *DocumentLinkResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type DocumentLinkResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentLinks []*DocumentLink `protobuf:"bytes,1,rep,name=document_links,json=documentLinks,proto3" json:"document_links,omitempty"`
}

func (x *DocumentLinkResponse_PartialResult) Reset() {
	*x = DocumentLinkResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLinkResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLinkResponse_PartialResult) ProtoMessage() {}

func (x *DocumentLinkResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLinkResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*DocumentLinkResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{35, 1}
}

func (x *DocumentLinkResponse_PartialResult) GetDocumentLinks() []*DocumentLink {
	if x != nil {
		return x.DocumentLinks
	}
	return nil
}

type DocumentColorResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorInformations []*ColorInformation `protobuf:"bytes,1,rep,name=color_informations,json=colorInformations,proto3" json:"color_informations,omitempty"`
}

func (x *DocumentColorResponse_Result) Reset() {
	*x = DocumentColorResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentColorResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentColorResponse_Result) ProtoMessage() {}

func (x *DocumentColorResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentColorResponse_Result.ProtoReflect.Descriptor instead.
func (*DocumentColorResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{38, 0}
}

func (x *DocumentColorResponse_Result) GetColorInformations() []*ColorInformation {
	if x != nil {
		return x.ColorInformations
	}
	return nil
}

type DocumentColorResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorInformations []*ColorInformation `protobuf:"bytes,1,rep,name=color_informations,json=colorInformations,proto3" json:"color_informations,omitempty"`
}

func (x *DocumentColorResponse_PartialResult) Reset() {
	*x = DocumentColorResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentColorResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentColorResponse_PartialResult) ProtoMessage() {}

func (x *DocumentColorResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentColorResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*DocumentColorResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{38, 1}
}

func (x *DocumentColorResponse_PartialResult) GetColorInformations() []*ColorInformation {
	if x != nil {
		return x.ColorInformations
	}
	return nil
}

type ColorPresentationResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorPresentations []*ColorPresentation `protobuf:"bytes,1,rep,name=color_presentations,json=colorPresentations,proto3" json:"color_presentations,omitempty"`
}

func (x *ColorPresentationResponse_Result) Reset() {
	*x = ColorPresentationResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorPresentationResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorPresentationResponse_Result) ProtoMessage() {}

func (x *ColorPresentationResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorPresentationResponse_Result.ProtoReflect.Descriptor instead.
func (*ColorPresentationResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{39, 0}
}

func (x *ColorPresentationResponse_Result) GetColorPresentations() []*ColorPresentation {
	if x != nil {
		return x.ColorPresentations
	}
	return nil
}

type ColorPresentationResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorPresentations []*ColorPresentation `protobuf:"bytes,1,rep,name=color_presentations,json=colorPresentations,proto3" json:"color_presentations,omitempty"`
}

func (x *ColorPresentationResponse_PartialResult) Reset() {
	*x = ColorPresentationResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorPresentationResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorPresentationResponse_PartialResult) ProtoMessage() {}

func (x *ColorPresentationResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorPresentationResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*ColorPresentationResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{39, 1}
}

func (x *ColorPresentationResponse_PartialResult) GetColorPresentations() []*ColorPresentation {
	if x != nil {
		return x.ColorPresentations
	}
	return nil
}

type PrepareRenameResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range       *protocol.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	PlaceHolder string          `protobuf:"bytes,2,opt,name=place_holder,json=placeHolder,proto3" json:"place_holder,omitempty"`
}

func (x *PrepareRenameResponse_Result) Reset() {
	*x = PrepareRenameResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareRenameResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRenameResponse_Result) ProtoMessage() {}

func (x *PrepareRenameResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRenameResponse_Result.ProtoReflect.Descriptor instead.
func (*PrepareRenameResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{44, 0}
}

func (x *PrepareRenameResponse_Result) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *PrepareRenameResponse_Result) GetPlaceHolder() string {
	if x != nil {
		return x.PlaceHolder
	}
	return ""
}

type FoldingRangeResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoldingRanges []*FoldingRange    `protobuf:"bytes,1,rep,name=folding_ranges,json=foldingRanges,proto3" json:"folding_ranges,omitempty"`
	Empty         structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *FoldingRangeResponse_Result) Reset() {
	*x = FoldingRangeResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldingRangeResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldingRangeResponse_Result) ProtoMessage() {}

func (x *FoldingRangeResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldingRangeResponse_Result.ProtoReflect.Descriptor instead.
func (*FoldingRangeResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{45, 0}
}

func (x *FoldingRangeResponse_Result) GetFoldingRanges() []*FoldingRange {
	if x != nil {
		return x.FoldingRanges
	}
	return nil
}

func (x *FoldingRangeResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type FoldingRangeResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FoldingRanges []*FoldingRange `protobuf:"bytes,1,rep,name=folding_ranges,json=foldingRanges,proto3" json:"folding_ranges,omitempty"`
}

func (x *FoldingRangeResponse_PartialResult) Reset() {
	*x = FoldingRangeResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldingRangeResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldingRangeResponse_PartialResult) ProtoMessage() {}

func (x *FoldingRangeResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldingRangeResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*FoldingRangeResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{45, 1}
}

func (x *FoldingRangeResponse_PartialResult) GetFoldingRanges() []*FoldingRange {
	if x != nil {
		return x.FoldingRanges
	}
	return nil
}

type SelectionRangeResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionRanges []*SelectionRange  `protobuf:"bytes,1,rep,name=selection_ranges,json=selectionRanges,proto3" json:"selection_ranges,omitempty"`
	Empty           structpb.NullValue `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *SelectionRangeResponse_Result) Reset() {
	*x = SelectionRangeResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionRangeResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionRangeResponse_Result) ProtoMessage() {}

func (x *SelectionRangeResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionRangeResponse_Result.ProtoReflect.Descriptor instead.
func (*SelectionRangeResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{46, 0}
}

func (x *SelectionRangeResponse_Result) GetSelectionRanges() []*SelectionRange {
	if x != nil {
		return x.SelectionRanges
	}
	return nil
}

func (x *SelectionRangeResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type SelectionRangeResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionRanges []*SelectionRange `protobuf:"bytes,1,rep,name=selection_ranges,json=selectionRanges,proto3" json:"selection_ranges,omitempty"`
}

func (x *SelectionRangeResponse_PartialResult) Reset() {
	*x = SelectionRangeResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionRangeResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionRangeResponse_PartialResult) ProtoMessage() {}

func (x *SelectionRangeResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionRangeResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*SelectionRangeResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{46, 1}
}

func (x *SelectionRangeResponse_PartialResult) GetSelectionRanges() []*SelectionRange {
	if x != nil {
		return x.SelectionRanges
	}
	return nil
}

type CallHierarchyPrepareResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallHierarchyItems []*CallHierarchyItem `protobuf:"bytes,1,rep,name=call_hierarchy_items,json=callHierarchyItems,proto3" json:"call_hierarchy_items,omitempty"`
	Empty              structpb.NullValue   `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *CallHierarchyPrepareResponse_Result) Reset() {
	*x = CallHierarchyPrepareResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyPrepareResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyPrepareResponse_Result) ProtoMessage() {}

func (x *CallHierarchyPrepareResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyPrepareResponse_Result.ProtoReflect.Descriptor instead.
func (*CallHierarchyPrepareResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{47, 0}
}

func (x *CallHierarchyPrepareResponse_Result) GetCallHierarchyItems() []*CallHierarchyItem {
	if x != nil {
		return x.CallHierarchyItems
	}
	return nil
}

func (x *CallHierarchyPrepareResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type CallHierarchyIncomingCallsResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallHierarchyIncomingCalls []*CallHierarchyIncomingCall `protobuf:"bytes,1,rep,name=call_hierarchy_incoming_calls,json=callHierarchyIncomingCalls,proto3" json:"call_hierarchy_incoming_calls,omitempty"`
	Empty                      structpb.NullValue           `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *CallHierarchyIncomingCallsResponse_Result) Reset() {
	*x = CallHierarchyIncomingCallsResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyIncomingCallsResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyIncomingCallsResponse_Result) ProtoMessage() {}

func (x *CallHierarchyIncomingCallsResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyIncomingCallsResponse_Result.ProtoReflect.Descriptor instead.
func (*CallHierarchyIncomingCallsResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{48, 0}
}

func (x *CallHierarchyIncomingCallsResponse_Result) GetCallHierarchyIncomingCalls() []*CallHierarchyIncomingCall {
	if x != nil {
		return x.CallHierarchyIncomingCalls
	}
	return nil
}

func (x *CallHierarchyIncomingCallsResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type CallHierarchyIncomingCallsResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallHierarchyIncomingCalls []*CallHierarchyIncomingCall `protobuf:"bytes,1,rep,name=call_hierarchy_incoming_calls,json=callHierarchyIncomingCalls,proto3" json:"call_hierarchy_incoming_calls,omitempty"`
}

func (x *CallHierarchyIncomingCallsResponse_PartialResult) Reset() {
	*x = CallHierarchyIncomingCallsResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyIncomingCallsResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyIncomingCallsResponse_PartialResult) ProtoMessage() {}

func (x *CallHierarchyIncomingCallsResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyIncomingCallsResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*CallHierarchyIncomingCallsResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{48, 1}
}

func (x *CallHierarchyIncomingCallsResponse_PartialResult) GetCallHierarchyIncomingCalls() []*CallHierarchyIncomingCall {
	if x != nil {
		return x.CallHierarchyIncomingCalls
	}
	return nil
}

type CallHierarchyOutgoingCallsResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallHierarchyOutgoingCalls []*CallHierarchyOutgoingCall `protobuf:"bytes,1,rep,name=call_hierarchy_outgoing_calls,json=callHierarchyOutgoingCalls,proto3" json:"call_hierarchy_outgoing_calls,omitempty"`
	Empty                      structpb.NullValue           `protobuf:"varint,2,opt,name=empty,proto3,enum=google.protobuf.NullValue" json:"empty,omitempty"`
}

func (x *CallHierarchyOutgoingCallsResponse_Result) Reset() {
	*x = CallHierarchyOutgoingCallsResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyOutgoingCallsResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyOutgoingCallsResponse_Result) ProtoMessage() {}

func (x *CallHierarchyOutgoingCallsResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyOutgoingCallsResponse_Result.ProtoReflect.Descriptor instead.
func (*CallHierarchyOutgoingCallsResponse_Result) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{49, 0}
}

func (x *CallHierarchyOutgoingCallsResponse_Result) GetCallHierarchyOutgoingCalls() []*CallHierarchyOutgoingCall {
	if x != nil {
		return x.CallHierarchyOutgoingCalls
	}
	return nil
}

func (x *CallHierarchyOutgoingCallsResponse_Result) GetEmpty() structpb.NullValue {
	if x != nil {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

type CallHierarchyOutgoingCallsResponse_PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallHierarchyOutgoingCalls []*CallHierarchyOutgoingCall `protobuf:"bytes,1,rep,name=call_hierarchy_outgoing_calls,json=callHierarchyOutgoingCalls,proto3" json:"call_hierarchy_outgoing_calls,omitempty"`
}

func (x *CallHierarchyOutgoingCallsResponse_PartialResult) Reset() {
	*x = CallHierarchyOutgoingCallsResponse_PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallHierarchyOutgoingCallsResponse_PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHierarchyOutgoingCallsResponse_PartialResult) ProtoMessage() {}

func (x *CallHierarchyOutgoingCallsResponse_PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHierarchyOutgoingCallsResponse_PartialResult.ProtoReflect.Descriptor instead.
func (*CallHierarchyOutgoingCallsResponse_PartialResult) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{49, 1}
}

func (x *CallHierarchyOutgoingCallsResponse_PartialResult) GetCallHierarchyOutgoingCalls() []*CallHierarchyOutgoingCall {
	if x != nil {
		return x.CallHierarchyOutgoingCalls
	}
	return nil
}

// Workspace specific client capabilities.
type ClientCapabilities_Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The client supports applying batch edits to the workspace by supporting the request
	// 'workspace/applyEdit'.
	ApplyEdit bool `protobuf:"varint,1,opt,name=apply_edit,json=applyEdit,proto3" json:"apply_edit,omitempty"`
	// Optional. Capabilities specific to `WorkspaceEdit`s.
	WorkspaceEdit *protocol.WorkspaceEditClientCapabilities `protobuf:"bytes,2,opt,name=workspace_edit,json=workspaceEdit,proto3" json:"workspace_edit,omitempty"`
	// Optional. Capabilities specific to the `workspace/didChangeConfiguration` notification.
	DidChangeConfiguration *DidChangeConfigurationClientCapabilities `protobuf:"bytes,3,opt,name=did_change_configuration,json=didChangeConfiguration,proto3" json:"did_change_configuration,omitempty"`
	// Optional. Capabilities specific to the `workspace/didChangeWatchedFiles` notification.
	DidChangeWatchedFiles *DidChangeWatchedFilesClientCapabilities `protobuf:"bytes,4,opt,name=did_change_watched_files,json=didChangeWatchedFiles,proto3" json:"did_change_watched_files,omitempty"`
	// Optional. Capabilities specific to the `workspace/symbol` request.
	Symbol *WorkspaceSymbolClientCapabilities `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Optional. Capabilities specific to the `workspace/executeCommand` request.
	ExecuteCommand *ExecuteCommandClientCapabilities `protobuf:"bytes,6,opt,name=execute_command,json=executeCommand,proto3" json:"execute_command,omitempty"`
	// Optional. The client has support for workspace folders.
	//
	// @since 3.6.0
	WorkspaceFolders bool `protobuf:"varint,7,opt,name=workspace_folders,json=workspaceFolders,proto3" json:"workspace_folders,omitempty"`
	// Optional. The client supports `workspace/configuration` requests.
	//
	// @since 3.6.0
	Configuration bool `protobuf:"varint,8,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *ClientCapabilities_Workspace) Reset() {
	*x = ClientCapabilities_Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCapabilities_Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCapabilities_Workspace) ProtoMessage() {}

func (x *ClientCapabilities_Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCapabilities_Workspace.ProtoReflect.Descriptor instead.
func (*ClientCapabilities_Workspace) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{51, 0}
}

func (x *ClientCapabilities_Workspace) GetApplyEdit() bool {
	if x != nil {
		return x.ApplyEdit
	}
	return false
}

func (x *ClientCapabilities_Workspace) GetWorkspaceEdit() *protocol.WorkspaceEditClientCapabilities {
	if x != nil {
		return x.WorkspaceEdit
	}
	return nil
}

func (x *ClientCapabilities_Workspace) GetDidChangeConfiguration() *DidChangeConfigurationClientCapabilities {
	if x != nil {
		return x.DidChangeConfiguration
	}
	return nil
}

func (x *ClientCapabilities_Workspace) GetDidChangeWatchedFiles() *DidChangeWatchedFilesClientCapabilities {
	if x != nil {
		return x.DidChangeWatchedFiles
	}
	return nil
}

func (x *ClientCapabilities_Workspace) GetSymbol() *WorkspaceSymbolClientCapabilities {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *ClientCapabilities_Workspace) GetExecuteCommand() *ExecuteCommandClientCapabilities {
	if x != nil {
		return x.ExecuteCommand
	}
	return nil
}

func (x *ClientCapabilities_Workspace) GetWorkspaceFolders() bool {
	if x != nil {
		return x.WorkspaceFolders
	}
	return false
}

func (x *ClientCapabilities_Workspace) GetConfiguration() bool {
	if x != nil {
		return x.Configuration
	}
	return false
}

// Window specific client capabilities.
type ClientCapabilities_Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether client supports handling progress notifications. If set servers are allowed
	// to report in `workDoneProgress` property in the request specific server capabilities.
	//
	// @since 3.15.0
	WorkDoneProgress bool `protobuf:"varint,1,opt,name=work_done_progress,json=workDoneProgress,proto3" json:"work_done_progress,omitempty"`
}

func (x *ClientCapabilities_Window) Reset() {
	*x = ClientCapabilities_Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCapabilities_Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCapabilities_Window) ProtoMessage() {}

func (x *ClientCapabilities_Window) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCapabilities_Window.ProtoReflect.Descriptor instead.
func (*ClientCapabilities_Window) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{51, 1}
}

func (x *ClientCapabilities_Window) GetWorkDoneProgress() bool {
	if x != nil {
		return x.WorkDoneProgress
	}
	return false
}

// Information about the server.
//
// @since 3.15.0
// (-- api-linter: core::0123::resource-annotation=disabled --)
type InitializeResponse_ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the server as defined by the server.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The server's version as defined by the server.
	Version *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *InitializeResponse_ServerInfo) Reset() {
	*x = InitializeResponse_ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeResponse_ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeResponse_ServerInfo) ProtoMessage() {}

func (x *InitializeResponse_ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeResponse_ServerInfo.ProtoReflect.Descriptor instead.
func (*InitializeResponse_ServerInfo) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{52, 0}
}

func (x *InitializeResponse_ServerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InitializeResponse_ServerInfo) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

// Workspace specific server capabilities
type ServerCapabilities_Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The server supports workspace folder.
	//
	// @since 3.6.0
	WorkspaceFolders *WorkspaceFoldersServerCapabilities `protobuf:"bytes,1,opt,name=workspace_folders,json=workspaceFolders,proto3" json:"workspace_folders,omitempty"`
}

func (x *ServerCapabilities_Workspace) Reset() {
	*x = ServerCapabilities_Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerCapabilities_Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerCapabilities_Workspace) ProtoMessage() {}

func (x *ServerCapabilities_Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerCapabilities_Workspace.ProtoReflect.Descriptor instead.
func (*ServerCapabilities_Workspace) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{55, 0}
}

func (x *ServerCapabilities_Workspace) GetWorkspaceFolders() *WorkspaceFoldersServerCapabilities {
	if x != nil {
		return x.WorkspaceFolders
	}
	return nil
}

type WorkspaceSymbolClientCapabilities_SymbolKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The symbol kind values the client supports. When this
	// property exists the client also guarantees that it will
	// handle values outside its set gracefully and falls back
	// to a default value when unknown.
	//
	// If this property is not present the client only supports
	// the symbol kinds from `File` to `Array` as defined in
	// the initial version of the protocol.
	ValueSet []*WorkspaceSymbolClientCapabilities_SymbolKind `protobuf:"bytes,1,rep,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
}

func (x *WorkspaceSymbolClientCapabilities_SymbolKind) Reset() {
	*x = WorkspaceSymbolClientCapabilities_SymbolKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceSymbolClientCapabilities_SymbolKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceSymbolClientCapabilities_SymbolKind) ProtoMessage() {}

func (x *WorkspaceSymbolClientCapabilities_SymbolKind) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceSymbolClientCapabilities_SymbolKind.ProtoReflect.Descriptor instead.
func (*WorkspaceSymbolClientCapabilities_SymbolKind) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{80, 0}
}

func (x *WorkspaceSymbolClientCapabilities_SymbolKind) GetValueSet() []*WorkspaceSymbolClientCapabilities_SymbolKind {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

type TextDocumentContentChangeEvent_ContentChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range of the document that changed.
	Range *protocol.Range `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	// The optional length of the range that got replaced.
	//
	// Use range instead.
	//
	// Deprecated: Do not use.
	RangeLength int32 `protobuf:"varint,2,opt,name=range_length,json=rangeLength,proto3" json:"range_length,omitempty"`
	// The new text for the provided range.
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextDocumentContentChangeEvent_ContentChangeEvent) Reset() {
	*x = TextDocumentContentChangeEvent_ContentChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextDocumentContentChangeEvent_ContentChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextDocumentContentChangeEvent_ContentChangeEvent) ProtoMessage() {}

func (x *TextDocumentContentChangeEvent_ContentChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextDocumentContentChangeEvent_ContentChangeEvent.ProtoReflect.Descriptor instead.
func (*TextDocumentContentChangeEvent_ContentChangeEvent) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{92, 0}
}

func (x *TextDocumentContentChangeEvent_ContentChangeEvent) GetRange() *protocol.Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// Deprecated: Do not use.
func (x *TextDocumentContentChangeEvent_ContentChangeEvent) GetRangeLength() int32 {
	if x != nil {
		return x.RangeLength
	}
	return 0
}

func (x *TextDocumentContentChangeEvent_ContentChangeEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type PublishDiagnosticsClientCapabilities_TagSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tags supported by the client.
	ValueSet []protocol.DiagnosticTag `protobuf:"varint,2,rep,packed,name=value_set,json=valueSet,proto3,enum=protocol.DiagnosticTag" json:"value_set,omitempty"`
}

func (x *PublishDiagnosticsClientCapabilities_TagSupport) Reset() {
	*x = PublishDiagnosticsClientCapabilities_TagSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishDiagnosticsClientCapabilities_TagSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDiagnosticsClientCapabilities_TagSupport) ProtoMessage() {}

func (x *PublishDiagnosticsClientCapabilities_TagSupport) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDiagnosticsClientCapabilities_TagSupport.ProtoReflect.Descriptor instead.
func (*PublishDiagnosticsClientCapabilities_TagSupport) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{99, 0}
}

func (x *PublishDiagnosticsClientCapabilities_TagSupport) GetValueSet() []protocol.DiagnosticTag {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

type CompletionClientCapabilities_CompletionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Client supports snippets as insert text.
	//
	// A snippet can define tab stops and placeholders with `$1`, `$2`
	// and `${3:foo}`. `$0` defines the final tab stop, it defaults to
	// the end of the snippet. Placeholders with equal identifiers are linked,
	// that is typing in one will update others too.
	SnippetSupport bool `protobuf:"varint,1,opt,name=snippet_support,json=snippetSupport,proto3" json:"snippet_support,omitempty"`
	// Optional. Client supports commit characters on a completion item.
	CommitCharactersSupport bool `protobuf:"varint,2,opt,name=commit_characters_support,json=commitCharactersSupport,proto3" json:"commit_characters_support,omitempty"`
	// Client supports the follow content formats for the documentation
	// property. The order describes the preferred format of the client.
	DocumentationFormat []protocol.MarkupKind `protobuf:"varint,3,rep,packed,name=documentation_format,json=documentationFormat,proto3,enum=protocol.MarkupKind" json:"documentation_format,omitempty"`
	// Optional. Client supports the deprecated property on a completion item.
	DeprecatedSupport bool `protobuf:"varint,4,opt,name=deprecated_support,json=deprecatedSupport,proto3" json:"deprecated_support,omitempty"`
	// Optional. Client supports the preselect property on a completion item.
	PreselectSupport bool `protobuf:"varint,5,opt,name=preselect_support,json=preselectSupport,proto3" json:"preselect_support,omitempty"`
	// Client supports the tag property on a completion item. Clients supporting
	// tags have to handle unknown tags gracefully. Clients especially need to
	// preserve unknown tags when sending a completion item back to the server in
	// a resolve call.
	//
	// @since 3.15.0
	TagSupport *CompletionClientCapabilities_CompletionItem_TagSupport `protobuf:"bytes,6,opt,name=tag_support,json=tagSupport,proto3" json:"tag_support,omitempty"`
	// Optional. Client support insert replace edit to control different behavior if a
	// completion item is inserted in the text or should replace text.
	//
	// @since 3.16.0 - Proposed state
	InsertReplaceSupport bool `protobuf:"varint,7,opt,name=insert_replace_support,json=insertReplaceSupport,proto3" json:"insert_replace_support,omitempty"`
	// Optional. Client supports to resolve `additionalTextEdits` in the `completionItem/resolve`
	// request. So servers can postpone computing them.
	//
	// @since 3.16.0 - Proposed state
	ResolveAdditionalTextEditsSupport bool `protobuf:"varint,8,opt,name=resolve_additional_text_edits_support,json=resolveAdditionalTextEditsSupport,proto3" json:"resolve_additional_text_edits_support,omitempty"`
}

func (x *CompletionClientCapabilities_CompletionItem) Reset() {
	*x = CompletionClientCapabilities_CompletionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionClientCapabilities_CompletionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionClientCapabilities_CompletionItem) ProtoMessage() {}

func (x *CompletionClientCapabilities_CompletionItem) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionClientCapabilities_CompletionItem.ProtoReflect.Descriptor instead.
func (*CompletionClientCapabilities_CompletionItem) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{101, 0}
}

func (x *CompletionClientCapabilities_CompletionItem) GetSnippetSupport() bool {
	if x != nil {
		return x.SnippetSupport
	}
	return false
}

func (x *CompletionClientCapabilities_CompletionItem) GetCommitCharactersSupport() bool {
	if x != nil {
		return x.CommitCharactersSupport
	}
	return false
}

func (x *CompletionClientCapabilities_CompletionItem) GetDocumentationFormat() []protocol.MarkupKind {
	if x != nil {
		return x.DocumentationFormat
	}
	return nil
}

func (x *CompletionClientCapabilities_CompletionItem) GetDeprecatedSupport() bool {
	if x != nil {
		return x.DeprecatedSupport
	}
	return false
}

func (x *CompletionClientCapabilities_CompletionItem) GetPreselectSupport() bool {
	if x != nil {
		return x.PreselectSupport
	}
	return false
}

func (x *CompletionClientCapabilities_CompletionItem) GetTagSupport() *CompletionClientCapabilities_CompletionItem_TagSupport {
	if x != nil {
		return x.TagSupport
	}
	return nil
}

func (x *CompletionClientCapabilities_CompletionItem) GetInsertReplaceSupport() bool {
	if x != nil {
		return x.InsertReplaceSupport
	}
	return false
}

func (x *CompletionClientCapabilities_CompletionItem) GetResolveAdditionalTextEditsSupport() bool {
	if x != nil {
		return x.ResolveAdditionalTextEditsSupport
	}
	return false
}

type CompletionClientCapabilities_CompletionItemKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The completion item kind values the client supports. When this
	// property exists the client also guarantees that it will
	// handle values outside its set gracefully and falls back
	// to a default value when unknown.
	//
	// If this property is not present the client only supports
	// the completion items kinds from `Text` to `Reference` as defined in
	// the initial version of the protocol.
	ValueSet []*CompletionClientCapabilities_CompletionItemKind `protobuf:"bytes,1,rep,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
}

func (x *CompletionClientCapabilities_CompletionItemKind) Reset() {
	*x = CompletionClientCapabilities_CompletionItemKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionClientCapabilities_CompletionItemKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionClientCapabilities_CompletionItemKind) ProtoMessage() {}

func (x *CompletionClientCapabilities_CompletionItemKind) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionClientCapabilities_CompletionItemKind.ProtoReflect.Descriptor instead.
func (*CompletionClientCapabilities_CompletionItemKind) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{101, 1}
}

func (x *CompletionClientCapabilities_CompletionItemKind) GetValueSet() []*CompletionClientCapabilities_CompletionItemKind {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

type CompletionClientCapabilities_CompletionItem_TagSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tags supported by the client.
	ValueSet []CompletionItemTag `protobuf:"varint,1,rep,packed,name=value_set,json=valueSet,proto3,enum=protocol.rpc.CompletionItemTag" json:"value_set,omitempty"`
}

func (x *CompletionClientCapabilities_CompletionItem_TagSupport) Reset() {
	*x = CompletionClientCapabilities_CompletionItem_TagSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionClientCapabilities_CompletionItem_TagSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionClientCapabilities_CompletionItem_TagSupport) ProtoMessage() {}

func (x *CompletionClientCapabilities_CompletionItem_TagSupport) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionClientCapabilities_CompletionItem_TagSupport.ProtoReflect.Descriptor instead.
func (*CompletionClientCapabilities_CompletionItem_TagSupport) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{101, 0, 0}
}

func (x *CompletionClientCapabilities_CompletionItem_TagSupport) GetValueSet() []CompletionItemTag {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

type Hover_MarkedStrings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkedString []*MarkedString `protobuf:"bytes,1,rep,name=marked_string,json=markedString,proto3" json:"marked_string,omitempty"`
}

func (x *Hover_MarkedStrings) Reset() {
	*x = Hover_MarkedStrings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hover_MarkedStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hover_MarkedStrings) ProtoMessage() {}

func (x *Hover_MarkedStrings) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hover_MarkedStrings.ProtoReflect.Descriptor instead.
func (*Hover_MarkedStrings) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{112, 0}
}

func (x *Hover_MarkedStrings) GetMarkedString() []*MarkedString {
	if x != nil {
		return x.MarkedString
	}
	return nil
}

type MarkedString_CodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- api-linter: core::0143::standardized-codes=disabled --)
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MarkedString_CodeBlock) Reset() {
	*x = MarkedString_CodeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkedString_CodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkedString_CodeBlock) ProtoMessage() {}

func (x *MarkedString_CodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkedString_CodeBlock.ProtoReflect.Descriptor instead.
func (*MarkedString_CodeBlock) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{113, 0}
}

func (x *MarkedString_CodeBlock) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *MarkedString_CodeBlock) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The client supports the following `SignatureInformation`
// specific properties.
type SignatureHelpClientCapabilities_SignatureInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client supports the follow content formats for the documentation
	// property. The order describes the preferred format of the client.
	DocumentationFormat []protocol.MarkupKind `protobuf:"varint,1,rep,packed,name=documentation_format,json=documentationFormat,proto3,enum=protocol.MarkupKind" json:"documentation_format,omitempty"`
	// Client capabilities specific to parameter information.
	ParameterInformation *SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation `protobuf:"bytes,2,opt,name=parameter_information,json=parameterInformation,proto3" json:"parameter_information,omitempty"`
	// Optional. The client support the `activeParameter` property on `SignatureInformation`
	// literal.
	//
	// @since 3.16.0 - proposed state
	ActiveParameterSupport bool `protobuf:"varint,3,opt,name=active_parameter_support,json=activeParameterSupport,proto3" json:"active_parameter_support,omitempty"`
}

func (x *SignatureHelpClientCapabilities_SignatureInformation) Reset() {
	*x = SignatureHelpClientCapabilities_SignatureInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelpClientCapabilities_SignatureInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelpClientCapabilities_SignatureInformation) ProtoMessage() {}

func (x *SignatureHelpClientCapabilities_SignatureInformation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelpClientCapabilities_SignatureInformation.ProtoReflect.Descriptor instead.
func (*SignatureHelpClientCapabilities_SignatureInformation) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{114, 0}
}

func (x *SignatureHelpClientCapabilities_SignatureInformation) GetDocumentationFormat() []protocol.MarkupKind {
	if x != nil {
		return x.DocumentationFormat
	}
	return nil
}

func (x *SignatureHelpClientCapabilities_SignatureInformation) GetParameterInformation() *SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation {
	if x != nil {
		return x.ParameterInformation
	}
	return nil
}

func (x *SignatureHelpClientCapabilities_SignatureInformation) GetActiveParameterSupport() bool {
	if x != nil {
		return x.ActiveParameterSupport
	}
	return false
}

type SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The client supports processing label offsets instead of a
	// simple label string.
	//
	// @since 3.14.0
	LabelOffsetSupport bool `protobuf:"varint,1,opt,name=label_offset_support,json=labelOffsetSupport,proto3" json:"label_offset_support,omitempty"`
}

func (x *SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation) Reset() {
	*x = SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation) ProtoMessage() {}

func (x *SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation.ProtoReflect.Descriptor instead.
func (*SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{114, 0, 0}
}

func (x *SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation) GetLabelOffsetSupport() bool {
	if x != nil {
		return x.LabelOffsetSupport
	}
	return false
}

type ParameterInformation_Offset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ParameterInformation_Offset) Reset() {
	*x = ParameterInformation_Offset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterInformation_Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterInformation_Offset) ProtoMessage() {}

func (x *ParameterInformation_Offset) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterInformation_Offset.ProtoReflect.Descriptor instead.
func (*ParameterInformation_Offset) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{121, 0}
}

func (x *ParameterInformation_Offset) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ParameterInformation_Offset) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type DocumentSymbolClientCapabilities_SymbolKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The symbol kind values the client supports. When this
	// property exists the client also guarantees that it will
	// handle values outside its set gracefully and falls back
	// to a default value when unknown.
	//
	// If this property is not present the client only supports
	// the symbol kinds from `File` to `Array` as defined in
	// the initial version of the protocol.
	ValueSet []*DocumentSymbolClientCapabilities_SymbolKind `protobuf:"bytes,1,rep,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
}

func (x *DocumentSymbolClientCapabilities_SymbolKind) Reset() {
	*x = DocumentSymbolClientCapabilities_SymbolKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbolClientCapabilities_SymbolKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbolClientCapabilities_SymbolKind) ProtoMessage() {}

func (x *DocumentSymbolClientCapabilities_SymbolKind) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbolClientCapabilities_SymbolKind.ProtoReflect.Descriptor instead.
func (*DocumentSymbolClientCapabilities_SymbolKind) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{148, 0}
}

func (x *DocumentSymbolClientCapabilities_SymbolKind) GetValueSet() []*DocumentSymbolClientCapabilities_SymbolKind {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

type CodeActionClientCapabilities_CodeActionLiteralSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The code action kind is supported with the following value
	// set.
	CodeActionKind *CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind `protobuf:"bytes,1,opt,name=code_action_kind,json=codeActionKind,proto3" json:"code_action_kind,omitempty"`
}

func (x *CodeActionClientCapabilities_CodeActionLiteralSupport) Reset() {
	*x = CodeActionClientCapabilities_CodeActionLiteralSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeActionClientCapabilities_CodeActionLiteralSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeActionClientCapabilities_CodeActionLiteralSupport) ProtoMessage() {}

func (x *CodeActionClientCapabilities_CodeActionLiteralSupport) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeActionClientCapabilities_CodeActionLiteralSupport.ProtoReflect.Descriptor instead.
func (*CodeActionClientCapabilities_CodeActionLiteralSupport) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{154, 0}
}

func (x *CodeActionClientCapabilities_CodeActionLiteralSupport) GetCodeActionKind() *CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind {
	if x != nil {
		return x.CodeActionKind
	}
	return nil
}

type CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The code action kind values the client supports. When this
	// property exists the client also guarantees that it will
	// handle values outside its set gracefully and falls back
	// to a default value when unknown.
	ValueSet []*CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind `protobuf:"bytes,1,rep,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
}

func (x *CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind) Reset() {
	*x = CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind) ProtoMessage() {}

func (x *CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind.ProtoReflect.Descriptor instead.
func (*CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{154, 0, 0}
}

func (x *CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind) GetValueSet() []*CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

// (-- api-linter: core::0123::resource-annotation=disabled --)
type FormattingOptions_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*FormattingOptions_Value_Enable
	//	*FormattingOptions_Value_Number
	//	*FormattingOptions_Value_Name
	Value isFormattingOptions_Value_Value `protobuf_oneof:"value"`
}

func (x *FormattingOptions_Value) Reset() {
	*x = FormattingOptions_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormattingOptions_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormattingOptions_Value) ProtoMessage() {}

func (x *FormattingOptions_Value) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormattingOptions_Value.ProtoReflect.Descriptor instead.
func (*FormattingOptions_Value) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{182, 0}
}

func (m *FormattingOptions_Value) GetValue() isFormattingOptions_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FormattingOptions_Value) GetEnable() bool {
	if x, ok := x.GetValue().(*FormattingOptions_Value_Enable); ok {
		return x.Enable
	}
	return false
}

func (x *FormattingOptions_Value) GetNumber() int32 {
	if x, ok := x.GetValue().(*FormattingOptions_Value_Number); ok {
		return x.Number
	}
	return 0
}

func (x *FormattingOptions_Value) GetName() string {
	if x, ok := x.GetValue().(*FormattingOptions_Value_Name); ok {
		return x.Name
	}
	return ""
}

type isFormattingOptions_Value_Value interface {
	isFormattingOptions_Value_Value()
}

type FormattingOptions_Value_Enable struct {
	Enable bool `protobuf:"varint,6,opt,name=enable,proto3,oneof"`
}

type FormattingOptions_Value_Number struct {
	Number int32 `protobuf:"varint,7,opt,name=number,proto3,oneof"`
}

type FormattingOptions_Value_Name struct {
	Name string `protobuf:"bytes,8,opt,name=name,proto3,oneof"`
}

func (*FormattingOptions_Value_Enable) isFormattingOptions_Value_Value() {}

func (*FormattingOptions_Value_Number) isFormattingOptions_Value_Value() {}

func (*FormattingOptions_Value_Name) isFormattingOptions_Value_Value() {}

type SemanticTokensClientCapabilities_Requests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Range:
	//	*SemanticTokensClientCapabilities_Requests_EnableRange
	//	*SemanticTokensClientCapabilities_Requests_Empty
	Range isSemanticTokensClientCapabilities_Requests_Range `protobuf_oneof:"range"`
	// Types that are assignable to Full:
	//	*SemanticTokensClientCapabilities_Requests_EnableFull
	//	*SemanticTokensClientCapabilities_Requests_Delta
	Full isSemanticTokensClientCapabilities_Requests_Full `protobuf_oneof:"full"`
}

func (x *SemanticTokensClientCapabilities_Requests) Reset() {
	*x = SemanticTokensClientCapabilities_Requests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_rpc_rpc_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticTokensClientCapabilities_Requests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTokensClientCapabilities_Requests) ProtoMessage() {}

func (x *SemanticTokensClientCapabilities_Requests) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_rpc_rpc_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTokensClientCapabilities_Requests.ProtoReflect.Descriptor instead.
func (*SemanticTokensClientCapabilities_Requests) Descriptor() ([]byte, []int) {
	return file_protocol_rpc_rpc_proto_rawDescGZIP(), []int{216, 0}
}

func (m *SemanticTokensClientCapabilities_Requests) GetRange() isSemanticTokensClientCapabilities_Requests_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (x *SemanticTokensClientCapabilities_Requests) GetEnableRange() bool {
	if x, ok := x.GetRange().(*SemanticTokensClientCapabilities_Requests_EnableRange); ok {
		return x.EnableRange
	}
	return false
}

func (x *SemanticTokensClientCapabilities_Requests) GetEmpty() structpb.NullValue {
	if x, ok := x.GetRange().(*SemanticTokensClientCapabilities_Requests_Empty); ok {
		return x.Empty
	}
	return structpb.NullValue_NULL_VALUE
}

func (m *SemanticTokensClientCapabilities_Requests) GetFull() isSemanticTokensClientCapabilities_Requests_Full {
	if m != nil {
		return m.Full
	}
	return nil
}

func (x *SemanticTokensClientCapabilities_Requests) GetEnableFull() bool {
	if x, ok := x.GetFull().(*SemanticTokensClientCapabilities_Requests_EnableFull); ok {
		return x.EnableFull
	}
	return false
}

func (x *SemanticTokensClientCapabilities_Requests) GetDelta() bool {
	if x, ok := x.GetFull().(*SemanticTokensClientCapabilities_Requests_Delta); ok {
		return x.Delta
	}
	return false
}

type isSemanticTokensClientCapabilities_Requests_Range interface {
	isSemanticTokensClientCapabilities_Requests_Range()
}

type SemanticTokensClientCapabilities_Requests_EnableRange struct {
	EnableRange bool `protobuf:"varint,2,opt,name=enable_range,json=enableRange,proto3,oneof"`
}

type SemanticTokensClientCapabilities_Requests_Empty struct {
	Empty structpb.NullValue `protobuf:"varint,3,opt,name=empty,proto3,enum=google.protobuf.NullValue,oneof"`
}

func (*SemanticTokensClientCapabilities_Requests_EnableRange) isSemanticTokensClientCapabilities_Requests_Range() {
}

func (*SemanticTokensClientCapabilities_Requests_Empty) isSemanticTokensClientCapabilities_Requests_Range() {
}

type isSemanticTokensClientCapabilities_Requests_Full interface {
	isSemanticTokensClientCapabilities_Requests_Full()
}

type SemanticTokensClientCapabilities_Requests_EnableFull struct {
	EnableFull bool `protobuf:"varint,4,opt,name=enable_full,json=enableFull,proto3,oneof"`
}

type SemanticTokensClientCapabilities_Requests_Delta struct {
	Delta bool `protobuf:"varint,5,opt,name=delta,proto3,oneof"`
}

func (*SemanticTokensClientCapabilities_Requests_EnableFull) isSemanticTokensClientCapabilities_Requests_Full() {
}

func (*SemanticTokensClientCapabilities_Requests_Delta) isSemanticTokensClientCapabilities_Requests_Full() {
}

var File_protocol_rpc_rpc_proto protoreflect.FileDescriptor

var file_protocol_rpc_rpc_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7a, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x62, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x47, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xca,
	0x05, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x49, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x55, 0x72, 0x69, 0x12, 0x4b, 0x0a, 0x16,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x4a, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x5d, 0x0a, 0x0a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x63, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x53,
	0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x18,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x5e, 0x0a,
	0x10, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x4a, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x10, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x42, 0x1c, 0x0a,
	0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x6e, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x6e, 0x79, 0x73, 0x48, 0x00, 0x52,
	0x04, 0x61, 0x6e, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x30,
	0x0a, 0x04, 0x41, 0x6e, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x6e, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x61, 0x6e, 0x79, 0x73,
	0x42, 0x18, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x18, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x13, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x66,
	0x0a, 0x12, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x42, 0x11, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x22, 0x3c, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x73, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x1c, 0x57, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x22, 0x0a, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x48, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x15, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0d, 0x48, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x68, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x1c, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x22, 0x0a, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xde, 0x01, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x22, 0x0a, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x42, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xe9, 0x04, 0x0a, 0x13, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xe5, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x8a, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x16, 0x0a,
	0x14, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe5, 0x04, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x57, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x1a, 0xe5, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x8a, 0x01, 0x0a, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf6, 0x04,
	0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x5b, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xe5, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x8a, 0x01,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf5, 0x04, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xe5,
	0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x8a, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7,
	0x03, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x71, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x46, 0x0a, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x04, 0x0a, 0x1a, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x8c, 0x01, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x61, 0x0a, 0x0d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x13,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x42, 0x1e,
	0x0a, 0x1c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86,
	0x05, 0x0a, 0x16, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x5b, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xd5, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x47, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0xaa,
	0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x47, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x64, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x57, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0xa6, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a,
	0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63,
	0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x7b, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x0c,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa0, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x6f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x08, 0x63, 0x6f,
	0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x44, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x65, 0x6e, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x42, 0x14,
	0x0a, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x16, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4c,
	0x65, 0x6e, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f,
	0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x1c, 0x0a, 0x1a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x03,
	0x0a, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a,
	0x7d, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x52,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x41, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x1a,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0c, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xab, 0x01, 0x0a, 0x1b,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00,
	0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x20, 0x0a, 0x1e, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x03, 0x0a, 0x15, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x57,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5e, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xcc, 0x03, 0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5e, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0x5a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a,
	0x13, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x61, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x50, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x1e, 0x0a, 0x1c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd6, 0x01, 0x0a, 0x1f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x23, 0x0a, 0x21, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x20, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x26,
	0x0a, 0x24, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x15,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x1a, 0x52, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x19, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xcc, 0x03, 0x0a, 0x14, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0x7d, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0e,
	0x66, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x52, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x66, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xe1, 0x03, 0x0a, 0x16, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x83, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x58, 0x0a,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47,
	0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x1c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x8d, 0x01, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x21, 0x0a, 0x1f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x5f, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x04,
	0x0a, 0x22, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x67, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xa6, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x1a, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x7b, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x1a, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x42,
	0x28, 0x0a, 0x26, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x04, 0x0a, 0x22, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x67, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xa6, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x6a, 0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x79, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x1a, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x7b,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x6a, 0x0a, 0x1d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x5f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x1a, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x28, 0x0a, 0x26, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x5f, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x0f, 0x0a, 0x1e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x05, 0x68, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c,
	0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x52, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x74, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x5c,
	0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x50, 0x0a, 0x0b,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x57, 0x0a,
	0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x67, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x6b, 0x0a, 0x12, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x06,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x68, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x56, 0x0a, 0x0d, 0x66,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0xf6, 0x07, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x1a, 0xfb, 0x04, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x12, 0x75, 0x0a,
	0x18, 0x64, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x64, 0x69,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x18, 0x64, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x15, 0x64, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x5c, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x36, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x12,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x12, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x5d, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x25, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x16, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x13, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x22, 0xaf, 0x24,
	0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x17, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x14, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0d, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x68, 0x65, 0x6c, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x53, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x02, 0x52, 0x12, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x78, 0x0a, 0x20, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52,
	0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3e, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x50, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x03, 0x52, 0x11,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x47, 0x0a, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x1c, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x17, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x04, 0x52, 0x15, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x24, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x04, 0x52, 0x21, 0x74, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46,
	0x0a, 0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x16, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x05, 0x52, 0x15, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x05, 0x52, 0x21, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x18,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x06, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x1a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x07, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47,
	0x0a, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x17, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x08, 0x52,
	0x15, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x18, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x6f,
	0x64, 0x65, 0x6c, 0x65, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x6c, 0x65, 0x6e, 0x73, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a,
	0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x0a, 0x52, 0x14, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x7f, 0x0a, 0x23, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x0a,
	0x52, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x23, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0b, 0x52, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x1b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x0b, 0x52, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a,
	0x0a, 0x29, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0c, 0x52, 0x25, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x79, 0x0a, 0x21, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x0c, 0x52, 0x1e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7d, 0x0a, 0x24, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0e,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x43, 0x0a, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x1a, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x15, 0x66, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x0e, 0x52, 0x13, 0x66, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x7c, 0x0a, 0x22, 0x66, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x0e, 0x52, 0x1f, 0x66,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d,
	0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x0f, 0x52, 0x15,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x24, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x0f, 0x52, 0x21, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x1a, 0x6a, 0x0a, 0x09, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x10, 0x0a, 0x0e,
	0x68, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x16,
	0x0a, 0x14, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x1a, 0x0a,
	0x18, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x19, 0x0a, 0x17, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x1d, 0x0a, 0x1b, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x10,
	0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x42, 0x1e, 0x0a, 0x1c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x42, 0x24, 0x0a, 0x22, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x66, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x42, 0x1a, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0x6d, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2e,
	0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xa9,
	0x01, 0x0a, 0x19, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x66, 0x0a, 0x11, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x57, 0x0a, 0x1d, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x1d, 0x57,
	0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x44, 0x0a, 0x0f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x44, 0x0a,
	0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x42, 0x0a, 0x0e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x22, 0x65, 0x0a, 0x14, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4d, 0x0a, 0x10,
	0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x75, 0x6e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x22,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x58, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x49, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95,
	0x01, 0x0a, 0x1b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x20, 0x44, 0x69, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x5d, 0x0a, 0x28, 0x44, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x56, 0x0a, 0x1d, 0x44, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x7f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x09,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x52, 0x49, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x27,
	0x44, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x67, 0x6c, 0x6f,
	0x62, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x69, 0x6e,
	0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x4b, 0x0a, 0x09,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x22, 0x6c, 0x0a, 0x28, 0x44, 0x69, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x49, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22,
	0x51, 0x0a, 0x1c, 0x44, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x21, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0b, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0x65, 0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22,
	0xea, 0x01, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x55, 0x0a, 0x20,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a,
	0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x21, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x5b, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xca, 0x01, 0x0a,
	0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x19, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x17, 0x54,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69,
	0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12,
	0x18, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61,
	0x76, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x61, 0x76,
	0x65, 0x22, 0x62, 0x0a, 0x1a, 0x44, 0x69, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x25, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xcf, 0x01,
	0x0a, 0x1c, 0x44, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53,
	0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0xd4, 0x02, 0x0a, 0x1e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x73, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x80, 0x01,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x42, 0x24, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x1b, 0x57, 0x69, 0x6c, 0x6c, 0x53,
	0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x23, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x1a, 0x44,
	0x69, 0x64, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x69, 0x0a, 0x1b, 0x44, 0x69, 0x64, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x22, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x77, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x69, 0x6c,
	0x6c, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76,
	0x65, 0x57, 0x61, 0x69, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69,
	0x64, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69,
	0x64, 0x53, 0x61, 0x76, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x24, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5e, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x42, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x54,
	0x61, 0x67, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xa0, 0x01, 0x0a,
	0x19, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x49, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,
	0x99, 0x08, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6f, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x1a, 0xd5, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x0a,
	0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x14, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x13, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x65,
	0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54,
	0x61, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x25, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x4a, 0x0a,
	0x0a, 0x54, 0x61, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67, 0x52,
	0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x1a, 0x70, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x5a, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x11,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0xe7, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x67, 0x0a, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44,
	0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x11,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x49,
	0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x81, 0x07, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3d,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x12,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x15, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x13,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x48, 0x6f, 0x76,
	0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75,
	0x70, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0x6e, 0x0a, 0x0c, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x18, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x68, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x48, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x68, 0x6f,
	0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x48,
	0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xdd, 0x02, 0x0a, 0x05, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52,
	0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40,
	0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x50, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x0a,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x1a, 0x3d, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0xeb, 0x04, 0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x15, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xf2, 0x02, 0x0a,
	0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x8c,
	0x01, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x48, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x65, 0x6c, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x22, 0xf4, 0x01, 0x0a,
	0x20, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xa2, 0x03, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x63, 0x0a,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x65, 0x6c, 0x70, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x22, 0x7f, 0x0a, 0x18, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43,
	0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x22, 0xe8, 0x01, 0x0a, 0x0d, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x47, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x75, 0x70, 0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x42, 0x0f, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xa3, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x12,
	0x40, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x48, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x1a, 0x3a, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x1d, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x74,
	0x0a, 0x12, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x1e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67,
	0x0a, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x74, 0x0a, 0x1c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x73, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x1d, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x11, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x78, 0x0a, 0x20, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x77, 0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e,
	0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdd,
	0x02, 0x0a, 0x21, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x17,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x15, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb8,
	0x02, 0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x78, 0x0a, 0x20, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x77, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdc, 0x02, 0x0a,
	0x21, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x15, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x15,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f,
	0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x50, 0x0a, 0x1b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe3, 0x01, 0x0a,
	0x1c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a,
	0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xf2, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x48, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x13, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x58, 0x0a, 0x23, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x18, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x24, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x64, 0x0a, 0x1a, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbb,
	0x02, 0x0a, 0x18, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xeb, 0x01, 0x0a,
	0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x49,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x5f, 0x0a, 0x15, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x03, 0x22, 0xe8, 0x02, 0x0a, 0x20, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x4f,
	0x0a, 0x24, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x68, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a,
	0x64, 0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x56, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0x77, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e,
	0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf8,
	0x01, 0x0a, 0x21, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x17,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x15, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x15, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xa7, 0x04, 0x0a, 0x1c, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x18, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x9c, 0x02, 0x0a,
	0x18, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x7c, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0x81, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x6f, 0x0a, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x11,
	0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x1d,
	0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a,
	0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x64, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x82, 0x01, 0x0a,
	0x11, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6f, 0x6e, 0x6c,
	0x79, 0x22, 0x8e, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x36, 0x0a,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x52,
	0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x22, 0x4f, 0x0a, 0x1a, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01,
	0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a,
	0x1e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x6f, 0x6f,
	0x6c, 0x74, 0x69, 0x70, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x13,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xf0,
	0x01, 0x0a, 0x1f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x99, 0x02, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcb, 0x01,
	0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2a,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x52,
	0x49, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x6f, 0x6f,
	0x6c, 0x74, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69,
	0x70, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x1f, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x76, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x20, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76,
	0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f,
	0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x03,
	0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xe0, 0x41,
	0x05, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x62, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05,
	0xe0, 0x41, 0x03, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x22, 0xfa, 0x02, 0x0a, 0x18, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52,
	0x08, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x15, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x13, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x73, 0x22, 0x59, 0x0a, 0x24, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x19,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x25, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x1b, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x19, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xeb, 0x03, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72,
	0x69, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x74, 0x72,
	0x69, 0x6d, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4e,
	0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x72, 0x69, 0x6d, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x65,
	0x77, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x1a, 0x5a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x5d,
	0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a,
	0x29, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01,
	0x0a, 0x1e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x8d, 0x02, 0x0a, 0x2a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x1b, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xb9, 0x02, 0x0a, 0x1e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5f, 0x0a, 0x2a,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x01,
	0x0a, 0x1f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3b, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x52,
	0x0a, 0x16, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x6d, 0x6f,
	0x72, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x22, 0xa2, 0x02, 0x0a, 0x2b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7b, 0x0a, 0x23, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x1f, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x76, 0x0a, 0x18, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xd7,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6e, 0x65, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1d,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x1e, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x75, 0x0a, 0x13, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd5, 0x02, 0x0a,
	0x1f, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x66, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x66, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x63, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x13, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x8e, 0x02, 0x0a, 0x0c, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x55, 0x0a, 0x20, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xdd, 0x02, 0x0a, 0x21, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x1b,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xcd, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x72, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x1f, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x14, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x20, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x58, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xe7, 0x01, 0x0a, 0x1b, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x67, 0x0a, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x1a, 0x74, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44,
	0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x52, 0x49, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2a, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x21, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a,
	0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55,
	0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x8c, 0x01, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x95,
	0x02, 0x0a, 0x21, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79,
	0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0xa8, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a,
	0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0xb7, 0x04, 0x0a,
	0x20, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x46,
	0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x1a, 0xaf, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x22, 0xdd, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5e, 0x0a, 0x1a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4c, 0x65,
	0x67, 0x65, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x12, 0x23, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x22, 0xdd, 0x02, 0x0a, 0x21, 0x53, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x22,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x1f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x0e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x1b, 0x53, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xd2, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x5f, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x55, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x13, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x45, 0x64, 0x69, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x22, 0x6b, 0x0a, 0x12, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x45, 0x64, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x5f, 0x0a, 0x20, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x45, 0x64, 0x69, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x2a, 0x56, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47, 0x10, 0x04, 0x2a, 0x3b, 0x0a, 0x14, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55,
	0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x6d, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x25, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x46, 0x54, 0x45, 0x52, 0x44,
	0x45, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x4f,
	0x55, 0x54, 0x10, 0x03, 0x2a, 0x8c, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x27,
	0x0a, 0x23, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x4f, 0x4b,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x53, 0x45, 0x52,
	0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x4c, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4e,
	0x49, 0x50, 0x50, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x02, 0x2a, 0x4c,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x01, 0x2a, 0x8e, 0x05, 0x0a,
	0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x07, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x09,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52, 0x44, 0x10,
	0x0e, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x4e, 0x49, 0x50, 0x50, 0x45, 0x54, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x10, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x12, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x4c,
	0x44, 0x45, 0x52, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x14,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x16,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x18, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x19, 0x2a, 0xac, 0x04,
	0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10,
	0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10,
	0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x12, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x13,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x14,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x15, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x18, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x1a, 0x2a, 0x42, 0x0a, 0x09,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x01,
	0x2a, 0xa1, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x46, 0x49, 0x58, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x46, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x10, 0x07, 0x2a, 0x6e, 0x0a, 0x10, 0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4f, 0x4c, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x03, 0x2a, 0xdc, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0c, 0x0a,
	0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x55,
	0x4d, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x41, 0x43, 0x52, 0x4f, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x45, 0x59,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x12, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x47,
	0x45, 0x58, 0x50, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x16, 0x2a, 0xe0, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x28,
	0x0a, 0x24, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x52, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x43, 0x4c,
	0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x41,
	0x44, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x42, 0x53, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10,
	0x06, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x09, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4c, 0x49, 0x42,
	0x52, 0x41, 0x52, 0x59, 0x10, 0x0a, 0x2a, 0x39, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x32, 0x87, 0x40, 0x0a, 0x16, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x63, 0x0a, 0x06,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x24, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x2a, 0x3a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x3a, 0x01,
	0x2a, 0x12, 0x64, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x24,
	0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x2a, 0x3a, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x74, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x22, 0x18, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2f, 0x2a, 0x3a,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a,
	0x0b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a,
	0x2f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x2f, 0x2a, 0x3a, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a,
	0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2f, 0x2a, 0x3a, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0x4f, 0x0a, 0x04, 0x45, 0x78, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x65, 0x78, 0x69, 0x74, 0x2f, 0x2a, 0x3a, 0x65, 0x78, 0x69,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22,
	0x16, 0x2f, 0x24, 0x2f, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x2a, 0x3a, 0x6c,
	0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x24, 0x2f, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x3a, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0xda, 0x41,
	0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x79, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x2f, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x73,
	0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x2f, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x3a, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0a, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x2f, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x6c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x36, 0x2f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0xda, 0x41, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x2c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x41, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3b, 0x22, 0x36, 0x2f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x3a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x60, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x3a, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x3a, 0x01,
	0x2a, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2c,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xae, 0x01, 0x0a, 0x19, 0x44, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x3e, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x69, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x3a, 0x64, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0xa2, 0x01, 0x0a, 0x16, 0x44, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x38, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0x69, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x36, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x64, 0x69, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x3a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x45, 0x64, 0x69, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x22, 0x1e, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x45, 0x64, 0x69, 0x74, 0x3a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x64, 0x69, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x64, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x69, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x3a, 0x64, 0x69, 0x64,
	0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x74, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x3a, 0x64, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x14,
	0x57, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22,
	0x2b, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x77,
	0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x3a, 0x77, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0xc0, 0x01, 0x0a, 0x1d, 0x57, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x69, 0x6c, 0x6c,
	0x53, 0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x22, 0x3d, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x77, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x3a, 0x77, 0x69, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x64, 0x53, 0x61, 0x76, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x64, 0x53, 0x61, 0x76,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x69, 0x64, 0x53, 0x61, 0x76, 0x65, 0x3a, 0x64, 0x69, 0x64, 0x53,
	0x61, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x14, 0x44, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x64, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x69, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x3a, 0x64,
	0x69, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7f,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xaa, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x3a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x05,
	0x48, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x3a, 0x68, 0x6f, 0x76, 0x65,
	0x72, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x65, 0x6c, 0x70, 0x3a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65,
	0x6c, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x47, 0x6f, 0x74, 0x6f, 0x44, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x83, 0x01, 0x0a, 0x0e, 0x47, 0x6f, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23,
	0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x47, 0x6f, 0x74, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x22, 0x23, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x47, 0x6f, 0x74,
	0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x22, 0x2b, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23,
	0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01,
	0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x3a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e,
	0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73,
	0x3a, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x73,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x3a, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x0c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x3a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x3a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xa2, 0x01, 0x0a, 0x11,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x97, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x22, 0x23, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01, 0x0a, 0x17, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01,
	0x0a, 0x10, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x74, 0x65, 0x78, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a,
	0x06, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x0c,
	0x46, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x66, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01,
	0x0a, 0x14, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x37, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x3a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x3a, 0x01,
	0x2a, 0x12, 0xc3, 0x01, 0x0a, 0x1a, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x37, 0x2f, 0x63, 0x61,
	0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x2f, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x3a, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xc3, 0x01, 0x0a, 0x1a, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x79, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3c, 0x22, 0x37, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x2f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x3a,
	0x63, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x1a, 0x0c, 0xca,
	0x41, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x80, 0x01, 0x0a, 0x14,
	0x64, 0x65, 0x76, 0x2e, 0x6c, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x42, 0x08, 0x52, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x1b, 0x67, 0x6f, 0x2e, 0x6c, 0x73, 0x70, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0xf8, 0x01, 0x01,
	0xa2, 0x02, 0x05, 0x4c, 0x53, 0x50, 0x50, 0x52, 0xaa, 0x02, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x70, 0x63, 0xba, 0x02, 0x05, 0x4c, 0x53, 0x50, 0x50, 0x52, 0xca,
	0x02, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5c, 0x52, 0x70, 0x63, 0xea, 0x02,
	0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x3a, 0x52, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_rpc_rpc_proto_rawDescOnce sync.Once
	file_protocol_rpc_rpc_proto_rawDescData = file_protocol_rpc_rpc_proto_rawDesc
)

func file_protocol_rpc_rpc_proto_rawDescGZIP() []byte {
	file_protocol_rpc_rpc_proto_rawDescOnce.Do(func() {
		file_protocol_rpc_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_rpc_rpc_proto_rawDescData)
	})
	return file_protocol_rpc_rpc_proto_rawDescData
}

var (
	file_protocol_rpc_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
	file_protocol_rpc_rpc_proto_msgTypes  = make([]protoimpl.MessageInfo, 285)
	file_protocol_rpc_rpc_proto_goTypes   = []interface{}{
		(MessageType)(0),                                               // 0: protocol.rpc.MessageType
		(TextDocumentSyncKind)(0),                                      // 1: protocol.rpc.TextDocumentSyncKind
		(TextDocumentSaveReason)(0),                                    // 2: protocol.rpc.TextDocumentSaveReason
		(CompletionTriggerKind)(0),                                     // 3: protocol.rpc.CompletionTriggerKind
		(InsertTextFormat)(0),                                          // 4: protocol.rpc.InsertTextFormat
		(CompletionItemTag)(0),                                         // 5: protocol.rpc.CompletionItemTag
		(CompletionItemKind)(0),                                        // 6: protocol.rpc.CompletionItemKind
		(SymbolKind)(0),                                                // 7: protocol.rpc.SymbolKind
		(SymbolTag)(0),                                                 // 8: protocol.rpc.SymbolTag
		(CodeActionKind)(0),                                            // 9: protocol.rpc.CodeActionKind
		(FoldingRangeKind)(0),                                          // 10: protocol.rpc.FoldingRangeKind
		(SemanticTokenTypes)(0),                                        // 11: protocol.rpc.SemanticTokenTypes
		(SemanticTokenModifiers)(0),                                    // 12: protocol.rpc.SemanticTokenModifiers
		(TokenFormat)(0),                                               // 13: protocol.rpc.TokenFormat
		(FileSystemWatcher_WatchKind)(0),                               // 14: protocol.rpc.FileSystemWatcher.WatchKind
		(FileEvent_FileChangeType)(0),                                  // 15: protocol.rpc.FileEvent.FileChangeType
		(SignatureHelpContext_SignatureHelpTriggerKind)(0),             // 16: protocol.rpc.SignatureHelpContext.SignatureHelpTriggerKind
		(DocumentHighlight_DocumentHighlightKind)(0),                   // 17: protocol.rpc.DocumentHighlight.DocumentHighlightKind
		(*CancelRequest)(nil),                                          // 18: protocol.rpc.CancelRequest
		(*ProgressToken)(nil),                                          // 19: protocol.rpc.ProgressToken
		(*ProgressRequest)(nil),                                        // 20: protocol.rpc.ProgressRequest
		(*WorkDoneProgressParams)(nil),                                 // 21: protocol.rpc.WorkDoneProgressParams
		(*PartialResultParams)(nil),                                    // 22: protocol.rpc.PartialResultParams
		(*InitializeRequest)(nil),                                      // 23: protocol.rpc.InitializeRequest
		(*InitializedRequest)(nil),                                     // 24: protocol.rpc.InitializedRequest
		(*LogTraceRequest)(nil),                                        // 25: protocol.rpc.LogTraceRequest
		(*SetTraceRequest)(nil),                                        // 26: protocol.rpc.SetTraceRequest
		(*ShowMessageResponse)(nil),                                    // 27: protocol.rpc.ShowMessageResponse
		(*WorkspaceFoldersResponse)(nil),                               // 28: protocol.rpc.WorkspaceFoldersResponse
		(*ConfigurationResponse)(nil),                                  // 29: protocol.rpc.ConfigurationResponse
		(*WorkspaceSymbolsResponse)(nil),                               // 30: protocol.rpc.WorkspaceSymbolsResponse
		(*ExecuteCommandResponse)(nil),                                 // 31: protocol.rpc.ExecuteCommandResponse
		(*TextEdits)(nil),                                              // 32: protocol.rpc.TextEdits
		(*WillSaveTextDocumentResponse)(nil),                           // 33: protocol.rpc.WillSaveTextDocumentResponse
		(*CompletionItems)(nil),                                        // 34: protocol.rpc.CompletionItems
		(*CompletionResponse)(nil),                                     // 35: protocol.rpc.CompletionResponse
		(*HoverResponse)(nil),                                          // 36: protocol.rpc.HoverResponse
		(*CompletionItemResolveRequest)(nil),                           // 37: protocol.rpc.CompletionItemResolveRequest
		(*CompletionItemResolveResponse)(nil),                          // 38: protocol.rpc.CompletionItemResolveResponse
		(*SignatureHelpResponse)(nil),                                  // 39: protocol.rpc.SignatureHelpResponse
		(*Locations)(nil),                                              // 40: protocol.rpc.Locations
		(*LocationLinks)(nil),                                          // 41: protocol.rpc.LocationLinks
		(*DeclarationResponse)(nil),                                    // 42: protocol.rpc.DeclarationResponse
		(*DefinitionResponse)(nil),                                     // 43: protocol.rpc.DefinitionResponse
		(*TypeDefinitionResponse)(nil),                                 // 44: protocol.rpc.TypeDefinitionResponse
		(*ImplementationResponse)(nil),                                 // 45: protocol.rpc.ImplementationResponse
		(*ReferenceResponse)(nil),                                      // 46: protocol.rpc.ReferenceResponse
		(*DocumentHighlightsResponse)(nil),                             // 47: protocol.rpc.DocumentHighlightsResponse
		(*DocumentSymbolResponse)(nil),                                 // 48: protocol.rpc.DocumentSymbolResponse
		(*CodeActionResponse)(nil),                                     // 49: protocol.rpc.CodeActionResponse
		(*CodeLensResponse)(nil),                                       // 50: protocol.rpc.CodeLensResponse
		(*CodeLensResolveRequest)(nil),                                 // 51: protocol.rpc.CodeLensResolveRequest
		(*CodeLensResolveResponse)(nil),                                // 52: protocol.rpc.CodeLensResolveResponse
		(*DocumentLinkResponse)(nil),                                   // 53: protocol.rpc.DocumentLinkResponse
		(*DocumentLinkResolveRequest)(nil),                             // 54: protocol.rpc.DocumentLinkResolveRequest
		(*DocumentLinkResolveResponse)(nil),                            // 55: protocol.rpc.DocumentLinkResolveResponse
		(*DocumentColorResponse)(nil),                                  // 56: protocol.rpc.DocumentColorResponse
		(*ColorPresentationResponse)(nil),                              // 57: protocol.rpc.ColorPresentationResponse
		(*DocumentFormattingResponse)(nil),                             // 58: protocol.rpc.DocumentFormattingResponse
		(*DocumentRangeFormattingResponse)(nil),                        // 59: protocol.rpc.DocumentRangeFormattingResponse
		(*DocumentOnTypeFormattingResponse)(nil),                       // 60: protocol.rpc.DocumentOnTypeFormattingResponse
		(*RenameResponse)(nil),                                         // 61: protocol.rpc.RenameResponse
		(*PrepareRenameResponse)(nil),                                  // 62: protocol.rpc.PrepareRenameResponse
		(*FoldingRangeResponse)(nil),                                   // 63: protocol.rpc.FoldingRangeResponse
		(*SelectionRangeResponse)(nil),                                 // 64: protocol.rpc.SelectionRangeResponse
		(*CallHierarchyPrepareResponse)(nil),                           // 65: protocol.rpc.CallHierarchyPrepareResponse
		(*CallHierarchyIncomingCallsResponse)(nil),                     // 66: protocol.rpc.CallHierarchyIncomingCallsResponse
		(*CallHierarchyOutgoingCallsResponse)(nil),                     // 67: protocol.rpc.CallHierarchyOutgoingCallsResponse
		(*TextDocumentClientCapabilities)(nil),                         // 68: protocol.rpc.TextDocumentClientCapabilities
		(*ClientCapabilities)(nil),                                     // 69: protocol.rpc.ClientCapabilities
		(*InitializeResponse)(nil),                                     // 70: protocol.rpc.InitializeResponse
		(*InitializeErrorUnknownProtocolVersion)(nil),                  // 71: protocol.rpc.InitializeErrorUnknownProtocolVersion
		(*InitializeErrorData)(nil),                                    // 72: protocol.rpc.InitializeErrorData
		(*ServerCapabilities)(nil),                                     // 73: protocol.rpc.ServerCapabilities
		(*ShowMessageRequestParams)(nil),                               // 74: protocol.rpc.ShowMessageRequestParams
		(*MessageActionItem)(nil),                                      // 75: protocol.rpc.MessageActionItem
		(*ShowMessageRequestRequest)(nil),                              // 76: protocol.rpc.ShowMessageRequestRequest
		(*LogMessageRequest)(nil),                                      // 77: protocol.rpc.LogMessageRequest
		(*WorkDoneProgressCreateRequest)(nil),                          // 78: protocol.rpc.WorkDoneProgressCreateRequest
		(*WorkDoneProgressCancelRequest)(nil),                          // 79: protocol.rpc.WorkDoneProgressCancelRequest
		(*TelemetryParams)(nil),                                        // 80: protocol.rpc.TelemetryParams
		(*Registration)(nil),                                           // 81: protocol.rpc.Registration
		(*RegistrationParams)(nil),                                     // 82: protocol.rpc.RegistrationParams
		(*Unregistration)(nil),                                         // 83: protocol.rpc.Unregistration
		(*UnregistrationParams)(nil),                                   // 84: protocol.rpc.UnregistrationParams
		(*WorkspaceFoldersServerCapabilities)(nil),                     // 85: protocol.rpc.WorkspaceFoldersServerCapabilities
		(*WorkspaceFolder)(nil),                                        // 86: protocol.rpc.WorkspaceFolder
		(*WorkspaceFoldersChangeEvent)(nil),                            // 87: protocol.rpc.WorkspaceFoldersChangeEvent
		(*DidChangeWorkspaceFoldersRequest)(nil),                       // 88: protocol.rpc.DidChangeWorkspaceFoldersRequest
		(*DidChangeConfigurationClientCapabilities)(nil),               // 89: protocol.rpc.DidChangeConfigurationClientCapabilities
		(*DidChangeConfigurationRequest)(nil),                          // 90: protocol.rpc.DidChangeConfigurationRequest
		(*ConfigurationItem)(nil),                                      // 91: protocol.rpc.ConfigurationItem
		(*ConfigurationRequest)(nil),                                   // 92: protocol.rpc.ConfigurationRequest
		(*DidChangeWatchedFilesClientCapabilities)(nil),                // 93: protocol.rpc.DidChangeWatchedFilesClientCapabilities
		(*FileSystemWatcher)(nil),                                      // 94: protocol.rpc.FileSystemWatcher
		(*DidChangeWatchedFilesRegistrationOptions)(nil),               // 95: protocol.rpc.DidChangeWatchedFilesRegistrationOptions
		(*FileEvent)(nil),                                              // 96: protocol.rpc.FileEvent
		(*DidChangeWatchedFilesRequest)(nil),                           // 97: protocol.rpc.DidChangeWatchedFilesRequest
		(*WorkspaceSymbolClientCapabilities)(nil),                      // 98: protocol.rpc.WorkspaceSymbolClientCapabilities
		(*WorkspaceSymbolParams)(nil),                                  // 99: protocol.rpc.WorkspaceSymbolParams
		(*ExecuteCommandClientCapabilities)(nil),                       // 100: protocol.rpc.ExecuteCommandClientCapabilities
		(*ExecuteCommandOptions)(nil),                                  // 101: protocol.rpc.ExecuteCommandOptions
		(*ExecuteCommandRegistrationOptions)(nil),                      // 102: protocol.rpc.ExecuteCommandRegistrationOptions
		(*ExecuteCommandParams)(nil),                                   // 103: protocol.rpc.ExecuteCommandParams
		(*ApplyWorkspaceEditRequest)(nil),                              // 104: protocol.rpc.ApplyWorkspaceEditRequest
		(*ApplyWorkspaceEditResponse)(nil),                             // 105: protocol.rpc.ApplyWorkspaceEditResponse
		(*TextDocumentSyncOptions)(nil),                                // 106: protocol.rpc.TextDocumentSyncOptions
		(*DidOpenTextDocumentRequest)(nil),                             // 107: protocol.rpc.DidOpenTextDocumentRequest
		(*TextDocumentChangeRegistrationOptions)(nil),                  // 108: protocol.rpc.TextDocumentChangeRegistrationOptions
		(*DidChangeTextDocumentRequest)(nil),                           // 109: protocol.rpc.DidChangeTextDocumentRequest
		(*TextDocumentContentChangeEvent)(nil),                         // 110: protocol.rpc.TextDocumentContentChangeEvent
		(*WillSaveTextDocumentRequest)(nil),                            // 111: protocol.rpc.WillSaveTextDocumentRequest
		(*SaveOptions)(nil),                                            // 112: protocol.rpc.SaveOptions
		(*TextDocumentSaveRegistrationOptions)(nil),                    // 113: protocol.rpc.TextDocumentSaveRegistrationOptions
		(*DidSaveTextDocumentRequest)(nil),                             // 114: protocol.rpc.DidSaveTextDocumentRequest
		(*DidCloseTextDocumentRequest)(nil),                            // 115: protocol.rpc.DidCloseTextDocumentRequest
		(*TextDocumentSyncClientCapabilities)(nil),                     // 116: protocol.rpc.TextDocumentSyncClientCapabilities
		(*PublishDiagnosticsClientCapabilities)(nil),                   // 117: protocol.rpc.PublishDiagnosticsClientCapabilities
		(*PublishDiagnosticsRequest)(nil),                              // 118: protocol.rpc.PublishDiagnosticsRequest
		(*CompletionClientCapabilities)(nil),                           // 119: protocol.rpc.CompletionClientCapabilities
		(*CompletionOptions)(nil),                                      // 120: protocol.rpc.CompletionOptions
		(*CompletionRegistrationOptions)(nil),                          // 121: protocol.rpc.CompletionRegistrationOptions
		(*CompletionRequest)(nil),                                      // 122: protocol.rpc.CompletionRequest
		(*CompletionContext)(nil),                                      // 123: protocol.rpc.CompletionContext
		(*CompletionList)(nil),                                         // 124: protocol.rpc.CompletionList
		(*CompletionItem)(nil),                                         // 125: protocol.rpc.CompletionItem
		(*HoverClientCapabilities)(nil),                                // 126: protocol.rpc.HoverClientCapabilities
		(*HoverOptions)(nil),                                           // 127: protocol.rpc.HoverOptions
		(*HoverRegistrationOptions)(nil),                               // 128: protocol.rpc.HoverRegistrationOptions
		(*HoverRequest)(nil),                                           // 129: protocol.rpc.HoverRequest
		(*Hover)(nil),                                                  // 130: protocol.rpc.Hover
		(*MarkedString)(nil),                                           // 131: protocol.rpc.MarkedString
		(*SignatureHelpClientCapabilities)(nil),                        // 132: protocol.rpc.SignatureHelpClientCapabilities
		(*SignatureHelpOptions)(nil),                                   // 133: protocol.rpc.SignatureHelpOptions
		(*SignatureHelpRegistrationOptions)(nil),                       // 134: protocol.rpc.SignatureHelpRegistrationOptions
		(*SignatureHelpRequest)(nil),                                   // 135: protocol.rpc.SignatureHelpRequest
		(*SignatureHelpContext)(nil),                                   // 136: protocol.rpc.SignatureHelpContext
		(*SignatureHelp)(nil),                                          // 137: protocol.rpc.SignatureHelp
		(*SignatureInformation)(nil),                                   // 138: protocol.rpc.SignatureInformation
		(*ParameterInformation)(nil),                                   // 139: protocol.rpc.ParameterInformation
		(*DeclarationClientCapabilities)(nil),                          // 140: protocol.rpc.DeclarationClientCapabilities
		(*DeclarationOptions)(nil),                                     // 141: protocol.rpc.DeclarationOptions
		(*DeclarationRegistrationOptions)(nil),                         // 142: protocol.rpc.DeclarationRegistrationOptions
		(*DeclarationRequest)(nil),                                     // 143: protocol.rpc.DeclarationRequest
		(*DefinitionClientCapabilities)(nil),                           // 144: protocol.rpc.DefinitionClientCapabilities
		(*DefinitionOptions)(nil),                                      // 145: protocol.rpc.DefinitionOptions
		(*DefinitionRegistrationOptions)(nil),                          // 146: protocol.rpc.DefinitionRegistrationOptions
		(*DefinitionRequest)(nil),                                      // 147: protocol.rpc.DefinitionRequest
		(*TypeDefinitionClientCapabilities)(nil),                       // 148: protocol.rpc.TypeDefinitionClientCapabilities
		(*TypeDefinitionOptions)(nil),                                  // 149: protocol.rpc.TypeDefinitionOptions
		(*TypeDefinitionRegistrationOptions)(nil),                      // 150: protocol.rpc.TypeDefinitionRegistrationOptions
		(*TypeDefinitionRequest)(nil),                                  // 151: protocol.rpc.TypeDefinitionRequest
		(*ImplementationClientCapabilities)(nil),                       // 152: protocol.rpc.ImplementationClientCapabilities
		(*ImplementationOptions)(nil),                                  // 153: protocol.rpc.ImplementationOptions
		(*ImplementationRegistrationOptions)(nil),                      // 154: protocol.rpc.ImplementationRegistrationOptions
		(*ImplementationRequest)(nil),                                  // 155: protocol.rpc.ImplementationRequest
		(*ReferenceClientCapabilities)(nil),                            // 156: protocol.rpc.ReferenceClientCapabilities
		(*ReferenceOptions)(nil),                                       // 157: protocol.rpc.ReferenceOptions
		(*ReferenceRegistrationOptions)(nil),                           // 158: protocol.rpc.ReferenceRegistrationOptions
		(*ReferenceRequest)(nil),                                       // 159: protocol.rpc.ReferenceRequest
		(*ReferenceContext)(nil),                                       // 160: protocol.rpc.ReferenceContext
		(*DocumentHighlightClientCapabilities)(nil),                    // 161: protocol.rpc.DocumentHighlightClientCapabilities
		(*DocumentHighlightOptions)(nil),                               // 162: protocol.rpc.DocumentHighlightOptions
		(*DocumentHighlightRegistrationOptions)(nil),                   // 163: protocol.rpc.DocumentHighlightRegistrationOptions
		(*DocumentHighlightRequest)(nil),                               // 164: protocol.rpc.DocumentHighlightRequest
		(*DocumentHighlight)(nil),                                      // 165: protocol.rpc.DocumentHighlight
		(*DocumentSymbolClientCapabilities)(nil),                       // 166: protocol.rpc.DocumentSymbolClientCapabilities
		(*DocumentSymbolOptions)(nil),                                  // 167: protocol.rpc.DocumentSymbolOptions
		(*DocumentSymbolRegistrationOptions)(nil),                      // 168: protocol.rpc.DocumentSymbolRegistrationOptions
		(*DocumentSymbolRequest)(nil),                                  // 169: protocol.rpc.DocumentSymbolRequest
		(*DocumentSymbol)(nil),                                         // 170: protocol.rpc.DocumentSymbol
		(*SymbolInformation)(nil),                                      // 171: protocol.rpc.SymbolInformation
		(*CodeActionClientCapabilities)(nil),                           // 172: protocol.rpc.CodeActionClientCapabilities
		(*CodeActionOptions)(nil),                                      // 173: protocol.rpc.CodeActionOptions
		(*CodeActionRegistrationOptions)(nil),                          // 174: protocol.rpc.CodeActionRegistrationOptions
		(*CodeActionRequest)(nil),                                      // 175: protocol.rpc.CodeActionRequest
		(*CodeActionContext)(nil),                                      // 176: protocol.rpc.CodeActionContext
		(*CodeAction)(nil),                                             // 177: protocol.rpc.CodeAction
		(*CodeLensClientCapabilities)(nil),                             // 178: protocol.rpc.CodeLensClientCapabilities
		(*CodeLensOptions)(nil),                                        // 179: protocol.rpc.CodeLensOptions
		(*CodeLensRegistrationOptions)(nil),                            // 180: protocol.rpc.CodeLensRegistrationOptions
		(*CodeLensRequest)(nil),                                        // 181: protocol.rpc.CodeLensRequest
		(*CodeLens)(nil),                                               // 182: protocol.rpc.CodeLens
		(*DocumentLinkClientCapabilities)(nil),                         // 183: protocol.rpc.DocumentLinkClientCapabilities
		(*DocumentLinkOptions)(nil),                                    // 184: protocol.rpc.DocumentLinkOptions
		(*DocumentLinkRegistrationOptions)(nil),                        // 185: protocol.rpc.DocumentLinkRegistrationOptions
		(*DocumentLinkRequest)(nil),                                    // 186: protocol.rpc.DocumentLinkRequest
		(*DocumentLink)(nil),                                           // 187: protocol.rpc.DocumentLink
		(*DocumentColorClientCapabilities)(nil),                        // 188: protocol.rpc.DocumentColorClientCapabilities
		(*DocumentColorOptions)(nil),                                   // 189: protocol.rpc.DocumentColorOptions
		(*DocumentColorRegistrationOptions)(nil),                       // 190: protocol.rpc.DocumentColorRegistrationOptions
		(*DocumentColorRequest)(nil),                                   // 191: protocol.rpc.DocumentColorRequest
		(*ColorInformation)(nil),                                       // 192: protocol.rpc.ColorInformation
		(*Color)(nil),                                                  // 193: protocol.rpc.Color
		(*ColorPresentationRequest)(nil),                               // 194: protocol.rpc.ColorPresentationRequest
		(*ColorPresentation)(nil),                                      // 195: protocol.rpc.ColorPresentation
		(*DocumentFormattingClientCapabilities)(nil),                   // 196: protocol.rpc.DocumentFormattingClientCapabilities
		(*DocumentFormattingOptions)(nil),                              // 197: protocol.rpc.DocumentFormattingOptions
		(*DocumentFormattingRegistrationOptions)(nil),                  // 198: protocol.rpc.DocumentFormattingRegistrationOptions
		(*DocumentFormattingRequest)(nil),                              // 199: protocol.rpc.DocumentFormattingRequest
		(*FormattingOptions)(nil),                                      // 200: protocol.rpc.FormattingOptions
		(*DocumentRangeFormattingClientCapabilities)(nil),              // 201: protocol.rpc.DocumentRangeFormattingClientCapabilities
		(*DocumentRangeFormattingOptions)(nil),                         // 202: protocol.rpc.DocumentRangeFormattingOptions
		(*DocumentRangeFormattingRegistrationOptions)(nil),             // 203: protocol.rpc.DocumentRangeFormattingRegistrationOptions
		(*DocumentRangeFormattingRequest)(nil),                         // 204: protocol.rpc.DocumentRangeFormattingRequest
		(*DocumentOnTypeFormattingClientCapabilities)(nil),             // 205: protocol.rpc.DocumentOnTypeFormattingClientCapabilities
		(*DocumentOnTypeFormattingOptions)(nil),                        // 206: protocol.rpc.DocumentOnTypeFormattingOptions
		(*DocumentOnTypeFormattingRegistrationOptions)(nil),            // 207: protocol.rpc.DocumentOnTypeFormattingRegistrationOptions
		(*DocumentOnTypeFormattingRequest)(nil),                        // 208: protocol.rpc.DocumentOnTypeFormattingRequest
		(*RenameClientCapabilities)(nil),                               // 209: protocol.rpc.RenameClientCapabilities
		(*RenameOptions)(nil),                                          // 210: protocol.rpc.RenameOptions
		(*RenameRegistrationOptions)(nil),                              // 211: protocol.rpc.RenameRegistrationOptions
		(*RenameRequest)(nil),                                          // 212: protocol.rpc.RenameRequest
		(*PrepareRenameRequest)(nil),                                   // 213: protocol.rpc.PrepareRenameRequest
		(*FoldingRangeClientCapabilities)(nil),                         // 214: protocol.rpc.FoldingRangeClientCapabilities
		(*FoldingRangeOptions)(nil),                                    // 215: protocol.rpc.FoldingRangeOptions
		(*FoldingRangeRegistrationOptions)(nil),                        // 216: protocol.rpc.FoldingRangeRegistrationOptions
		(*FoldingRangeRequest)(nil),                                    // 217: protocol.rpc.FoldingRangeRequest
		(*FoldingRange)(nil),                                           // 218: protocol.rpc.FoldingRange
		(*SelectionRangeClientCapabilities)(nil),                       // 219: protocol.rpc.SelectionRangeClientCapabilities
		(*SelectionRangeOptions)(nil),                                  // 220: protocol.rpc.SelectionRangeOptions
		(*SelectionRangeRegistrationOptions)(nil),                      // 221: protocol.rpc.SelectionRangeRegistrationOptions
		(*SelectionRangeRequest)(nil),                                  // 222: protocol.rpc.SelectionRangeRequest
		(*SelectionRange)(nil),                                         // 223: protocol.rpc.SelectionRange
		(*CallHierarchyClientCapabilities)(nil),                        // 224: protocol.rpc.CallHierarchyClientCapabilities
		(*CallHierarchyOptions)(nil),                                   // 225: protocol.rpc.CallHierarchyOptions
		(*CallHierarchyRegistrationOptions)(nil),                       // 226: protocol.rpc.CallHierarchyRegistrationOptions
		(*CallHierarchyPrepareRequest)(nil),                            // 227: protocol.rpc.CallHierarchyPrepareRequest
		(*CallHierarchyItem)(nil),                                      // 228: protocol.rpc.CallHierarchyItem
		(*CallHierarchyIncomingCallsRequest)(nil),                      // 229: protocol.rpc.CallHierarchyIncomingCallsRequest
		(*CallHierarchyIncomingCall)(nil),                              // 230: protocol.rpc.CallHierarchyIncomingCall
		(*CallHierarchyOutgoingCallsRequest)(nil),                      // 231: protocol.rpc.CallHierarchyOutgoingCallsRequest
		(*CallHierarchyOutgoingCall)(nil),                              // 232: protocol.rpc.CallHierarchyOutgoingCall
		(*SemanticTokensLegend)(nil),                                   // 233: protocol.rpc.SemanticTokensLegend
		(*SemanticTokensClientCapabilities)(nil),                       // 234: protocol.rpc.SemanticTokensClientCapabilities
		(*SemanticTokensOptions)(nil),                                  // 235: protocol.rpc.SemanticTokensOptions
		(*SemanticTokensRegistrationOptions)(nil),                      // 236: protocol.rpc.SemanticTokensRegistrationOptions
		(*SemanticTokensParams)(nil),                                   // 237: protocol.rpc.SemanticTokensParams
		(*SemanticTokens)(nil),                                         // 238: protocol.rpc.SemanticTokens
		(*SemanticTokensPartialResult)(nil),                            // 239: protocol.rpc.SemanticTokensPartialResult
		(*SemanticTokensDeltaParams)(nil),                              // 240: protocol.rpc.SemanticTokensDeltaParams
		(*SemanticTokensDelta)(nil),                                    // 241: protocol.rpc.SemanticTokensDelta
		(*SemanticTokensEdit)(nil),                                     // 242: protocol.rpc.SemanticTokensEdit
		(*SemanticTokensDeltaPartialResult)(nil),                       // 243: protocol.rpc.SemanticTokensDeltaPartialResult
		(*InitializeRequest_ClientInfo)(nil),                           // 244: protocol.rpc.InitializeRequest.ClientInfo
		(*WorkspaceFoldersResponse_WorkspaceFolders)(nil),              // 245: protocol.rpc.WorkspaceFoldersResponse.WorkspaceFolders
		(*ConfigurationResponse_Anys)(nil),                             // 246: protocol.rpc.ConfigurationResponse.Anys
		(*WorkspaceSymbolsResponse_SymbolInformations)(nil),            // 247: protocol.rpc.WorkspaceSymbolsResponse.SymbolInformations
		(*DeclarationResponse_Result)(nil),                             // 248: protocol.rpc.DeclarationResponse.Result
		(*DeclarationResponse_PartialResult)(nil),                      // 249: protocol.rpc.DeclarationResponse.PartialResult
		(*DefinitionResponse_Result)(nil),                              // 250: protocol.rpc.DefinitionResponse.Result
		(*DefinitionResponse_PartialResult)(nil),                       // 251: protocol.rpc.DefinitionResponse.PartialResult
		(*TypeDefinitionResponse_Result)(nil),                          // 252: protocol.rpc.TypeDefinitionResponse.Result
		(*TypeDefinitionResponse_PartialResult)(nil),                   // 253: protocol.rpc.TypeDefinitionResponse.PartialResult
		(*ImplementationResponse_Result)(nil),                          // 254: protocol.rpc.ImplementationResponse.Result
		(*ImplementationResponse_PartialResult)(nil),                   // 255: protocol.rpc.ImplementationResponse.PartialResult
		(*ReferenceResponse_Result)(nil),                               // 256: protocol.rpc.ReferenceResponse.Result
		(*ReferenceResponse_PartialResult)(nil),                        // 257: protocol.rpc.ReferenceResponse.PartialResult
		(*DocumentHighlightsResponse_Result)(nil),                      // 258: protocol.rpc.DocumentHighlightsResponse.Result
		(*DocumentHighlightsResponse_PartialResult)(nil),               // 259: protocol.rpc.DocumentHighlightsResponse.PartialResult
		(*DocumentSymbolResponse_Result)(nil),                          // 260: protocol.rpc.DocumentSymbolResponse.Result
		(*DocumentSymbolResponse_PartialResult)(nil),                   // 261: protocol.rpc.DocumentSymbolResponse.PartialResult
		(*CodeActionResponse_Result)(nil),                              // 262: protocol.rpc.CodeActionResponse.Result
		(*CodeActionResponse_PartialResult)(nil),                       // 263: protocol.rpc.CodeActionResponse.PartialResult
		(*CodeLensResponse_Result)(nil),                                // 264: protocol.rpc.CodeLensResponse.Result
		(*CodeLensResponse_PartialResult)(nil),                         // 265: protocol.rpc.CodeLensResponse.PartialResult
		(*DocumentLinkResponse_Result)(nil),                            // 266: protocol.rpc.DocumentLinkResponse.Result
		(*DocumentLinkResponse_PartialResult)(nil),                     // 267: protocol.rpc.DocumentLinkResponse.PartialResult
		(*DocumentColorResponse_Result)(nil),                           // 268: protocol.rpc.DocumentColorResponse.Result
		(*DocumentColorResponse_PartialResult)(nil),                    // 269: protocol.rpc.DocumentColorResponse.PartialResult
		(*ColorPresentationResponse_Result)(nil),                       // 270: protocol.rpc.ColorPresentationResponse.Result
		(*ColorPresentationResponse_PartialResult)(nil),                // 271: protocol.rpc.ColorPresentationResponse.PartialResult
		(*PrepareRenameResponse_Result)(nil),                           // 272: protocol.rpc.PrepareRenameResponse.Result
		(*FoldingRangeResponse_Result)(nil),                            // 273: protocol.rpc.FoldingRangeResponse.Result
		(*FoldingRangeResponse_PartialResult)(nil),                     // 274: protocol.rpc.FoldingRangeResponse.PartialResult
		(*SelectionRangeResponse_Result)(nil),                          // 275: protocol.rpc.SelectionRangeResponse.Result
		(*SelectionRangeResponse_PartialResult)(nil),                   // 276: protocol.rpc.SelectionRangeResponse.PartialResult
		(*CallHierarchyPrepareResponse_Result)(nil),                    // 277: protocol.rpc.CallHierarchyPrepareResponse.Result
		(*CallHierarchyIncomingCallsResponse_Result)(nil),              // 278: protocol.rpc.CallHierarchyIncomingCallsResponse.Result
		(*CallHierarchyIncomingCallsResponse_PartialResult)(nil),       // 279: protocol.rpc.CallHierarchyIncomingCallsResponse.PartialResult
		(*CallHierarchyOutgoingCallsResponse_Result)(nil),              // 280: protocol.rpc.CallHierarchyOutgoingCallsResponse.Result
		(*CallHierarchyOutgoingCallsResponse_PartialResult)(nil),       // 281: protocol.rpc.CallHierarchyOutgoingCallsResponse.PartialResult
		(*ClientCapabilities_Workspace)(nil),                           // 282: protocol.rpc.ClientCapabilities.Workspace
		(*ClientCapabilities_Window)(nil),                              // 283: protocol.rpc.ClientCapabilities.Window
		(*InitializeResponse_ServerInfo)(nil),                          // 284: protocol.rpc.InitializeResponse.ServerInfo
		(*ServerCapabilities_Workspace)(nil),                           // 285: protocol.rpc.ServerCapabilities.Workspace
		(*WorkspaceSymbolClientCapabilities_SymbolKind)(nil),           // 286: protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind
		(*TextDocumentContentChangeEvent_ContentChangeEvent)(nil),      // 287: protocol.rpc.TextDocumentContentChangeEvent.ContentChangeEvent
		(*PublishDiagnosticsClientCapabilities_TagSupport)(nil),        // 288: protocol.rpc.PublishDiagnosticsClientCapabilities.TagSupport
		(*CompletionClientCapabilities_CompletionItem)(nil),            // 289: protocol.rpc.CompletionClientCapabilities.CompletionItem
		(*CompletionClientCapabilities_CompletionItemKind)(nil),        // 290: protocol.rpc.CompletionClientCapabilities.CompletionItemKind
		(*CompletionClientCapabilities_CompletionItem_TagSupport)(nil), // 291: protocol.rpc.CompletionClientCapabilities.CompletionItem.TagSupport
		(*Hover_MarkedStrings)(nil),                                    // 292: protocol.rpc.Hover.MarkedStrings
		(*MarkedString_CodeBlock)(nil),                                 // 293: protocol.rpc.MarkedString.CodeBlock
		(*SignatureHelpClientCapabilities_SignatureInformation)(nil),   // 294: protocol.rpc.SignatureHelpClientCapabilities.SignatureInformation
		(*SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation)(nil), // 295: protocol.rpc.SignatureHelpClientCapabilities.SignatureInformation.ParameterInformation
		(*ParameterInformation_Offset)(nil),                                               // 296: protocol.rpc.ParameterInformation.Offset
		(*DocumentSymbolClientCapabilities_SymbolKind)(nil),                               // 297: protocol.rpc.DocumentSymbolClientCapabilities.SymbolKind
		(*CodeActionClientCapabilities_CodeActionLiteralSupport)(nil),                     // 298: protocol.rpc.CodeActionClientCapabilities.CodeActionLiteralSupport
		(*CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind)(nil),      // 299: protocol.rpc.CodeActionClientCapabilities.CodeActionLiteralSupport.CodeActionKind
		(*FormattingOptions_Value)(nil),                                                   // 300: protocol.rpc.FormattingOptions.Value
		nil,                                                                               // 301: protocol.rpc.FormattingOptions.KeyEntry
		(*SemanticTokensClientCapabilities_Requests)(nil),                                 // 302: protocol.rpc.SemanticTokensClientCapabilities.Requests
		(*anypb.Any)(nil),                                                                 // 303: google.protobuf.Any
		(*wrapperspb.StringValue)(nil),                                                    // 304: google.protobuf.StringValue
		(*protocol.DocumentURI)(nil),                                                      // 305: protocol.DocumentURI
		(protocol.TraceValue)(0),                                                          // 306: protocol.TraceValue
		(structpb.NullValue)(0),                                                           // 307: google.protobuf.NullValue
		(*protocol.Error)(nil),                                                            // 308: protocol.Error
		(*protocol.TextEdit)(nil),                                                         // 309: protocol.TextEdit
		(*protocol.WorkspaceEdit)(nil),                                                    // 310: protocol.WorkspaceEdit
		(*protocol.Range)(nil),                                                            // 311: protocol.Range
		(*protocol.WorkDoneProgressOptions)(nil),                                          // 312: protocol.WorkDoneProgressOptions
		(*protocol.TextDocumentItem)(nil),                                                 // 313: protocol.TextDocumentItem
		(*protocol.TextDocumentRegistrationOptions)(nil),                                  // 314: protocol.TextDocumentRegistrationOptions
		(*protocol.VersionedTextDocumentIdentifier)(nil),                                  // 315: protocol.VersionedTextDocumentIdentifier
		(*protocol.TextDocumentIdentifier)(nil),                                           // 316: protocol.TextDocumentIdentifier
		(*protocol.Diagnostic)(nil),                                                       // 317: protocol.Diagnostic
		(*protocol.TextDocumentPositionParams)(nil),                                       // 318: protocol.TextDocumentPositionParams
		(*protocol.MarkupContent)(nil),                                                    // 319: protocol.MarkupContent
		(*protocol.Command)(nil),                                                          // 320: protocol.Command
		(protocol.MarkupKind)(0),                                                          // 321: protocol.MarkupKind
		(*wrapperspb.Int32Value)(nil),                                                     // 322: google.protobuf.Int32Value
		(*protocol.StaticRegistrationOptions)(nil),                                        // 323: protocol.StaticRegistrationOptions
		(*protocol.Location)(nil),                                                         // 324: protocol.Location
		(*protocol.Position)(nil),                                                         // 325: protocol.Position
		(*protocol.WorkspaceEditClientCapabilities)(nil),                                  // 326: protocol.WorkspaceEditClientCapabilities
		(protocol.DiagnosticTag)(0),                                                       // 327: protocol.DiagnosticTag
		(*emptypb.Empty)(nil),                                                             // 328: google.protobuf.Empty
	}
)

var file_protocol_rpc_rpc_proto_depIdxs = []int32{
	19,  // 0: protocol.rpc.ProgressRequest.token:type_name -> protocol.rpc.ProgressToken
	303, // 1: protocol.rpc.ProgressRequest.value:type_name -> google.protobuf.Any
	19,  // 2: protocol.rpc.WorkDoneProgressParams.work_done_token:type_name -> protocol.rpc.ProgressToken
	21,  // 3: protocol.rpc.InitializeRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	244, // 4: protocol.rpc.InitializeRequest.client_info:type_name -> protocol.rpc.InitializeRequest.ClientInfo
	304, // 5: protocol.rpc.InitializeRequest.root_path:type_name -> google.protobuf.StringValue
	305, // 6: protocol.rpc.InitializeRequest.root_uri:type_name -> protocol.DocumentURI
	303, // 7: protocol.rpc.InitializeRequest.initialization_options:type_name -> google.protobuf.Any
	69,  // 8: protocol.rpc.InitializeRequest.capabilities:type_name -> protocol.rpc.ClientCapabilities
	306, // 9: protocol.rpc.InitializeRequest.trace:type_name -> protocol.TraceValue
	86,  // 10: protocol.rpc.InitializeRequest.workspace_folders:type_name -> protocol.rpc.WorkspaceFolder
	304, // 11: protocol.rpc.LogTraceRequest.verbose:type_name -> google.protobuf.StringValue
	306, // 12: protocol.rpc.SetTraceRequest.value:type_name -> protocol.TraceValue
	75,  // 13: protocol.rpc.ShowMessageResponse.message_action_item:type_name -> protocol.rpc.MessageActionItem
	307, // 14: protocol.rpc.ShowMessageResponse.empty:type_name -> google.protobuf.NullValue
	308, // 15: protocol.rpc.ShowMessageResponse.error:type_name -> protocol.Error
	245, // 16: protocol.rpc.WorkspaceFoldersResponse.workspace_folders:type_name -> protocol.rpc.WorkspaceFoldersResponse.WorkspaceFolders
	307, // 17: protocol.rpc.WorkspaceFoldersResponse.empty:type_name -> google.protobuf.NullValue
	308, // 18: protocol.rpc.WorkspaceFoldersResponse.error:type_name -> protocol.Error
	246, // 19: protocol.rpc.ConfigurationResponse.anys:type_name -> protocol.rpc.ConfigurationResponse.Anys
	308, // 20: protocol.rpc.ConfigurationResponse.error:type_name -> protocol.Error
	247, // 21: protocol.rpc.WorkspaceSymbolsResponse.symbol_informations:type_name -> protocol.rpc.WorkspaceSymbolsResponse.SymbolInformations
	308, // 22: protocol.rpc.WorkspaceSymbolsResponse.error:type_name -> protocol.Error
	303, // 23: protocol.rpc.ExecuteCommandResponse.any:type_name -> google.protobuf.Any
	308, // 24: protocol.rpc.ExecuteCommandResponse.error:type_name -> protocol.Error
	309, // 25: protocol.rpc.TextEdits.text_edit:type_name -> protocol.TextEdit
	32,  // 26: protocol.rpc.WillSaveTextDocumentResponse.text_edits:type_name -> protocol.rpc.TextEdits
	308, // 27: protocol.rpc.WillSaveTextDocumentResponse.error:type_name -> protocol.Error
	34,  // 28: protocol.rpc.CompletionItems.completion_items:type_name -> protocol.rpc.CompletionItems
	34,  // 29: protocol.rpc.CompletionResponse.completion_items:type_name -> protocol.rpc.CompletionItems
	124, // 30: protocol.rpc.CompletionResponse.completion_list:type_name -> protocol.rpc.CompletionList
	307, // 31: protocol.rpc.CompletionResponse.empty:type_name -> google.protobuf.NullValue
	308, // 32: protocol.rpc.CompletionResponse.error:type_name -> protocol.Error
	130, // 33: protocol.rpc.HoverResponse.hover:type_name -> protocol.rpc.Hover
	307, // 34: protocol.rpc.HoverResponse.empty:type_name -> google.protobuf.NullValue
	308, // 35: protocol.rpc.HoverResponse.error:type_name -> protocol.Error
	34,  // 36: protocol.rpc.CompletionItemResolveRequest.completion_items:type_name -> protocol.rpc.CompletionItems
	34,  // 37: protocol.rpc.CompletionItemResolveResponse.completion_items:type_name -> protocol.rpc.CompletionItems
	308, // 38: protocol.rpc.CompletionItemResolveResponse.error:type_name -> protocol.Error
	137, // 39: protocol.rpc.SignatureHelpResponse.signature_help:type_name -> protocol.rpc.SignatureHelp
	307, // 40: protocol.rpc.SignatureHelpResponse.empty:type_name -> google.protobuf.NullValue
	308, // 41: protocol.rpc.SignatureHelpResponse.error:type_name -> protocol.Error
	40,  // 42: protocol.rpc.Locations.locations:type_name -> protocol.rpc.Locations
	41,  // 43: protocol.rpc.LocationLinks.location_links:type_name -> protocol.rpc.LocationLinks
	248, // 44: protocol.rpc.DeclarationResponse.result:type_name -> protocol.rpc.DeclarationResponse.Result
	249, // 45: protocol.rpc.DeclarationResponse.partial_result:type_name -> protocol.rpc.DeclarationResponse.PartialResult
	308, // 46: protocol.rpc.DeclarationResponse.error:type_name -> protocol.Error
	250, // 47: protocol.rpc.DefinitionResponse.result:type_name -> protocol.rpc.DefinitionResponse.Result
	251, // 48: protocol.rpc.DefinitionResponse.partial_result:type_name -> protocol.rpc.DefinitionResponse.PartialResult
	308, // 49: protocol.rpc.DefinitionResponse.error:type_name -> protocol.Error
	252, // 50: protocol.rpc.TypeDefinitionResponse.result:type_name -> protocol.rpc.TypeDefinitionResponse.Result
	253, // 51: protocol.rpc.TypeDefinitionResponse.partial_result:type_name -> protocol.rpc.TypeDefinitionResponse.PartialResult
	308, // 52: protocol.rpc.TypeDefinitionResponse.error:type_name -> protocol.Error
	254, // 53: protocol.rpc.ImplementationResponse.result:type_name -> protocol.rpc.ImplementationResponse.Result
	255, // 54: protocol.rpc.ImplementationResponse.partial_result:type_name -> protocol.rpc.ImplementationResponse.PartialResult
	308, // 55: protocol.rpc.ImplementationResponse.error:type_name -> protocol.Error
	256, // 56: protocol.rpc.ReferenceResponse.result:type_name -> protocol.rpc.ReferenceResponse.Result
	257, // 57: protocol.rpc.ReferenceResponse.partial_result:type_name -> protocol.rpc.ReferenceResponse.PartialResult
	308, // 58: protocol.rpc.ReferenceResponse.error:type_name -> protocol.Error
	258, // 59: protocol.rpc.DocumentHighlightsResponse.result:type_name -> protocol.rpc.DocumentHighlightsResponse.Result
	259, // 60: protocol.rpc.DocumentHighlightsResponse.partial_result:type_name -> protocol.rpc.DocumentHighlightsResponse.PartialResult
	308, // 61: protocol.rpc.DocumentHighlightsResponse.error:type_name -> protocol.Error
	260, // 62: protocol.rpc.DocumentSymbolResponse.result:type_name -> protocol.rpc.DocumentSymbolResponse.Result
	261, // 63: protocol.rpc.DocumentSymbolResponse.partial_result:type_name -> protocol.rpc.DocumentSymbolResponse.PartialResult
	308, // 64: protocol.rpc.DocumentSymbolResponse.error:type_name -> protocol.Error
	262, // 65: protocol.rpc.CodeActionResponse.result:type_name -> protocol.rpc.CodeActionResponse.Result
	263, // 66: protocol.rpc.CodeActionResponse.partial_result:type_name -> protocol.rpc.CodeActionResponse.PartialResult
	308, // 67: protocol.rpc.CodeActionResponse.error:type_name -> protocol.Error
	264, // 68: protocol.rpc.CodeLensResponse.result:type_name -> protocol.rpc.CodeLensResponse.Result
	265, // 69: protocol.rpc.CodeLensResponse.partial_result:type_name -> protocol.rpc.CodeLensResponse.PartialResult
	308, // 70: protocol.rpc.CodeLensResponse.error:type_name -> protocol.Error
	182, // 71: protocol.rpc.CodeLensResolveRequest.code_lens:type_name -> protocol.rpc.CodeLens
	182, // 72: protocol.rpc.CodeLensResolveResponse.code_lens:type_name -> protocol.rpc.CodeLens
	308, // 73: protocol.rpc.CodeLensResolveResponse.error:type_name -> protocol.Error
	266, // 74: protocol.rpc.DocumentLinkResponse.result:type_name -> protocol.rpc.DocumentLinkResponse.Result
	267, // 75: protocol.rpc.DocumentLinkResponse.partial_result:type_name -> protocol.rpc.DocumentLinkResponse.PartialResult
	308, // 76: protocol.rpc.DocumentLinkResponse.error:type_name -> protocol.Error
	187, // 77: protocol.rpc.DocumentLinkResolveRequest.document_link:type_name -> protocol.rpc.DocumentLink
	187, // 78: protocol.rpc.DocumentLinkResolveResponse.document_link:type_name -> protocol.rpc.DocumentLink
	308, // 79: protocol.rpc.DocumentLinkResolveResponse.error:type_name -> protocol.Error
	268, // 80: protocol.rpc.DocumentColorResponse.result:type_name -> protocol.rpc.DocumentColorResponse.Result
	269, // 81: protocol.rpc.DocumentColorResponse.partial_result:type_name -> protocol.rpc.DocumentColorResponse.PartialResult
	308, // 82: protocol.rpc.DocumentColorResponse.error:type_name -> protocol.Error
	270, // 83: protocol.rpc.ColorPresentationResponse.result:type_name -> protocol.rpc.ColorPresentationResponse.Result
	271, // 84: protocol.rpc.ColorPresentationResponse.partial_result:type_name -> protocol.rpc.ColorPresentationResponse.PartialResult
	308, // 85: protocol.rpc.ColorPresentationResponse.error:type_name -> protocol.Error
	309, // 86: protocol.rpc.DocumentFormattingResponse.text_edit:type_name -> protocol.TextEdit
	307, // 87: protocol.rpc.DocumentFormattingResponse.empty:type_name -> google.protobuf.NullValue
	308, // 88: protocol.rpc.DocumentFormattingResponse.error:type_name -> protocol.Error
	309, // 89: protocol.rpc.DocumentRangeFormattingResponse.text_edit:type_name -> protocol.TextEdit
	307, // 90: protocol.rpc.DocumentRangeFormattingResponse.empty:type_name -> google.protobuf.NullValue
	308, // 91: protocol.rpc.DocumentRangeFormattingResponse.error:type_name -> protocol.Error
	309, // 92: protocol.rpc.DocumentOnTypeFormattingResponse.text_edit:type_name -> protocol.TextEdit
	307, // 93: protocol.rpc.DocumentOnTypeFormattingResponse.empty:type_name -> google.protobuf.NullValue
	308, // 94: protocol.rpc.DocumentOnTypeFormattingResponse.error:type_name -> protocol.Error
	310, // 95: protocol.rpc.RenameResponse.workspace_edit:type_name -> protocol.WorkspaceEdit
	307, // 96: protocol.rpc.RenameResponse.empty:type_name -> google.protobuf.NullValue
	308, // 97: protocol.rpc.RenameResponse.error:type_name -> protocol.Error
	311, // 98: protocol.rpc.PrepareRenameResponse.range:type_name -> protocol.Range
	272, // 99: protocol.rpc.PrepareRenameResponse.result:type_name -> protocol.rpc.PrepareRenameResponse.Result
	307, // 100: protocol.rpc.PrepareRenameResponse.empty:type_name -> google.protobuf.NullValue
	308, // 101: protocol.rpc.PrepareRenameResponse.error:type_name -> protocol.Error
	273, // 102: protocol.rpc.FoldingRangeResponse.result:type_name -> protocol.rpc.FoldingRangeResponse.Result
	274, // 103: protocol.rpc.FoldingRangeResponse.partial_result:type_name -> protocol.rpc.FoldingRangeResponse.PartialResult
	308, // 104: protocol.rpc.FoldingRangeResponse.error:type_name -> protocol.Error
	275, // 105: protocol.rpc.SelectionRangeResponse.result:type_name -> protocol.rpc.SelectionRangeResponse.Result
	276, // 106: protocol.rpc.SelectionRangeResponse.partial_result:type_name -> protocol.rpc.SelectionRangeResponse.PartialResult
	308, // 107: protocol.rpc.SelectionRangeResponse.error:type_name -> protocol.Error
	277, // 108: protocol.rpc.CallHierarchyPrepareResponse.result:type_name -> protocol.rpc.CallHierarchyPrepareResponse.Result
	308, // 109: protocol.rpc.CallHierarchyPrepareResponse.error:type_name -> protocol.Error
	278, // 110: protocol.rpc.CallHierarchyIncomingCallsResponse.result:type_name -> protocol.rpc.CallHierarchyIncomingCallsResponse.Result
	279, // 111: protocol.rpc.CallHierarchyIncomingCallsResponse.partial_result:type_name -> protocol.rpc.CallHierarchyIncomingCallsResponse.PartialResult
	308, // 112: protocol.rpc.CallHierarchyIncomingCallsResponse.error:type_name -> protocol.Error
	280, // 113: protocol.rpc.CallHierarchyOutgoingCallsResponse.result:type_name -> protocol.rpc.CallHierarchyOutgoingCallsResponse.Result
	281, // 114: protocol.rpc.CallHierarchyOutgoingCallsResponse.partial_result:type_name -> protocol.rpc.CallHierarchyOutgoingCallsResponse.PartialResult
	308, // 115: protocol.rpc.CallHierarchyOutgoingCallsResponse.error:type_name -> protocol.Error
	116, // 116: protocol.rpc.TextDocumentClientCapabilities.synchronization:type_name -> protocol.rpc.TextDocumentSyncClientCapabilities
	119, // 117: protocol.rpc.TextDocumentClientCapabilities.completion:type_name -> protocol.rpc.CompletionClientCapabilities
	126, // 118: protocol.rpc.TextDocumentClientCapabilities.hover:type_name -> protocol.rpc.HoverClientCapabilities
	132, // 119: protocol.rpc.TextDocumentClientCapabilities.signature_help:type_name -> protocol.rpc.SignatureHelpClientCapabilities
	140, // 120: protocol.rpc.TextDocumentClientCapabilities.declaration:type_name -> protocol.rpc.DeclarationClientCapabilities
	144, // 121: protocol.rpc.TextDocumentClientCapabilities.definition:type_name -> protocol.rpc.DefinitionClientCapabilities
	148, // 122: protocol.rpc.TextDocumentClientCapabilities.type_definition:type_name -> protocol.rpc.TypeDefinitionClientCapabilities
	152, // 123: protocol.rpc.TextDocumentClientCapabilities.implementation:type_name -> protocol.rpc.ImplementationClientCapabilities
	156, // 124: protocol.rpc.TextDocumentClientCapabilities.references:type_name -> protocol.rpc.ReferenceClientCapabilities
	161, // 125: protocol.rpc.TextDocumentClientCapabilities.document_highlight:type_name -> protocol.rpc.DocumentHighlightClientCapabilities
	166, // 126: protocol.rpc.TextDocumentClientCapabilities.document_symbol:type_name -> protocol.rpc.DocumentSymbolClientCapabilities
	172, // 127: protocol.rpc.TextDocumentClientCapabilities.code_action:type_name -> protocol.rpc.CodeActionClientCapabilities
	178, // 128: protocol.rpc.TextDocumentClientCapabilities.code_lens:type_name -> protocol.rpc.CodeLensClientCapabilities
	183, // 129: protocol.rpc.TextDocumentClientCapabilities.document_link:type_name -> protocol.rpc.DocumentLinkClientCapabilities
	188, // 130: protocol.rpc.TextDocumentClientCapabilities.color_provider:type_name -> protocol.rpc.DocumentColorClientCapabilities
	196, // 131: protocol.rpc.TextDocumentClientCapabilities.formatting:type_name -> protocol.rpc.DocumentFormattingClientCapabilities
	201, // 132: protocol.rpc.TextDocumentClientCapabilities.range_formatting:type_name -> protocol.rpc.DocumentRangeFormattingClientCapabilities
	205, // 133: protocol.rpc.TextDocumentClientCapabilities.on_type_formatting:type_name -> protocol.rpc.DocumentOnTypeFormattingClientCapabilities
	209, // 134: protocol.rpc.TextDocumentClientCapabilities.rename:type_name -> protocol.rpc.RenameClientCapabilities
	117, // 135: protocol.rpc.TextDocumentClientCapabilities.publish_diagnostics:type_name -> protocol.rpc.PublishDiagnosticsClientCapabilities
	214, // 136: protocol.rpc.TextDocumentClientCapabilities.folding_range:type_name -> protocol.rpc.FoldingRangeClientCapabilities
	219, // 137: protocol.rpc.TextDocumentClientCapabilities.selection_range:type_name -> protocol.rpc.SelectionRangeClientCapabilities
	282, // 138: protocol.rpc.ClientCapabilities.workspace:type_name -> protocol.rpc.ClientCapabilities.Workspace
	68,  // 139: protocol.rpc.ClientCapabilities.text_document:type_name -> protocol.rpc.TextDocumentClientCapabilities
	283, // 140: protocol.rpc.ClientCapabilities.window:type_name -> protocol.rpc.ClientCapabilities.Window
	303, // 141: protocol.rpc.ClientCapabilities.experimental:type_name -> google.protobuf.Any
	73,  // 142: protocol.rpc.InitializeResponse.capabilities:type_name -> protocol.rpc.ServerCapabilities
	284, // 143: protocol.rpc.InitializeResponse.server_info:type_name -> protocol.rpc.InitializeResponse.ServerInfo
	106, // 144: protocol.rpc.ServerCapabilities.text_document_sync_options:type_name -> protocol.rpc.TextDocumentSyncOptions
	1,   // 145: protocol.rpc.ServerCapabilities.text_document_sync_kind:type_name -> protocol.rpc.TextDocumentSyncKind
	120, // 146: protocol.rpc.ServerCapabilities.completion_provider:type_name -> protocol.rpc.CompletionOptions
	127, // 147: protocol.rpc.ServerCapabilities.hover_options:type_name -> protocol.rpc.HoverOptions
	133, // 148: protocol.rpc.ServerCapabilities.signature_help_provider:type_name -> protocol.rpc.SignatureHelpOptions
	141, // 149: protocol.rpc.ServerCapabilities.declaration_options:type_name -> protocol.rpc.DeclarationOptions
	142, // 150: protocol.rpc.ServerCapabilities.declaration_registration_options:type_name -> protocol.rpc.DeclarationRegistrationOptions
	145, // 151: protocol.rpc.ServerCapabilities.definition_options:type_name -> protocol.rpc.DefinitionOptions
	149, // 152: protocol.rpc.ServerCapabilities.type_definition_options:type_name -> protocol.rpc.TypeDefinitionOptions
	150, // 153: protocol.rpc.ServerCapabilities.type_definition_registration_options:type_name -> protocol.rpc.TypeDefinitionRegistrationOptions
	153, // 154: protocol.rpc.ServerCapabilities.implementation_options:type_name -> protocol.rpc.ImplementationOptions
	154, // 155: protocol.rpc.ServerCapabilities.implementation_registration_options:type_name -> protocol.rpc.ImplementationRegistrationOptions
	157, // 156: protocol.rpc.ServerCapabilities.reference_options:type_name -> protocol.rpc.ReferenceOptions
	162, // 157: protocol.rpc.ServerCapabilities.document_highlight_options:type_name -> protocol.rpc.DocumentHighlightOptions
	167, // 158: protocol.rpc.ServerCapabilities.document_symbol_options:type_name -> protocol.rpc.DocumentSymbolOptions
	173, // 159: protocol.rpc.ServerCapabilities.code_action_options:type_name -> protocol.rpc.CodeActionOptions
	179, // 160: protocol.rpc.ServerCapabilities.codelens_provider:type_name -> protocol.rpc.CodeLensOptions
	184, // 161: protocol.rpc.ServerCapabilities.document_link_provider:type_name -> protocol.rpc.DocumentLinkOptions
	189, // 162: protocol.rpc.ServerCapabilities.document_color_options:type_name -> protocol.rpc.DocumentColorOptions
	190, // 163: protocol.rpc.ServerCapabilities.document_color_registration_options:type_name -> protocol.rpc.DocumentColorRegistrationOptions
	197, // 164: protocol.rpc.ServerCapabilities.document_formatting_options:type_name -> protocol.rpc.DocumentFormattingOptions
	202, // 165: protocol.rpc.ServerCapabilities.document_range_formatting_options:type_name -> protocol.rpc.DocumentRangeFormattingOptions
	206, // 166: protocol.rpc.ServerCapabilities.document_on_type_formatting_provider:type_name -> protocol.rpc.DocumentOnTypeFormattingOptions
	210, // 167: protocol.rpc.ServerCapabilities.rename_options:type_name -> protocol.rpc.RenameOptions
	215, // 168: protocol.rpc.ServerCapabilities.folding_range_options:type_name -> protocol.rpc.FoldingRangeOptions
	216, // 169: protocol.rpc.ServerCapabilities.folding_range_registration_options:type_name -> protocol.rpc.FoldingRangeRegistrationOptions
	101, // 170: protocol.rpc.ServerCapabilities.execute_command_provider:type_name -> protocol.rpc.ExecuteCommandOptions
	220, // 171: protocol.rpc.ServerCapabilities.selection_range_options:type_name -> protocol.rpc.SelectionRangeOptions
	221, // 172: protocol.rpc.ServerCapabilities.selection_range_registration_options:type_name -> protocol.rpc.SelectionRangeRegistrationOptions
	285, // 173: protocol.rpc.ServerCapabilities.workspace:type_name -> protocol.rpc.ServerCapabilities.Workspace
	303, // 174: protocol.rpc.ServerCapabilities.experimental:type_name -> google.protobuf.Any
	0,   // 175: protocol.rpc.ShowMessageRequestParams.type:type_name -> protocol.rpc.MessageType
	0,   // 176: protocol.rpc.ShowMessageRequestRequest.type:type_name -> protocol.rpc.MessageType
	75,  // 177: protocol.rpc.ShowMessageRequestRequest.actions:type_name -> protocol.rpc.MessageActionItem
	0,   // 178: protocol.rpc.LogMessageRequest.type:type_name -> protocol.rpc.MessageType
	19,  // 179: protocol.rpc.WorkDoneProgressCreateRequest.token:type_name -> protocol.rpc.ProgressToken
	19,  // 180: protocol.rpc.WorkDoneProgressCancelRequest.token:type_name -> protocol.rpc.ProgressToken
	303, // 181: protocol.rpc.TelemetryParams.params:type_name -> google.protobuf.Any
	303, // 182: protocol.rpc.Registration.register_options:type_name -> google.protobuf.Any
	81,  // 183: protocol.rpc.RegistrationParams.registrations:type_name -> protocol.rpc.Registration
	83,  // 184: protocol.rpc.UnregistrationParams.unregisterations:type_name -> protocol.rpc.Unregistration
	305, // 185: protocol.rpc.WorkspaceFolder.uri:type_name -> protocol.DocumentURI
	86,  // 186: protocol.rpc.WorkspaceFoldersChangeEvent.added:type_name -> protocol.rpc.WorkspaceFolder
	86,  // 187: protocol.rpc.WorkspaceFoldersChangeEvent.removed:type_name -> protocol.rpc.WorkspaceFolder
	87,  // 188: protocol.rpc.DidChangeWorkspaceFoldersRequest.event:type_name -> protocol.rpc.WorkspaceFoldersChangeEvent
	303, // 189: protocol.rpc.DidChangeConfigurationRequest.settings:type_name -> google.protobuf.Any
	305, // 190: protocol.rpc.ConfigurationItem.scope_uri:type_name -> protocol.DocumentURI
	304, // 191: protocol.rpc.ConfigurationItem.section:type_name -> google.protobuf.StringValue
	91,  // 192: protocol.rpc.ConfigurationRequest.items:type_name -> protocol.rpc.ConfigurationItem
	14,  // 193: protocol.rpc.FileSystemWatcher.kind:type_name -> protocol.rpc.FileSystemWatcher.WatchKind
	94,  // 194: protocol.rpc.DidChangeWatchedFilesRegistrationOptions.watchers:type_name -> protocol.rpc.FileSystemWatcher
	305, // 195: protocol.rpc.FileEvent.uri:type_name -> protocol.DocumentURI
	15,  // 196: protocol.rpc.FileEvent.type:type_name -> protocol.rpc.FileEvent.FileChangeType
	96,  // 197: protocol.rpc.DidChangeWatchedFilesRequest.changes:type_name -> protocol.rpc.FileEvent
	286, // 198: protocol.rpc.WorkspaceSymbolClientCapabilities.symbol_kind:type_name -> protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind
	21,  // 199: protocol.rpc.WorkspaceSymbolParams.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 200: protocol.rpc.WorkspaceSymbolParams.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	312, // 201: protocol.rpc.ExecuteCommandOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	101, // 202: protocol.rpc.ExecuteCommandRegistrationOptions.execute_command_options:type_name -> protocol.rpc.ExecuteCommandOptions
	21,  // 203: protocol.rpc.ExecuteCommandParams.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	303, // 204: protocol.rpc.ExecuteCommandParams.arguments:type_name -> google.protobuf.Any
	304, // 205: protocol.rpc.ApplyWorkspaceEditRequest.label:type_name -> google.protobuf.StringValue
	310, // 206: protocol.rpc.ApplyWorkspaceEditRequest.edit:type_name -> protocol.WorkspaceEdit
	304, // 207: protocol.rpc.ApplyWorkspaceEditResponse.failure_reason:type_name -> google.protobuf.StringValue
	1,   // 208: protocol.rpc.TextDocumentSyncOptions.change:type_name -> protocol.rpc.TextDocumentSyncKind
	112, // 209: protocol.rpc.TextDocumentSyncOptions.save_options:type_name -> protocol.rpc.SaveOptions
	313, // 210: protocol.rpc.DidOpenTextDocumentRequest.text_document:type_name -> protocol.TextDocumentItem
	314, // 211: protocol.rpc.TextDocumentChangeRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	1,   // 212: protocol.rpc.TextDocumentChangeRegistrationOptions.sync_kind:type_name -> protocol.rpc.TextDocumentSyncKind
	315, // 213: protocol.rpc.DidChangeTextDocumentRequest.text_document:type_name -> protocol.VersionedTextDocumentIdentifier
	110, // 214: protocol.rpc.DidChangeTextDocumentRequest.content_changes:type_name -> protocol.rpc.TextDocumentContentChangeEvent
	287, // 215: protocol.rpc.TextDocumentContentChangeEvent.content_change_event:type_name -> protocol.rpc.TextDocumentContentChangeEvent.ContentChangeEvent
	316, // 216: protocol.rpc.WillSaveTextDocumentRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	2,   // 217: protocol.rpc.WillSaveTextDocumentRequest.reason:type_name -> protocol.rpc.TextDocumentSaveReason
	314, // 218: protocol.rpc.TextDocumentSaveRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	316, // 219: protocol.rpc.DidSaveTextDocumentRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	304, // 220: protocol.rpc.DidSaveTextDocumentRequest.text:type_name -> google.protobuf.StringValue
	316, // 221: protocol.rpc.DidCloseTextDocumentRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	288, // 222: protocol.rpc.PublishDiagnosticsClientCapabilities.tag_support:type_name -> protocol.rpc.PublishDiagnosticsClientCapabilities.TagSupport
	305, // 223: protocol.rpc.PublishDiagnosticsRequest.uri:type_name -> protocol.DocumentURI
	317, // 224: protocol.rpc.PublishDiagnosticsRequest.diagnostics:type_name -> protocol.Diagnostic
	289, // 225: protocol.rpc.CompletionClientCapabilities.completion_item:type_name -> protocol.rpc.CompletionClientCapabilities.CompletionItem
	290, // 226: protocol.rpc.CompletionClientCapabilities.completion_item_kind:type_name -> protocol.rpc.CompletionClientCapabilities.CompletionItemKind
	312, // 227: protocol.rpc.CompletionOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 228: protocol.rpc.CompletionRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	120, // 229: protocol.rpc.CompletionRegistrationOptions.completion_options:type_name -> protocol.rpc.CompletionOptions
	318, // 230: protocol.rpc.CompletionRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 231: protocol.rpc.CompletionRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 232: protocol.rpc.CompletionRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	123, // 233: protocol.rpc.CompletionRequest.context:type_name -> protocol.rpc.CompletionContext
	3,   // 234: protocol.rpc.CompletionContext.trigger_kind:type_name -> protocol.rpc.CompletionTriggerKind
	304, // 235: protocol.rpc.CompletionContext.trigger_character:type_name -> google.protobuf.StringValue
	125, // 236: protocol.rpc.CompletionList.items:type_name -> protocol.rpc.CompletionItem
	6,   // 237: protocol.rpc.CompletionItem.kind:type_name -> protocol.rpc.CompletionItemKind
	5,   // 238: protocol.rpc.CompletionItem.tags:type_name -> protocol.rpc.CompletionItemTag
	304, // 239: protocol.rpc.CompletionItem.detail:type_name -> google.protobuf.StringValue
	319, // 240: protocol.rpc.CompletionItem.markup_content:type_name -> protocol.MarkupContent
	304, // 241: protocol.rpc.CompletionItem.sort_text:type_name -> google.protobuf.StringValue
	304, // 242: protocol.rpc.CompletionItem.filter_text:type_name -> google.protobuf.StringValue
	304, // 243: protocol.rpc.CompletionItem.insert_text:type_name -> google.protobuf.StringValue
	4,   // 244: protocol.rpc.CompletionItem.insert_text_format:type_name -> protocol.rpc.InsertTextFormat
	309, // 245: protocol.rpc.CompletionItem.text_edit:type_name -> protocol.TextEdit
	309, // 246: protocol.rpc.CompletionItem.additional_text_edits:type_name -> protocol.TextEdit
	320, // 247: protocol.rpc.CompletionItem.command:type_name -> protocol.Command
	303, // 248: protocol.rpc.CompletionItem.data:type_name -> google.protobuf.Any
	321, // 249: protocol.rpc.HoverClientCapabilities.content_format:type_name -> protocol.MarkupKind
	312, // 250: protocol.rpc.HoverOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 251: protocol.rpc.HoverRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	127, // 252: protocol.rpc.HoverRegistrationOptions.hover_options:type_name -> protocol.rpc.HoverOptions
	318, // 253: protocol.rpc.HoverRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 254: protocol.rpc.HoverRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	131, // 255: protocol.rpc.Hover.marked_string:type_name -> protocol.rpc.MarkedString
	292, // 256: protocol.rpc.Hover.marked_strings:type_name -> protocol.rpc.Hover.MarkedStrings
	319, // 257: protocol.rpc.Hover.markup_content:type_name -> protocol.MarkupContent
	311, // 258: protocol.rpc.Hover.range:type_name -> protocol.Range
	293, // 259: protocol.rpc.MarkedString.code_block:type_name -> protocol.rpc.MarkedString.CodeBlock
	294, // 260: protocol.rpc.SignatureHelpClientCapabilities.signature_information:type_name -> protocol.rpc.SignatureHelpClientCapabilities.SignatureInformation
	312, // 261: protocol.rpc.SignatureHelpOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 262: protocol.rpc.SignatureHelpRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	133, // 263: protocol.rpc.SignatureHelpRegistrationOptions.signature_help_options:type_name -> protocol.rpc.SignatureHelpOptions
	318, // 264: protocol.rpc.SignatureHelpRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 265: protocol.rpc.SignatureHelpRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	136, // 266: protocol.rpc.SignatureHelpRequest.context:type_name -> protocol.rpc.SignatureHelpContext
	16,  // 267: protocol.rpc.SignatureHelpContext.trigger_kind:type_name -> protocol.rpc.SignatureHelpContext.SignatureHelpTriggerKind
	137, // 268: protocol.rpc.SignatureHelpContext.active_signature_help:type_name -> protocol.rpc.SignatureHelp
	138, // 269: protocol.rpc.SignatureHelp.signatures:type_name -> protocol.rpc.SignatureInformation
	322, // 270: protocol.rpc.SignatureHelp.active_signature:type_name -> google.protobuf.Int32Value
	322, // 271: protocol.rpc.SignatureHelp.active_parameter:type_name -> google.protobuf.Int32Value
	319, // 272: protocol.rpc.SignatureInformation.markup_content:type_name -> protocol.MarkupContent
	139, // 273: protocol.rpc.SignatureInformation.parameters:type_name -> protocol.rpc.ParameterInformation
	322, // 274: protocol.rpc.SignatureInformation.active_parameter:type_name -> google.protobuf.Int32Value
	296, // 275: protocol.rpc.ParameterInformation.offset:type_name -> protocol.rpc.ParameterInformation.Offset
	319, // 276: protocol.rpc.ParameterInformation.markup_content:type_name -> protocol.MarkupContent
	312, // 277: protocol.rpc.DeclarationOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	141, // 278: protocol.rpc.DeclarationRegistrationOptions.declaration_options:type_name -> protocol.rpc.DeclarationOptions
	314, // 279: protocol.rpc.DeclarationRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	323, // 280: protocol.rpc.DeclarationRegistrationOptions.static_registration_options:type_name -> protocol.StaticRegistrationOptions
	318, // 281: protocol.rpc.DeclarationRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 282: protocol.rpc.DeclarationRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 283: protocol.rpc.DeclarationRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	312, // 284: protocol.rpc.DefinitionOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 285: protocol.rpc.DefinitionRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	145, // 286: protocol.rpc.DefinitionRegistrationOptions.definition_options:type_name -> protocol.rpc.DefinitionOptions
	318, // 287: protocol.rpc.DefinitionRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 288: protocol.rpc.DefinitionRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 289: protocol.rpc.DefinitionRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	312, // 290: protocol.rpc.TypeDefinitionOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 291: protocol.rpc.TypeDefinitionRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	149, // 292: protocol.rpc.TypeDefinitionRegistrationOptions.type_definition_options:type_name -> protocol.rpc.TypeDefinitionOptions
	323, // 293: protocol.rpc.TypeDefinitionRegistrationOptions.static_registration_options:type_name -> protocol.StaticRegistrationOptions
	318, // 294: protocol.rpc.TypeDefinitionRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 295: protocol.rpc.TypeDefinitionRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 296: protocol.rpc.TypeDefinitionRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	312, // 297: protocol.rpc.ImplementationOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 298: protocol.rpc.ImplementationRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	153, // 299: protocol.rpc.ImplementationRegistrationOptions.implementation_options:type_name -> protocol.rpc.ImplementationOptions
	323, // 300: protocol.rpc.ImplementationRegistrationOptions.static_registration_options:type_name -> protocol.StaticRegistrationOptions
	318, // 301: protocol.rpc.ImplementationRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 302: protocol.rpc.ImplementationRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 303: protocol.rpc.ImplementationRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	312, // 304: protocol.rpc.ReferenceOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 305: protocol.rpc.ReferenceRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	157, // 306: protocol.rpc.ReferenceRegistrationOptions.reference_options:type_name -> protocol.rpc.ReferenceOptions
	318, // 307: protocol.rpc.ReferenceRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 308: protocol.rpc.ReferenceRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 309: protocol.rpc.ReferenceRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	160, // 310: protocol.rpc.ReferenceRequest.context:type_name -> protocol.rpc.ReferenceContext
	312, // 311: protocol.rpc.DocumentHighlightOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 312: protocol.rpc.DocumentHighlightRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	162, // 313: protocol.rpc.DocumentHighlightRegistrationOptions.document_highlight_options:type_name -> protocol.rpc.DocumentHighlightOptions
	318, // 314: protocol.rpc.DocumentHighlightRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 315: protocol.rpc.DocumentHighlightRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 316: protocol.rpc.DocumentHighlightRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	311, // 317: protocol.rpc.DocumentHighlight.range:type_name -> protocol.Range
	17,  // 318: protocol.rpc.DocumentHighlight.kind:type_name -> protocol.rpc.DocumentHighlight.DocumentHighlightKind
	297, // 319: protocol.rpc.DocumentSymbolClientCapabilities.symbol_kind:type_name -> protocol.rpc.DocumentSymbolClientCapabilities.SymbolKind
	312, // 320: protocol.rpc.DocumentSymbolOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 321: protocol.rpc.DocumentSymbolRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	167, // 322: protocol.rpc.DocumentSymbolRegistrationOptions.document_symbol_options:type_name -> protocol.rpc.DocumentSymbolOptions
	21,  // 323: protocol.rpc.DocumentSymbolRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 324: protocol.rpc.DocumentSymbolRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	316, // 325: protocol.rpc.DocumentSymbolRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	7,   // 326: protocol.rpc.DocumentSymbol.kind:type_name -> protocol.rpc.SymbolKind
	311, // 327: protocol.rpc.DocumentSymbol.range:type_name -> protocol.Range
	311, // 328: protocol.rpc.DocumentSymbol.selection_range:type_name -> protocol.Range
	170, // 329: protocol.rpc.DocumentSymbol.children:type_name -> protocol.rpc.DocumentSymbol
	7,   // 330: protocol.rpc.SymbolInformation.kind:type_name -> protocol.rpc.SymbolKind
	324, // 331: protocol.rpc.SymbolInformation.location:type_name -> protocol.Location
	298, // 332: protocol.rpc.CodeActionClientCapabilities.code_action_literal_support:type_name -> protocol.rpc.CodeActionClientCapabilities.CodeActionLiteralSupport
	312, // 333: protocol.rpc.CodeActionOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	9,   // 334: protocol.rpc.CodeActionOptions.code_action_kinds:type_name -> protocol.rpc.CodeActionKind
	314, // 335: protocol.rpc.CodeActionRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	173, // 336: protocol.rpc.CodeActionRegistrationOptions.code_action_options:type_name -> protocol.rpc.CodeActionOptions
	21,  // 337: protocol.rpc.CodeActionRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 338: protocol.rpc.CodeActionRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	316, // 339: protocol.rpc.CodeActionRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	311, // 340: protocol.rpc.CodeActionRequest.range:type_name -> protocol.Range
	176, // 341: protocol.rpc.CodeActionRequest.context:type_name -> protocol.rpc.CodeActionContext
	317, // 342: protocol.rpc.CodeActionContext.diagnostics:type_name -> protocol.Diagnostic
	9,   // 343: protocol.rpc.CodeActionContext.only:type_name -> protocol.rpc.CodeActionKind
	9,   // 344: protocol.rpc.CodeAction.kind:type_name -> protocol.rpc.CodeActionKind
	317, // 345: protocol.rpc.CodeAction.diagnostics:type_name -> protocol.Diagnostic
	310, // 346: protocol.rpc.CodeAction.edit:type_name -> protocol.WorkspaceEdit
	320, // 347: protocol.rpc.CodeAction.command:type_name -> protocol.Command
	312, // 348: protocol.rpc.CodeLensOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 349: protocol.rpc.CodeLensRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	179, // 350: protocol.rpc.CodeLensRegistrationOptions.code_lens_options:type_name -> protocol.rpc.CodeLensOptions
	21,  // 351: protocol.rpc.CodeLensRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 352: protocol.rpc.CodeLensRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	316, // 353: protocol.rpc.CodeLensRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	311, // 354: protocol.rpc.CodeLens.range:type_name -> protocol.Range
	320, // 355: protocol.rpc.CodeLens.command:type_name -> protocol.Command
	303, // 356: protocol.rpc.CodeLens.data:type_name -> google.protobuf.Any
	312, // 357: protocol.rpc.DocumentLinkOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 358: protocol.rpc.DocumentLinkRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	184, // 359: protocol.rpc.DocumentLinkRegistrationOptions.document_link_options:type_name -> protocol.rpc.DocumentLinkOptions
	21,  // 360: protocol.rpc.DocumentLinkRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 361: protocol.rpc.DocumentLinkRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	316, // 362: protocol.rpc.DocumentLinkRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	311, // 363: protocol.rpc.DocumentLink.range:type_name -> protocol.Range
	305, // 364: protocol.rpc.DocumentLink.target:type_name -> protocol.DocumentURI
	304, // 365: protocol.rpc.DocumentLink.tooltip:type_name -> google.protobuf.StringValue
	303, // 366: protocol.rpc.DocumentLink.data:type_name -> google.protobuf.Any
	312, // 367: protocol.rpc.DocumentColorOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 368: protocol.rpc.DocumentColorRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	323, // 369: protocol.rpc.DocumentColorRegistrationOptions.static_registration_options:type_name -> protocol.StaticRegistrationOptions
	189, // 370: protocol.rpc.DocumentColorRegistrationOptions.document_color_options:type_name -> protocol.rpc.DocumentColorOptions
	21,  // 371: protocol.rpc.DocumentColorRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 372: protocol.rpc.DocumentColorRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	316, // 373: protocol.rpc.DocumentColorRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	311, // 374: protocol.rpc.ColorInformation.range:type_name -> protocol.Range
	193, // 375: protocol.rpc.ColorInformation.color:type_name -> protocol.rpc.Color
	21,  // 376: protocol.rpc.ColorPresentationRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 377: protocol.rpc.ColorPresentationRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	316, // 378: protocol.rpc.ColorPresentationRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	193, // 379: protocol.rpc.ColorPresentationRequest.color:type_name -> protocol.rpc.Color
	311, // 380: protocol.rpc.ColorPresentationRequest.range:type_name -> protocol.Range
	309, // 381: protocol.rpc.ColorPresentation.text_edit:type_name -> protocol.TextEdit
	309, // 382: protocol.rpc.ColorPresentation.additional_text_edits:type_name -> protocol.TextEdit
	312, // 383: protocol.rpc.DocumentFormattingOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 384: protocol.rpc.DocumentFormattingRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	197, // 385: protocol.rpc.DocumentFormattingRegistrationOptions.document_formatting_options:type_name -> protocol.rpc.DocumentFormattingOptions
	21,  // 386: protocol.rpc.DocumentFormattingRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	316, // 387: protocol.rpc.DocumentFormattingRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	200, // 388: protocol.rpc.DocumentFormattingRequest.options:type_name -> protocol.rpc.FormattingOptions
	301, // 389: protocol.rpc.FormattingOptions.key:type_name -> protocol.rpc.FormattingOptions.KeyEntry
	312, // 390: protocol.rpc.DocumentRangeFormattingOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 391: protocol.rpc.DocumentRangeFormattingRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	197, // 392: protocol.rpc.DocumentRangeFormattingRegistrationOptions.document_formatting_options:type_name -> protocol.rpc.DocumentFormattingOptions
	21,  // 393: protocol.rpc.DocumentRangeFormattingRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	316, // 394: protocol.rpc.DocumentRangeFormattingRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	311, // 395: protocol.rpc.DocumentRangeFormattingRequest.range:type_name -> protocol.Range
	200, // 396: protocol.rpc.DocumentRangeFormattingRequest.options:type_name -> protocol.rpc.FormattingOptions
	304, // 397: protocol.rpc.DocumentOnTypeFormattingOptions.more_trigger_character:type_name -> google.protobuf.StringValue
	314, // 398: protocol.rpc.DocumentOnTypeFormattingRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	206, // 399: protocol.rpc.DocumentOnTypeFormattingRegistrationOptions.document_on_type_formatting_options:type_name -> protocol.rpc.DocumentOnTypeFormattingOptions
	318, // 400: protocol.rpc.DocumentOnTypeFormattingRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	200, // 401: protocol.rpc.DocumentOnTypeFormattingRequest.options:type_name -> protocol.rpc.FormattingOptions
	312, // 402: protocol.rpc.RenameOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 403: protocol.rpc.RenameRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	210, // 404: protocol.rpc.RenameRegistrationOptions.rename_options:type_name -> protocol.rpc.RenameOptions
	318, // 405: protocol.rpc.RenameRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 406: protocol.rpc.RenameRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	318, // 407: protocol.rpc.PrepareRenameRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	322, // 408: protocol.rpc.FoldingRangeClientCapabilities.range_limit:type_name -> google.protobuf.Int32Value
	312, // 409: protocol.rpc.FoldingRangeOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 410: protocol.rpc.FoldingRangeRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	215, // 411: protocol.rpc.FoldingRangeRegistrationOptions.folding_range_options:type_name -> protocol.rpc.FoldingRangeOptions
	323, // 412: protocol.rpc.FoldingRangeRegistrationOptions.static_registration_options:type_name -> protocol.StaticRegistrationOptions
	21,  // 413: protocol.rpc.FoldingRangeRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 414: protocol.rpc.FoldingRangeRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	316, // 415: protocol.rpc.FoldingRangeRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	322, // 416: protocol.rpc.FoldingRange.start_character:type_name -> google.protobuf.Int32Value
	322, // 417: protocol.rpc.FoldingRange.end_character:type_name -> google.protobuf.Int32Value
	10,  // 418: protocol.rpc.FoldingRange.kind:type_name -> protocol.rpc.FoldingRangeKind
	312, // 419: protocol.rpc.SelectionRangeOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	220, // 420: protocol.rpc.SelectionRangeRegistrationOptions.selection_range_options:type_name -> protocol.rpc.SelectionRangeOptions
	314, // 421: protocol.rpc.SelectionRangeRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	323, // 422: protocol.rpc.SelectionRangeRegistrationOptions.static_registration_options:type_name -> protocol.StaticRegistrationOptions
	21,  // 423: protocol.rpc.SelectionRangeRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 424: protocol.rpc.SelectionRangeRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	316, // 425: protocol.rpc.SelectionRangeRequest.text_document:type_name -> protocol.TextDocumentIdentifier
	325, // 426: protocol.rpc.SelectionRangeRequest.positions:type_name -> protocol.Position
	311, // 427: protocol.rpc.SelectionRange.range:type_name -> protocol.Range
	223, // 428: protocol.rpc.SelectionRange.parent:type_name -> protocol.rpc.SelectionRange
	312, // 429: protocol.rpc.CallHierarchyOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	314, // 430: protocol.rpc.CallHierarchyRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	225, // 431: protocol.rpc.CallHierarchyRegistrationOptions.call_hierarchy_options:type_name -> protocol.rpc.CallHierarchyOptions
	323, // 432: protocol.rpc.CallHierarchyRegistrationOptions.static_registration_options:type_name -> protocol.StaticRegistrationOptions
	318, // 433: protocol.rpc.CallHierarchyPrepareRequest.text_document_position_params:type_name -> protocol.TextDocumentPositionParams
	21,  // 434: protocol.rpc.CallHierarchyPrepareRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	7,   // 435: protocol.rpc.CallHierarchyItem.kind:type_name -> protocol.rpc.SymbolKind
	8,   // 436: protocol.rpc.CallHierarchyItem.tags:type_name -> protocol.rpc.SymbolTag
	304, // 437: protocol.rpc.CallHierarchyItem.detail:type_name -> google.protobuf.StringValue
	305, // 438: protocol.rpc.CallHierarchyItem.uri:type_name -> protocol.DocumentURI
	311, // 439: protocol.rpc.CallHierarchyItem.range:type_name -> protocol.Range
	311, // 440: protocol.rpc.CallHierarchyItem.selection_range:type_name -> protocol.Range
	21,  // 441: protocol.rpc.CallHierarchyIncomingCallsRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 442: protocol.rpc.CallHierarchyIncomingCallsRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	228, // 443: protocol.rpc.CallHierarchyIncomingCallsRequest.item:type_name -> protocol.rpc.CallHierarchyItem
	228, // 444: protocol.rpc.CallHierarchyIncomingCall.from:type_name -> protocol.rpc.CallHierarchyItem
	311, // 445: protocol.rpc.CallHierarchyIncomingCall.from_ranges:type_name -> protocol.Range
	21,  // 446: protocol.rpc.CallHierarchyOutgoingCallsRequest.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 447: protocol.rpc.CallHierarchyOutgoingCallsRequest.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	228, // 448: protocol.rpc.CallHierarchyOutgoingCallsRequest.item:type_name -> protocol.rpc.CallHierarchyItem
	228, // 449: protocol.rpc.CallHierarchyOutgoingCall.to:type_name -> protocol.rpc.CallHierarchyItem
	311, // 450: protocol.rpc.CallHierarchyOutgoingCall.from_ranges:type_name -> protocol.Range
	11,  // 451: protocol.rpc.SemanticTokensLegend.token_types:type_name -> protocol.rpc.SemanticTokenTypes
	12,  // 452: protocol.rpc.SemanticTokensLegend.token_modifiers:type_name -> protocol.rpc.SemanticTokenModifiers
	302, // 453: protocol.rpc.SemanticTokensClientCapabilities.requests:type_name -> protocol.rpc.SemanticTokensClientCapabilities.Requests
	11,  // 454: protocol.rpc.SemanticTokensClientCapabilities.token_types:type_name -> protocol.rpc.SemanticTokenTypes
	12,  // 455: protocol.rpc.SemanticTokensClientCapabilities.token_modifiers:type_name -> protocol.rpc.SemanticTokenModifiers
	13,  // 456: protocol.rpc.SemanticTokensClientCapabilities.formats:type_name -> protocol.rpc.TokenFormat
	312, // 457: protocol.rpc.SemanticTokensOptions.work_done_progress_options:type_name -> protocol.WorkDoneProgressOptions
	233, // 458: protocol.rpc.SemanticTokensOptions.legend:type_name -> protocol.rpc.SemanticTokensLegend
	307, // 459: protocol.rpc.SemanticTokensOptions.empty:type_name -> google.protobuf.NullValue
	314, // 460: protocol.rpc.SemanticTokensRegistrationOptions.text_document_registration_options:type_name -> protocol.TextDocumentRegistrationOptions
	235, // 461: protocol.rpc.SemanticTokensRegistrationOptions.semantic_tokens_options:type_name -> protocol.rpc.SemanticTokensOptions
	323, // 462: protocol.rpc.SemanticTokensRegistrationOptions.static_registration_options:type_name -> protocol.StaticRegistrationOptions
	21,  // 463: protocol.rpc.SemanticTokensParams.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 464: protocol.rpc.SemanticTokensParams.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	316, // 465: protocol.rpc.SemanticTokensParams.text_document:type_name -> protocol.TextDocumentIdentifier
	304, // 466: protocol.rpc.SemanticTokens.result_id:type_name -> google.protobuf.StringValue
	21,  // 467: protocol.rpc.SemanticTokensDeltaParams.work_done_progress_params:type_name -> protocol.rpc.WorkDoneProgressParams
	22,  // 468: protocol.rpc.SemanticTokensDeltaParams.partial_result_params:type_name -> protocol.rpc.PartialResultParams
	316, // 469: protocol.rpc.SemanticTokensDeltaParams.text_document:type_name -> protocol.TextDocumentIdentifier
	242, // 470: protocol.rpc.SemanticTokensDelta.edits:type_name -> protocol.rpc.SemanticTokensEdit
	242, // 471: protocol.rpc.SemanticTokensDeltaPartialResult.edits:type_name -> protocol.rpc.SemanticTokensEdit
	304, // 472: protocol.rpc.InitializeRequest.ClientInfo.version:type_name -> google.protobuf.StringValue
	86,  // 473: protocol.rpc.WorkspaceFoldersResponse.WorkspaceFolders.workspace_folders:type_name -> protocol.rpc.WorkspaceFolder
	303, // 474: protocol.rpc.ConfigurationResponse.Anys.anys:type_name -> google.protobuf.Any
	171, // 475: protocol.rpc.WorkspaceSymbolsResponse.SymbolInformations.symbol_informations:type_name -> protocol.rpc.SymbolInformation
	324, // 476: protocol.rpc.DeclarationResponse.Result.location:type_name -> protocol.Location
	40,  // 477: protocol.rpc.DeclarationResponse.Result.locations:type_name -> protocol.rpc.Locations
	41,  // 478: protocol.rpc.DeclarationResponse.Result.location_links:type_name -> protocol.rpc.LocationLinks
	307, // 479: protocol.rpc.DeclarationResponse.Result.empty:type_name -> google.protobuf.NullValue
	40,  // 480: protocol.rpc.DeclarationResponse.PartialResult.locations:type_name -> protocol.rpc.Locations
	41,  // 481: protocol.rpc.DeclarationResponse.PartialResult.location_links:type_name -> protocol.rpc.LocationLinks
	324, // 482: protocol.rpc.DefinitionResponse.Result.location:type_name -> protocol.Location
	40,  // 483: protocol.rpc.DefinitionResponse.Result.locations:type_name -> protocol.rpc.Locations
	41,  // 484: protocol.rpc.DefinitionResponse.Result.location_links:type_name -> protocol.rpc.LocationLinks
	307, // 485: protocol.rpc.DefinitionResponse.Result.empty:type_name -> google.protobuf.NullValue
	40,  // 486: protocol.rpc.DefinitionResponse.PartialResult.locations:type_name -> protocol.rpc.Locations
	41,  // 487: protocol.rpc.DefinitionResponse.PartialResult.location_links:type_name -> protocol.rpc.LocationLinks
	324, // 488: protocol.rpc.TypeDefinitionResponse.Result.location:type_name -> protocol.Location
	40,  // 489: protocol.rpc.TypeDefinitionResponse.Result.locations:type_name -> protocol.rpc.Locations
	41,  // 490: protocol.rpc.TypeDefinitionResponse.Result.location_links:type_name -> protocol.rpc.LocationLinks
	307, // 491: protocol.rpc.TypeDefinitionResponse.Result.empty:type_name -> google.protobuf.NullValue
	40,  // 492: protocol.rpc.TypeDefinitionResponse.PartialResult.locations:type_name -> protocol.rpc.Locations
	41,  // 493: protocol.rpc.TypeDefinitionResponse.PartialResult.location_links:type_name -> protocol.rpc.LocationLinks
	324, // 494: protocol.rpc.ImplementationResponse.Result.location:type_name -> protocol.Location
	40,  // 495: protocol.rpc.ImplementationResponse.Result.locations:type_name -> protocol.rpc.Locations
	41,  // 496: protocol.rpc.ImplementationResponse.Result.location_links:type_name -> protocol.rpc.LocationLinks
	307, // 497: protocol.rpc.ImplementationResponse.Result.empty:type_name -> google.protobuf.NullValue
	40,  // 498: protocol.rpc.ImplementationResponse.PartialResult.locations:type_name -> protocol.rpc.Locations
	41,  // 499: protocol.rpc.ImplementationResponse.PartialResult.location_links:type_name -> protocol.rpc.LocationLinks
	40,  // 500: protocol.rpc.ReferenceResponse.Result.locations:type_name -> protocol.rpc.Locations
	307, // 501: protocol.rpc.ReferenceResponse.Result.empty:type_name -> google.protobuf.NullValue
	40,  // 502: protocol.rpc.ReferenceResponse.PartialResult.locations:type_name -> protocol.rpc.Locations
	165, // 503: protocol.rpc.DocumentHighlightsResponse.Result.document_highlights:type_name -> protocol.rpc.DocumentHighlight
	307, // 504: protocol.rpc.DocumentHighlightsResponse.Result.empty:type_name -> google.protobuf.NullValue
	165, // 505: protocol.rpc.DocumentHighlightsResponse.PartialResult.document_highlights:type_name -> protocol.rpc.DocumentHighlight
	170, // 506: protocol.rpc.DocumentSymbolResponse.Result.document_symbols:type_name -> protocol.rpc.DocumentSymbol
	171, // 507: protocol.rpc.DocumentSymbolResponse.Result.symbol_informations:type_name -> protocol.rpc.SymbolInformation
	307, // 508: protocol.rpc.DocumentSymbolResponse.Result.empty:type_name -> google.protobuf.NullValue
	170, // 509: protocol.rpc.DocumentSymbolResponse.PartialResult.document_symbols:type_name -> protocol.rpc.DocumentSymbol
	171, // 510: protocol.rpc.DocumentSymbolResponse.PartialResult.symbol_informations:type_name -> protocol.rpc.SymbolInformation
	320, // 511: protocol.rpc.CodeActionResponse.Result.commands:type_name -> protocol.Command
	177, // 512: protocol.rpc.CodeActionResponse.Result.code_actions:type_name -> protocol.rpc.CodeAction
	307, // 513: protocol.rpc.CodeActionResponse.Result.empty:type_name -> google.protobuf.NullValue
	320, // 514: protocol.rpc.CodeActionResponse.PartialResult.commands:type_name -> protocol.Command
	177, // 515: protocol.rpc.CodeActionResponse.PartialResult.code_actions:type_name -> protocol.rpc.CodeAction
	182, // 516: protocol.rpc.CodeLensResponse.Result.code_lens:type_name -> protocol.rpc.CodeLens
	307, // 517: protocol.rpc.CodeLensResponse.Result.empty:type_name -> google.protobuf.NullValue
	182, // 518: protocol.rpc.CodeLensResponse.PartialResult.code_lens:type_name -> protocol.rpc.CodeLens
	187, // 519: protocol.rpc.DocumentLinkResponse.Result.document_links:type_name -> protocol.rpc.DocumentLink
	307, // 520: protocol.rpc.DocumentLinkResponse.Result.empty:type_name -> google.protobuf.NullValue
	187, // 521: protocol.rpc.DocumentLinkResponse.PartialResult.document_links:type_name -> protocol.rpc.DocumentLink
	192, // 522: protocol.rpc.DocumentColorResponse.Result.color_informations:type_name -> protocol.rpc.ColorInformation
	192, // 523: protocol.rpc.DocumentColorResponse.PartialResult.color_informations:type_name -> protocol.rpc.ColorInformation
	195, // 524: protocol.rpc.ColorPresentationResponse.Result.color_presentations:type_name -> protocol.rpc.ColorPresentation
	195, // 525: protocol.rpc.ColorPresentationResponse.PartialResult.color_presentations:type_name -> protocol.rpc.ColorPresentation
	311, // 526: protocol.rpc.PrepareRenameResponse.Result.range:type_name -> protocol.Range
	218, // 527: protocol.rpc.FoldingRangeResponse.Result.folding_ranges:type_name -> protocol.rpc.FoldingRange
	307, // 528: protocol.rpc.FoldingRangeResponse.Result.empty:type_name -> google.protobuf.NullValue
	218, // 529: protocol.rpc.FoldingRangeResponse.PartialResult.folding_ranges:type_name -> protocol.rpc.FoldingRange
	223, // 530: protocol.rpc.SelectionRangeResponse.Result.selection_ranges:type_name -> protocol.rpc.SelectionRange
	307, // 531: protocol.rpc.SelectionRangeResponse.Result.empty:type_name -> google.protobuf.NullValue
	223, // 532: protocol.rpc.SelectionRangeResponse.PartialResult.selection_ranges:type_name -> protocol.rpc.SelectionRange
	228, // 533: protocol.rpc.CallHierarchyPrepareResponse.Result.call_hierarchy_items:type_name -> protocol.rpc.CallHierarchyItem
	307, // 534: protocol.rpc.CallHierarchyPrepareResponse.Result.empty:type_name -> google.protobuf.NullValue
	230, // 535: protocol.rpc.CallHierarchyIncomingCallsResponse.Result.call_hierarchy_incoming_calls:type_name -> protocol.rpc.CallHierarchyIncomingCall
	307, // 536: protocol.rpc.CallHierarchyIncomingCallsResponse.Result.empty:type_name -> google.protobuf.NullValue
	230, // 537: protocol.rpc.CallHierarchyIncomingCallsResponse.PartialResult.call_hierarchy_incoming_calls:type_name -> protocol.rpc.CallHierarchyIncomingCall
	232, // 538: protocol.rpc.CallHierarchyOutgoingCallsResponse.Result.call_hierarchy_outgoing_calls:type_name -> protocol.rpc.CallHierarchyOutgoingCall
	307, // 539: protocol.rpc.CallHierarchyOutgoingCallsResponse.Result.empty:type_name -> google.protobuf.NullValue
	232, // 540: protocol.rpc.CallHierarchyOutgoingCallsResponse.PartialResult.call_hierarchy_outgoing_calls:type_name -> protocol.rpc.CallHierarchyOutgoingCall
	326, // 541: protocol.rpc.ClientCapabilities.Workspace.workspace_edit:type_name -> protocol.WorkspaceEditClientCapabilities
	89,  // 542: protocol.rpc.ClientCapabilities.Workspace.did_change_configuration:type_name -> protocol.rpc.DidChangeConfigurationClientCapabilities
	93,  // 543: protocol.rpc.ClientCapabilities.Workspace.did_change_watched_files:type_name -> protocol.rpc.DidChangeWatchedFilesClientCapabilities
	98,  // 544: protocol.rpc.ClientCapabilities.Workspace.symbol:type_name -> protocol.rpc.WorkspaceSymbolClientCapabilities
	100, // 545: protocol.rpc.ClientCapabilities.Workspace.execute_command:type_name -> protocol.rpc.ExecuteCommandClientCapabilities
	304, // 546: protocol.rpc.InitializeResponse.ServerInfo.version:type_name -> google.protobuf.StringValue
	85,  // 547: protocol.rpc.ServerCapabilities.Workspace.workspace_folders:type_name -> protocol.rpc.WorkspaceFoldersServerCapabilities
	286, // 548: protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind.value_set:type_name -> protocol.rpc.WorkspaceSymbolClientCapabilities.SymbolKind
	311, // 549: protocol.rpc.TextDocumentContentChangeEvent.ContentChangeEvent.range:type_name -> protocol.Range
	327, // 550: protocol.rpc.PublishDiagnosticsClientCapabilities.TagSupport.value_set:type_name -> protocol.DiagnosticTag
	321, // 551: protocol.rpc.CompletionClientCapabilities.CompletionItem.documentation_format:type_name -> protocol.MarkupKind
	291, // 552: protocol.rpc.CompletionClientCapabilities.CompletionItem.tag_support:type_name -> protocol.rpc.CompletionClientCapabilities.CompletionItem.TagSupport
	290, // 553: protocol.rpc.CompletionClientCapabilities.CompletionItemKind.value_set:type_name -> protocol.rpc.CompletionClientCapabilities.CompletionItemKind
	5,   // 554: protocol.rpc.CompletionClientCapabilities.CompletionItem.TagSupport.value_set:type_name -> protocol.rpc.CompletionItemTag
	131, // 555: protocol.rpc.Hover.MarkedStrings.marked_string:type_name -> protocol.rpc.MarkedString
	321, // 556: protocol.rpc.SignatureHelpClientCapabilities.SignatureInformation.documentation_format:type_name -> protocol.MarkupKind
	295, // 557: protocol.rpc.SignatureHelpClientCapabilities.SignatureInformation.parameter_information:type_name -> protocol.rpc.SignatureHelpClientCapabilities.SignatureInformation.ParameterInformation
	297, // 558: protocol.rpc.DocumentSymbolClientCapabilities.SymbolKind.value_set:type_name -> protocol.rpc.DocumentSymbolClientCapabilities.SymbolKind
	299, // 559: protocol.rpc.CodeActionClientCapabilities.CodeActionLiteralSupport.code_action_kind:type_name -> protocol.rpc.CodeActionClientCapabilities.CodeActionLiteralSupport.CodeActionKind
	299, // 560: protocol.rpc.CodeActionClientCapabilities.CodeActionLiteralSupport.CodeActionKind.value_set:type_name -> protocol.rpc.CodeActionClientCapabilities.CodeActionLiteralSupport.CodeActionKind
	300, // 561: protocol.rpc.FormattingOptions.KeyEntry.value:type_name -> protocol.rpc.FormattingOptions.Value
	307, // 562: protocol.rpc.SemanticTokensClientCapabilities.Requests.empty:type_name -> google.protobuf.NullValue
	18,  // 563: protocol.rpc.LanguageServerProtocol.Cancel:input_type -> protocol.rpc.CancelRequest
	20,  // 564: protocol.rpc.LanguageServerProtocol.Progress:input_type -> protocol.rpc.ProgressRequest
	23,  // 565: protocol.rpc.LanguageServerProtocol.Initialize:input_type -> protocol.rpc.InitializeRequest
	24,  // 566: protocol.rpc.LanguageServerProtocol.Initialized:input_type -> protocol.rpc.InitializedRequest
	328, // 567: protocol.rpc.LanguageServerProtocol.Shutdown:input_type -> google.protobuf.Empty
	328, // 568: protocol.rpc.LanguageServerProtocol.Exit:input_type -> google.protobuf.Empty
	25,  // 569: protocol.rpc.LanguageServerProtocol.LogTrace:input_type -> protocol.rpc.LogTraceRequest
	26,  // 570: protocol.rpc.LanguageServerProtocol.SetTrace:input_type -> protocol.rpc.SetTraceRequest
	74,  // 571: protocol.rpc.LanguageServerProtocol.ShowMessage:input_type -> protocol.rpc.ShowMessageRequestParams
	76,  // 572: protocol.rpc.LanguageServerProtocol.ShowMessageRequest:input_type -> protocol.rpc.ShowMessageRequestRequest
	77,  // 573: protocol.rpc.LanguageServerProtocol.LogMessage:input_type -> protocol.rpc.LogMessageRequest
	78,  // 574: protocol.rpc.LanguageServerProtocol.CreateWorkDoneProgress:input_type -> protocol.rpc.WorkDoneProgressCreateRequest
	79,  // 575: protocol.rpc.LanguageServerProtocol.CancelWorkDoneProgress:input_type -> protocol.rpc.WorkDoneProgressCancelRequest
	303, // 576: protocol.rpc.LanguageServerProtocol.Telemetry:input_type -> google.protobuf.Any
	328, // 577: protocol.rpc.LanguageServerProtocol.WorkspaceFolders:input_type -> google.protobuf.Empty
	88,  // 578: protocol.rpc.LanguageServerProtocol.DidChangeWorkspaceFolders:input_type -> protocol.rpc.DidChangeWorkspaceFoldersRequest
	90,  // 579: protocol.rpc.LanguageServerProtocol.DidChangeConfiguration:input_type -> protocol.rpc.DidChangeConfigurationRequest
	92,  // 580: protocol.rpc.LanguageServerProtocol.Configuration:input_type -> protocol.rpc.ConfigurationRequest
	97,  // 581: protocol.rpc.LanguageServerProtocol.DidChangeWatchedFiles:input_type -> protocol.rpc.DidChangeWatchedFilesRequest
	92,  // 582: protocol.rpc.LanguageServerProtocol.WorkspaceSymbols:input_type -> protocol.rpc.ConfigurationRequest
	103, // 583: protocol.rpc.LanguageServerProtocol.ExecuteCommand:input_type -> protocol.rpc.ExecuteCommandParams
	104, // 584: protocol.rpc.LanguageServerProtocol.ApplyEdit:input_type -> protocol.rpc.ApplyWorkspaceEditRequest
	107, // 585: protocol.rpc.LanguageServerProtocol.DidOpenTextDocument:input_type -> protocol.rpc.DidOpenTextDocumentRequest
	109, // 586: protocol.rpc.LanguageServerProtocol.DidChangeTextDocument:input_type -> protocol.rpc.DidChangeTextDocumentRequest
	111, // 587: protocol.rpc.LanguageServerProtocol.WillSaveTextDocument:input_type -> protocol.rpc.WillSaveTextDocumentRequest
	111, // 588: protocol.rpc.LanguageServerProtocol.WillSaveWaitUntilTextDocument:input_type -> protocol.rpc.WillSaveTextDocumentRequest
	114, // 589: protocol.rpc.LanguageServerProtocol.DidSaveTextDocument:input_type -> protocol.rpc.DidSaveTextDocumentRequest
	115, // 590: protocol.rpc.LanguageServerProtocol.DidCloseTextDocument:input_type -> protocol.rpc.DidCloseTextDocumentRequest
	118, // 591: protocol.rpc.LanguageServerProtocol.PublishDiagnostics:input_type -> protocol.rpc.PublishDiagnosticsRequest
	122, // 592: protocol.rpc.LanguageServerProtocol.Completion:input_type -> protocol.rpc.CompletionRequest
	37,  // 593: protocol.rpc.LanguageServerProtocol.CompletionItemResolve:input_type -> protocol.rpc.CompletionItemResolveRequest
	129, // 594: protocol.rpc.LanguageServerProtocol.Hover:input_type -> protocol.rpc.HoverRequest
	135, // 595: protocol.rpc.LanguageServerProtocol.SignatureHelp:input_type -> protocol.rpc.SignatureHelpRequest
	143, // 596: protocol.rpc.LanguageServerProtocol.GotoDeclaration:input_type -> protocol.rpc.DeclarationRequest
	147, // 597: protocol.rpc.LanguageServerProtocol.GotoDefinition:input_type -> protocol.rpc.DefinitionRequest
	151, // 598: protocol.rpc.LanguageServerProtocol.GotoTypeDefinition:input_type -> protocol.rpc.TypeDefinitionRequest
	155, // 599: protocol.rpc.LanguageServerProtocol.GotoImplementation:input_type -> protocol.rpc.ImplementationRequest
	159, // 600: protocol.rpc.LanguageServerProtocol.FindReferences:input_type -> protocol.rpc.ReferenceRequest
	164, // 601: protocol.rpc.LanguageServerProtocol.DocumentHighlights:input_type -> protocol.rpc.DocumentHighlightRequest
	169, // 602: protocol.rpc.LanguageServerProtocol.DocumentSymbols:input_type -> protocol.rpc.DocumentSymbolRequest
	175, // 603: protocol.rpc.LanguageServerProtocol.CodeAction:input_type -> protocol.rpc.CodeActionRequest
	181, // 604: protocol.rpc.LanguageServerProtocol.CodeLens:input_type -> protocol.rpc.CodeLensRequest
	51,  // 605: protocol.rpc.LanguageServerProtocol.CodeLensResolve:input_type -> protocol.rpc.CodeLensResolveRequest
	186, // 606: protocol.rpc.LanguageServerProtocol.DocumentLink:input_type -> protocol.rpc.DocumentLinkRequest
	54,  // 607: protocol.rpc.LanguageServerProtocol.DocumentLinkResolve:input_type -> protocol.rpc.DocumentLinkResolveRequest
	191, // 608: protocol.rpc.LanguageServerProtocol.DocumentColor:input_type -> protocol.rpc.DocumentColorRequest
	194, // 609: protocol.rpc.LanguageServerProtocol.ColorPresentation:input_type -> protocol.rpc.ColorPresentationRequest
	199, // 610: protocol.rpc.LanguageServerProtocol.DocumentFormatting:input_type -> protocol.rpc.DocumentFormattingRequest
	204, // 611: protocol.rpc.LanguageServerProtocol.DocumentRangeFormatting:input_type -> protocol.rpc.DocumentRangeFormattingRequest
	208, // 612: protocol.rpc.LanguageServerProtocol.OnTypeFormatting:input_type -> protocol.rpc.DocumentOnTypeFormattingRequest
	212, // 613: protocol.rpc.LanguageServerProtocol.Rename:input_type -> protocol.rpc.RenameRequest
	213, // 614: protocol.rpc.LanguageServerProtocol.PrepareRename:input_type -> protocol.rpc.PrepareRenameRequest
	217, // 615: protocol.rpc.LanguageServerProtocol.FoldingRange:input_type -> protocol.rpc.FoldingRangeRequest
	222, // 616: protocol.rpc.LanguageServerProtocol.SelectionRange:input_type -> protocol.rpc.SelectionRangeRequest
	227, // 617: protocol.rpc.LanguageServerProtocol.PrepareCallHierarchy:input_type -> protocol.rpc.CallHierarchyPrepareRequest
	229, // 618: protocol.rpc.LanguageServerProtocol.CallHierarchyIncomingCalls:input_type -> protocol.rpc.CallHierarchyIncomingCallsRequest
	231, // 619: protocol.rpc.LanguageServerProtocol.CallHierarchyOutgoingCalls:input_type -> protocol.rpc.CallHierarchyOutgoingCallsRequest
	328, // 620: protocol.rpc.LanguageServerProtocol.Cancel:output_type -> google.protobuf.Empty
	328, // 621: protocol.rpc.LanguageServerProtocol.Progress:output_type -> google.protobuf.Empty
	70,  // 622: protocol.rpc.LanguageServerProtocol.Initialize:output_type -> protocol.rpc.InitializeResponse
	328, // 623: protocol.rpc.LanguageServerProtocol.Initialized:output_type -> google.protobuf.Empty
	308, // 624: protocol.rpc.LanguageServerProtocol.Shutdown:output_type -> protocol.Error
	328, // 625: protocol.rpc.LanguageServerProtocol.Exit:output_type -> google.protobuf.Empty
	328, // 626: protocol.rpc.LanguageServerProtocol.LogTrace:output_type -> google.protobuf.Empty
	328, // 627: protocol.rpc.LanguageServerProtocol.SetTrace:output_type -> google.protobuf.Empty
	328, // 628: protocol.rpc.LanguageServerProtocol.ShowMessage:output_type -> google.protobuf.Empty
	27,  // 629: protocol.rpc.LanguageServerProtocol.ShowMessageRequest:output_type -> protocol.rpc.ShowMessageResponse
	328, // 630: protocol.rpc.LanguageServerProtocol.LogMessage:output_type -> google.protobuf.Empty
	308, // 631: protocol.rpc.LanguageServerProtocol.CreateWorkDoneProgress:output_type -> protocol.Error
	308, // 632: protocol.rpc.LanguageServerProtocol.CancelWorkDoneProgress:output_type -> protocol.Error
	328, // 633: protocol.rpc.LanguageServerProtocol.Telemetry:output_type -> google.protobuf.Empty
	28,  // 634: protocol.rpc.LanguageServerProtocol.WorkspaceFolders:output_type -> protocol.rpc.WorkspaceFoldersResponse
	328, // 635: protocol.rpc.LanguageServerProtocol.DidChangeWorkspaceFolders:output_type -> google.protobuf.Empty
	328, // 636: protocol.rpc.LanguageServerProtocol.DidChangeConfiguration:output_type -> google.protobuf.Empty
	29,  // 637: protocol.rpc.LanguageServerProtocol.Configuration:output_type -> protocol.rpc.ConfigurationResponse
	328, // 638: protocol.rpc.LanguageServerProtocol.DidChangeWatchedFiles:output_type -> google.protobuf.Empty
	30,  // 639: protocol.rpc.LanguageServerProtocol.WorkspaceSymbols:output_type -> protocol.rpc.WorkspaceSymbolsResponse
	31,  // 640: protocol.rpc.LanguageServerProtocol.ExecuteCommand:output_type -> protocol.rpc.ExecuteCommandResponse
	105, // 641: protocol.rpc.LanguageServerProtocol.ApplyEdit:output_type -> protocol.rpc.ApplyWorkspaceEditResponse
	328, // 642: protocol.rpc.LanguageServerProtocol.DidOpenTextDocument:output_type -> google.protobuf.Empty
	328, // 643: protocol.rpc.LanguageServerProtocol.DidChangeTextDocument:output_type -> google.protobuf.Empty
	328, // 644: protocol.rpc.LanguageServerProtocol.WillSaveTextDocument:output_type -> google.protobuf.Empty
	33,  // 645: protocol.rpc.LanguageServerProtocol.WillSaveWaitUntilTextDocument:output_type -> protocol.rpc.WillSaveTextDocumentResponse
	328, // 646: protocol.rpc.LanguageServerProtocol.DidSaveTextDocument:output_type -> google.protobuf.Empty
	328, // 647: protocol.rpc.LanguageServerProtocol.DidCloseTextDocument:output_type -> google.protobuf.Empty
	328, // 648: protocol.rpc.LanguageServerProtocol.PublishDiagnostics:output_type -> google.protobuf.Empty
	35,  // 649: protocol.rpc.LanguageServerProtocol.Completion:output_type -> protocol.rpc.CompletionResponse
	38,  // 650: protocol.rpc.LanguageServerProtocol.CompletionItemResolve:output_type -> protocol.rpc.CompletionItemResolveResponse
	36,  // 651: protocol.rpc.LanguageServerProtocol.Hover:output_type -> protocol.rpc.HoverResponse
	39,  // 652: protocol.rpc.LanguageServerProtocol.SignatureHelp:output_type -> protocol.rpc.SignatureHelpResponse
	42,  // 653: protocol.rpc.LanguageServerProtocol.GotoDeclaration:output_type -> protocol.rpc.DeclarationResponse
	43,  // 654: protocol.rpc.LanguageServerProtocol.GotoDefinition:output_type -> protocol.rpc.DefinitionResponse
	44,  // 655: protocol.rpc.LanguageServerProtocol.GotoTypeDefinition:output_type -> protocol.rpc.TypeDefinitionResponse
	45,  // 656: protocol.rpc.LanguageServerProtocol.GotoImplementation:output_type -> protocol.rpc.ImplementationResponse
	46,  // 657: protocol.rpc.LanguageServerProtocol.FindReferences:output_type -> protocol.rpc.ReferenceResponse
	47,  // 658: protocol.rpc.LanguageServerProtocol.DocumentHighlights:output_type -> protocol.rpc.DocumentHighlightsResponse
	48,  // 659: protocol.rpc.LanguageServerProtocol.DocumentSymbols:output_type -> protocol.rpc.DocumentSymbolResponse
	49,  // 660: protocol.rpc.LanguageServerProtocol.CodeAction:output_type -> protocol.rpc.CodeActionResponse
	50,  // 661: protocol.rpc.LanguageServerProtocol.CodeLens:output_type -> protocol.rpc.CodeLensResponse
	52,  // 662: protocol.rpc.LanguageServerProtocol.CodeLensResolve:output_type -> protocol.rpc.CodeLensResolveResponse
	53,  // 663: protocol.rpc.LanguageServerProtocol.DocumentLink:output_type -> protocol.rpc.DocumentLinkResponse
	55,  // 664: protocol.rpc.LanguageServerProtocol.DocumentLinkResolve:output_type -> protocol.rpc.DocumentLinkResolveResponse
	56,  // 665: protocol.rpc.LanguageServerProtocol.DocumentColor:output_type -> protocol.rpc.DocumentColorResponse
	57,  // 666: protocol.rpc.LanguageServerProtocol.ColorPresentation:output_type -> protocol.rpc.ColorPresentationResponse
	58,  // 667: protocol.rpc.LanguageServerProtocol.DocumentFormatting:output_type -> protocol.rpc.DocumentFormattingResponse
	59,  // 668: protocol.rpc.LanguageServerProtocol.DocumentRangeFormatting:output_type -> protocol.rpc.DocumentRangeFormattingResponse
	60,  // 669: protocol.rpc.LanguageServerProtocol.OnTypeFormatting:output_type -> protocol.rpc.DocumentOnTypeFormattingResponse
	61,  // 670: protocol.rpc.LanguageServerProtocol.Rename:output_type -> protocol.rpc.RenameResponse
	62,  // 671: protocol.rpc.LanguageServerProtocol.PrepareRename:output_type -> protocol.rpc.PrepareRenameResponse
	63,  // 672: protocol.rpc.LanguageServerProtocol.FoldingRange:output_type -> protocol.rpc.FoldingRangeResponse
	64,  // 673: protocol.rpc.LanguageServerProtocol.SelectionRange:output_type -> protocol.rpc.SelectionRangeResponse
	65,  // 674: protocol.rpc.LanguageServerProtocol.PrepareCallHierarchy:output_type -> protocol.rpc.CallHierarchyPrepareResponse
	66,  // 675: protocol.rpc.LanguageServerProtocol.CallHierarchyIncomingCalls:output_type -> protocol.rpc.CallHierarchyIncomingCallsResponse
	67,  // 676: protocol.rpc.LanguageServerProtocol.CallHierarchyOutgoingCalls:output_type -> protocol.rpc.CallHierarchyOutgoingCallsResponse
	620, // [620:677] is the sub-list for method output_type
	563, // [563:620] is the sub-list for method input_type
	563, // [563:563] is the sub-list for extension type_name
	563, // [563:563] is the sub-list for extension extendee
	0,   // [0:563] is the sub-list for field type_name
}

func init() { file_protocol_rpc_rpc_proto_init() }
func file_protocol_rpc_rpc_proto_init() {
	if File_protocol_rpc_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocol_rpc_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkDoneProgressParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialResultParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceFoldersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceSymbolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextEdits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WillSaveTextDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionItemResolveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionItemResolveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Locations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclarationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDefinitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentHighlightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSymbolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLensResolveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLensResolveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLinkResolveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLinkResolveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentColorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorPresentationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentFormattingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentRangeFormattingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentOnTypeFormattingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareRenameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldingRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyPrepareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyIncomingCallsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyOutgoingCallsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeErrorUnknownProtocolVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeErrorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowMessageRequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowMessageRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkDoneProgressCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkDoneProgressCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unregistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregistrationParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceFoldersServerCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceFoldersChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidChangeWorkspaceFoldersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidChangeConfigurationClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidChangeConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidChangeWatchedFilesClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSystemWatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidChangeWatchedFilesRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidChangeWatchedFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceSymbolClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceSymbolParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCommandClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCommandOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCommandRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteCommandParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyWorkspaceEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyWorkspaceEditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentSyncOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidOpenTextDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentChangeRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidChangeTextDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentContentChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WillSaveTextDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentSaveRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidSaveTextDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DidCloseTextDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentSyncClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishDiagnosticsClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishDiagnosticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoverClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoverOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoverRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelpClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelpOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelpRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelpContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclarationClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclarationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclarationRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclarationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDefinitionClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDefinitionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDefinitionRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDefinitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentHighlightClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentHighlightOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentHighlightRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentHighlightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSymbolClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSymbolOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSymbolRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSymbolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeActionClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeActionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeActionRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeActionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLensClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLensOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLensRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLinkClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLinkOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLinkRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentColorClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentColorOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentColorRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorPresentationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorPresentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentFormattingClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentFormattingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentFormattingRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentFormattingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormattingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentRangeFormattingClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentRangeFormattingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentRangeFormattingRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentRangeFormattingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentOnTypeFormattingClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentOnTypeFormattingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentOnTypeFormattingRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentOnTypeFormattingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareRenameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldingRangeClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldingRangeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldingRangeRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldingRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldingRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionRangeClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionRangeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionRangeRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyPrepareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyIncomingCallsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyIncomingCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyOutgoingCallsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyOutgoingCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensLegend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensClientCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensRegistrationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensPartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensDeltaParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensDeltaPartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeRequest_ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceFoldersResponse_WorkspaceFolders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationResponse_Anys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceSymbolsResponse_SymbolInformations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclarationResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclarationResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDefinitionResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDefinitionResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementationResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentHighlightsResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentHighlightsResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSymbolResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSymbolResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeActionResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeActionResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLensResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeLensResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLinkResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLinkResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentColorResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentColorResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorPresentationResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorPresentationResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareRenameResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldingRangeResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldingRangeResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionRangeResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionRangeResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyPrepareResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyIncomingCallsResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyIncomingCallsResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyOutgoingCallsResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallHierarchyOutgoingCallsResponse_PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCapabilities_Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCapabilities_Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeResponse_ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerCapabilities_Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceSymbolClientCapabilities_SymbolKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextDocumentContentChangeEvent_ContentChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishDiagnosticsClientCapabilities_TagSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionClientCapabilities_CompletionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionClientCapabilities_CompletionItemKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionClientCapabilities_CompletionItem_TagSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hover_MarkedStrings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkedString_CodeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelpClientCapabilities_SignatureInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureHelpClientCapabilities_SignatureInformation_ParameterInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterInformation_Offset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSymbolClientCapabilities_SymbolKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeActionClientCapabilities_CodeActionLiteralSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeActionClientCapabilities_CodeActionLiteralSupport_CodeActionKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormattingOptions_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_rpc_rpc_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticTokensClientCapabilities_Requests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_rpc_rpc_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ShowMessageResponse_MessageActionItem)(nil),
		(*ShowMessageResponse_Empty)(nil),
		(*ShowMessageResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*WorkspaceFoldersResponse_WorkspaceFolders_)(nil),
		(*WorkspaceFoldersResponse_Empty)(nil),
		(*WorkspaceFoldersResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ConfigurationResponse_Anys_)(nil),
		(*ConfigurationResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*WorkspaceSymbolsResponse_SymbolInformations_)(nil),
		(*WorkspaceSymbolsResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ExecuteCommandResponse_Any)(nil),
		(*ExecuteCommandResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*WillSaveTextDocumentResponse_TextEdits)(nil),
		(*WillSaveTextDocumentResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*CompletionResponse_CompletionItems)(nil),
		(*CompletionResponse_CompletionList)(nil),
		(*CompletionResponse_Empty)(nil),
		(*CompletionResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*HoverResponse_Hover)(nil),
		(*HoverResponse_Empty)(nil),
		(*HoverResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*CompletionItemResolveResponse_CompletionItems)(nil),
		(*CompletionItemResolveResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*SignatureHelpResponse_SignatureHelp)(nil),
		(*SignatureHelpResponse_Empty)(nil),
		(*SignatureHelpResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*DeclarationResponse_Result_)(nil),
		(*DeclarationResponse_PartialResult_)(nil),
		(*DeclarationResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*DefinitionResponse_Result_)(nil),
		(*DefinitionResponse_PartialResult_)(nil),
		(*DefinitionResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*TypeDefinitionResponse_Result_)(nil),
		(*TypeDefinitionResponse_PartialResult_)(nil),
		(*TypeDefinitionResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*ImplementationResponse_Result_)(nil),
		(*ImplementationResponse_PartialResult_)(nil),
		(*ImplementationResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*ReferenceResponse_Result_)(nil),
		(*ReferenceResponse_PartialResult_)(nil),
		(*ReferenceResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*DocumentHighlightsResponse_Result_)(nil),
		(*DocumentHighlightsResponse_PartialResult_)(nil),
		(*DocumentHighlightsResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*DocumentSymbolResponse_Result_)(nil),
		(*DocumentSymbolResponse_PartialResult_)(nil),
		(*DocumentSymbolResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*CodeActionResponse_Result_)(nil),
		(*CodeActionResponse_PartialResult_)(nil),
		(*CodeActionResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*CodeLensResponse_Result_)(nil),
		(*CodeLensResponse_PartialResult_)(nil),
		(*CodeLensResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*CodeLensResolveResponse_CodeLens)(nil),
		(*CodeLensResolveResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*DocumentLinkResponse_Result_)(nil),
		(*DocumentLinkResponse_PartialResult_)(nil),
		(*DocumentLinkResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*DocumentLinkResolveResponse_DocumentLink)(nil),
		(*DocumentLinkResolveResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*DocumentColorResponse_Result_)(nil),
		(*DocumentColorResponse_PartialResult_)(nil),
		(*DocumentColorResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*ColorPresentationResponse_Result_)(nil),
		(*ColorPresentationResponse_PartialResult_)(nil),
		(*ColorPresentationResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*DocumentFormattingResponse_TextEdit)(nil),
		(*DocumentFormattingResponse_Empty)(nil),
		(*DocumentFormattingResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*DocumentRangeFormattingResponse_TextEdit)(nil),
		(*DocumentRangeFormattingResponse_Empty)(nil),
		(*DocumentRangeFormattingResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*DocumentOnTypeFormattingResponse_TextEdit)(nil),
		(*DocumentOnTypeFormattingResponse_Empty)(nil),
		(*DocumentOnTypeFormattingResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*RenameResponse_WorkspaceEdit)(nil),
		(*RenameResponse_Empty)(nil),
		(*RenameResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*PrepareRenameResponse_Range)(nil),
		(*PrepareRenameResponse_Result_)(nil),
		(*PrepareRenameResponse_Empty)(nil),
		(*PrepareRenameResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*FoldingRangeResponse_Result_)(nil),
		(*FoldingRangeResponse_PartialResult_)(nil),
		(*FoldingRangeResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*SelectionRangeResponse_Result_)(nil),
		(*SelectionRangeResponse_PartialResult_)(nil),
		(*SelectionRangeResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*CallHierarchyPrepareResponse_Result_)(nil),
		(*CallHierarchyPrepareResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*CallHierarchyIncomingCallsResponse_Result_)(nil),
		(*CallHierarchyIncomingCallsResponse_PartialResult_)(nil),
		(*CallHierarchyIncomingCallsResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*CallHierarchyOutgoingCallsResponse_Result_)(nil),
		(*CallHierarchyOutgoingCallsResponse_PartialResult_)(nil),
		(*CallHierarchyOutgoingCallsResponse_Error)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*ServerCapabilities_TextDocumentSyncOptions)(nil),
		(*ServerCapabilities_TextDocumentSyncKind)(nil),
		(*ServerCapabilities_EnableHoverProvider)(nil),
		(*ServerCapabilities_HoverOptions)(nil),
		(*ServerCapabilities_EnableDeclarationProvider)(nil),
		(*ServerCapabilities_DeclarationOptions)(nil),
		(*ServerCapabilities_DeclarationRegistrationOptions)(nil),
		(*ServerCapabilities_EnableDefinitionProvider)(nil),
		(*ServerCapabilities_DefinitionOptions)(nil),
		(*ServerCapabilities_EnableTypeDefinitionProvider)(nil),
		(*ServerCapabilities_TypeDefinitionOptions)(nil),
		(*ServerCapabilities_TypeDefinitionRegistrationOptions)(nil),
		(*ServerCapabilities_EnableImplementationProvider)(nil),
		(*ServerCapabilities_ImplementationOptions)(nil),
		(*ServerCapabilities_ImplementationRegistrationOptions)(nil),
		(*ServerCapabilities_EnableReferencesProvider)(nil),
		(*ServerCapabilities_ReferenceOptions)(nil),
		(*ServerCapabilities_EnableDocumentHighlightProvider)(nil),
		(*ServerCapabilities_DocumentHighlightOptions)(nil),
		(*ServerCapabilities_EnableDocumentSymbolProvider)(nil),
		(*ServerCapabilities_DocumentSymbolOptions)(nil),
		(*ServerCapabilities_EnableCodeActionProvider)(nil),
		(*ServerCapabilities_CodeActionOptions)(nil),
		(*ServerCapabilities_EnableColorProvider)(nil),
		(*ServerCapabilities_DocumentColorOptions)(nil),
		(*ServerCapabilities_DocumentColorRegistrationOptions)(nil),
		(*ServerCapabilities_EnableDocumentFormattingProvider)(nil),
		(*ServerCapabilities_DocumentFormattingOptions)(nil),
		(*ServerCapabilities_EnableDocumentRangeFormattingProvider)(nil),
		(*ServerCapabilities_DocumentRangeFormattingOptions)(nil),
		(*ServerCapabilities_EnableRenameProvider)(nil),
		(*ServerCapabilities_RenameOptions)(nil),
		(*ServerCapabilities_EnableFoldingRangeProvider)(nil),
		(*ServerCapabilities_FoldingRangeOptions)(nil),
		(*ServerCapabilities_FoldingRangeRegistrationOptions)(nil),
		(*ServerCapabilities_EnableSelectionRangeProvider)(nil),
		(*ServerCapabilities_SelectionRangeOptions)(nil),
		(*ServerCapabilities_SelectionRangeRegistrationOptions)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[67].OneofWrappers = []interface{}{
		(*WorkspaceFoldersServerCapabilities_Id)(nil),
		(*WorkspaceFoldersServerCapabilities_Enable)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[88].OneofWrappers = []interface{}{
		(*TextDocumentSyncOptions_Enable)(nil),
		(*TextDocumentSyncOptions_SaveOptions)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*TextDocumentContentChangeEvent_ContentChangeEvent_)(nil),
		(*TextDocumentContentChangeEvent_Text)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[107].OneofWrappers = []interface{}{
		(*CompletionItem_MarkupContent)(nil),
		(*CompletionItem_Content)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[112].OneofWrappers = []interface{}{
		(*Hover_MarkedString)(nil),
		(*Hover_MarkedStrings_)(nil),
		(*Hover_MarkupContent)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[113].OneofWrappers = []interface{}{
		(*MarkedString_Text)(nil),
		(*MarkedString_CodeBlock_)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[120].OneofWrappers = []interface{}{
		(*SignatureInformation_Markup)(nil),
		(*SignatureInformation_MarkupContent)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[121].OneofWrappers = []interface{}{
		(*ParameterInformation_Name)(nil),
		(*ParameterInformation_Offset_)(nil),
		(*ParameterInformation_Markup)(nil),
		(*ParameterInformation_MarkupContent)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[217].OneofWrappers = []interface{}{
		(*SemanticTokensOptions_EnableRange)(nil),
		(*SemanticTokensOptions_Empty)(nil),
		(*SemanticTokensOptions_EnableFull)(nil),
		(*SemanticTokensOptions_Delta)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[282].OneofWrappers = []interface{}{
		(*FormattingOptions_Value_Enable)(nil),
		(*FormattingOptions_Value_Number)(nil),
		(*FormattingOptions_Value_Name)(nil),
	}
	file_protocol_rpc_rpc_proto_msgTypes[284].OneofWrappers = []interface{}{
		(*SemanticTokensClientCapabilities_Requests_EnableRange)(nil),
		(*SemanticTokensClientCapabilities_Requests_Empty)(nil),
		(*SemanticTokensClientCapabilities_Requests_EnableFull)(nil),
		(*SemanticTokensClientCapabilities_Requests_Delta)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_rpc_rpc_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   285,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocol_rpc_rpc_proto_goTypes,
		DependencyIndexes: file_protocol_rpc_rpc_proto_depIdxs,
		EnumInfos:         file_protocol_rpc_rpc_proto_enumTypes,
		MessageInfos:      file_protocol_rpc_rpc_proto_msgTypes,
	}.Build()
	File_protocol_rpc_rpc_proto = out.File
	file_protocol_rpc_rpc_proto_rawDesc = nil
	file_protocol_rpc_rpc_proto_goTypes = nil
	file_protocol_rpc_rpc_proto_depIdxs = nil
}
