{
  "swagger": "2.0",
  "info": {
    "title": "protocol/rpc/rpc.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/$/cancelRequest/*:cancel": {
      "post": {
        "summary": "Cancel notification is the base protocol offers support for request cancellation. To cancel a\nrequest, a CancelRequest notification message is sent.",
        "description": "A request that got canceled still needs to return from the server and send a response back. It\ncan not be left open / hanging. This is in line with the JSON RPC protocol that requires that\nevery request sends a response back. In addition it allows for returning partial results on\ncancel. If the request returns an error response on cancellation it is advised to set the error\ncode to [Codes.RequestCancelled][protocol.Codes].",
        "operationId": "Cancel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcCancelRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/$/logTrace/*:logTrace": {
      "post": {
        "summary": "LogTrace notification to log the trace of the server’s execution.",
        "description": "The amount and content of these notifications depends on the current `trace` configuration.\nIf `trace` is `'off'`, the server should not send any `logTrace` notification. If `trace` is\n`'message'`, the server should not add the `'verbose'` field in the logTraceRequest.\n\n`$/logTrace` should be used for systematic trace reporting. For single debugging messages, the\nserver should send window/logMessage notifications.",
        "operationId": "LogTrace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcLogTraceRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/$/progress/*:progress": {
      "post": {
        "summary": "Progress notification is the base protocol offers also support to report progress in a generic\nfashion. This mechanism can be used to report any kind of progress including work done progress\n(usually used to report progress in the user interface using a progress bar) and partial result\nprogress to support streaming of results.",
        "description": "Progress is reported against a token. The token is different than the request ID which allows\nto report progress out of band and also for notification.\n\n@since 3.15.0",
        "operationId": "Progress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcProgressRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/$/setTrace:setTrace": {
      "post": {
        "summary": "SetTrace notification that should be used by the client to modify the trace setting of the\nserver.",
        "description": "(-- api-linter: core::0134::synonyms=disabled\n    api-linter: core::0136::http-method=disabled --)",
        "operationId": "SetTrace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcSetTraceRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/callHierarchy/incomingCalls:callHierarchyIncomingCalls": {
      "post": {
        "summary": "CallHierarchyIncomingCalls request is sent from the client to the server to resolve incoming\ncalls for a given call hierarchy item.",
        "description": "The request doesn’t define its own client and server capabilities. It is only issued if a\nserver registers for the `textDocument/prepareCallHierarchy` request.\n\n@since 3.16.0",
        "operationId": "CallHierarchyIncomingCalls",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcCallHierarchyIncomingCallsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcCallHierarchyIncomingCallsRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/callHierarchy/outgoingCalls:callHierarchyOutgoingCalls": {
      "post": {
        "summary": "CallHierarchyOutgoingCalls is the request is sent from the client to the server to resolve\noutgoing calls for a given call hierarchy item.",
        "description": "The request doesn’t define its own client and server capabilities. It is only issued if a\nserver registers for the textDocument/prepareCallHierarchy request.\n\n@since 3.16.0",
        "operationId": "CallHierarchyOutgoingCalls",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcCallHierarchyOutgoingCallsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcCallHierarchyOutgoingCallsRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/codeLens/resolve:codeLensResolve": {
      "post": {
        "summary": "CodeLensResolve request is the code lens resolve request is sent from the client to the server\nto resolve the command for a given code lens item.",
        "operationId": "CodeLensResolve",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcCodeLensResolveResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcCodeLensResolveRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/completionItem/resolve:completionItemResolve": {
      "post": {
        "summary": "CompletionItemResolve request is the request is sent from the client to the server to resolve\nadditional information for a given completion item.",
        "operationId": "CompletionItemResolve",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcCompletionItemResolveResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcCompletionItemResolveRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/documentLink/resolve:documentLinkResolve": {
      "post": {
        "summary": "DocumentLinkResolve request is the document link resolve request is sent from the client to the\nserver to resolve the target of a given document link.",
        "operationId": "DocumentLinkResolve",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDocumentLinkResolveResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDocumentLinkResolveRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/exit/*:exit": {
      "post": {
        "summary": "Exit notification to ask the server to exit its process.",
        "description": "The server should exit with `success` code 0 if the shutdown request has been received before;\notherwise with `error` code 1.",
        "operationId": "Exit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "properties": {}
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/initialize/*:initialize": {
      "post": {
        "summary": "Initialize request is sent as the first request from the client to the server. If the server\nreceives a request or notification before the initialize request it should act as follows:",
        "description": "- For a request the response should be an error with `code: -32002`. The message can be picked\nby the server.\n- Notifications should be dropped, except for the exit notification. This will allow the exit\nof a server without an initialize request.\n\nUntil the server has responded to the `initialize` request with an `InitializeResponse`, the\nclient must not send any additional requests or notifications to the server. In addition the\nserver is not allowed to send any requests or notifications to the client until it has\nresponded with an `InitializeResponse`, with the exception that during the initialize request\nthe server is allowed to send the notifications `window/showMessage`, `window/logMessage` and\n`telemetry/event` as well as the `window/showMessageRequest` request to the client. In case the\nclient sets up a progress token in the initialize params (e.g. property `workDoneToken`) the\nserver is also allowed to use that token (and only that token) using the `$/progress`\nnotification sent from the server to the client.\n\nThe initialize request may only be sent once.",
        "operationId": "Initialize",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcInitializeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcInitializeRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/initialized/*:initialized": {
      "post": {
        "summary": "Initialized notification is sent from the client to the server after the client received the\nresult of the `initialize` request but before the client is sending any other request or\nnotification to the server.",
        "description": "The server can use the `initialized` notification for example to dynamically register\ncapabilities.\n\nThe `initialized` notification may only be sent once.",
        "operationId": "Initialized",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcInitializedRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/shutdown/*:shutdown": {
      "post": {
        "summary": "Shutdown request is sent from the client to the server.",
        "description": "It asks the server to shut down, but to not exit (otherwise the response might not be delivered\ncorrectly to the client). There is a separate exit notification that asks the server to exit.\n\nClients must not send any notifications other than exit or requests to a server to which they\nhave sent a shutdown request.\n\nIf a server receives requests after a shutdown request those requests should error with\n`InvalidRequest`.",
        "operationId": "Shutdown",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "properties": {}
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/telemetry/event:telemetry": {
      "post": {
        "summary": "Telemetry notification is the telemetry notification is sent from the server to the client to\nask the client to log a telemetry event.",
        "operationId": "Telemetry",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protobufAny"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/Completion:completion": {
      "post": {
        "summary": "Completion request is the Completion request is sent from the client to the server to compute\ncompletion items at a given cursor position.",
        "description": "Completion items are presented in the IntelliSense user interface. If computing full completion\nitems is expensive, servers can additionally provide a handler for the completion item resolve\nrequest (‘completionItem/resolve’).\n\nThis request is sent when a completion item is selected in the user interface. A typical use\ncase is for example: the `textDocument/completion` request doesn’t fill in the documentation\nproperty for returned completion items since it is expensive to compute. When the item is\nselected in the user interface then a `completionItem/resolve` request is sent with the\nselected completion item as a parameter.\n\nThe returned completion item should have the documentation property filled in. The request can\nonly delay the computation of the `detail` and `documentation` properties. Other properties\nlike `sortText`, `filterText`, `insertText`, `textEdit` and `additionalTextEdits` must be\nprovided in the `textDocument/completion` response and must not be changed during resolve.",
        "operationId": "Completion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcCompletionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcCompletionRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/codeAction:codeAction": {
      "post": {
        "summary": "CodeAction request is the code action request is sent from the client to the server to compute\ncommands for a given text document and range.",
        "description": "These commands are typically code fixes to either fix problems or to beautify/refactor code.\n\nThe result of a `textDocument/codeAction` request is an array of `Command` literals which are\ntypically presented in the user interface. To ensure that a server is useful in many clients\nthe commands specified in a code actions should be handled by the server and not by the client\n(see `workspace/executeCommand` and `ServerCapabilities.executeCommandProvider`). If the client\nsupports providing edits with a code action then the mode should be used.\n\nWhen the command is selected the server should be contacted again (via the\n`workspace/executeCommand`) request to execute the command.\n\nSince version 3.8.0: support for CodeAction literals to enable the following scenarios:\n\n- the ability to directly return a workspace edit from the code action request. This avoids\nhaving another server roundtrip to execute an actual code action. However server providers\nshould be aware that if the code action is expensive to compute or the edits are huge it might\nstill be beneficial if the result is simply a command and the actual edit is only computed when\nneeded.\n\n- the ability to group code actions using a kind. Clients are allowed to ignore that\ninformation. However it allows them to better group code action for example into corresponding\nmenus (e.g. all refactor code actions into a refactor menu).\n\nClients need to announce their support for code action literals (e.g. literals of type\n`CodeAction`) and code action kinds via the corresponding client capability\n`codeAction.codeActionLiteralSupport`.",
        "operationId": "CodeAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcCodeActionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcCodeActionRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/codeLens:codeLens": {
      "post": {
        "summary": "CodeLens request is the code lens request is sent from the client to the server to compute code\nlenses for a given text document.",
        "operationId": "CodeLens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcCodeLensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcCodeLensRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/colorPresentation:colorPresentation": {
      "post": {
        "summary": "ColorPresentation request is the color presentation request is sent from the client to the\nserver to obtain a list of presentations for a color value at a given location. Clients can use\nthe result to",
        "description": "- modify a color reference.\n- show in a color picker and let users pick one of the presentations\n\nThis request has no special capabilities and registration options since it is send as a resolve\nrequest for the `textDocument/documentColor` request.\n\n@since 3.6.0",
        "operationId": "ColorPresentation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcColorPresentationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcColorPresentationRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/declaration:declaration": {
      "post": {
        "summary": "GotoDeclaration request is the go to declaration request is sent from the client to the server\nto resolve the declaration location of a symbol at a given text document position.",
        "description": "The result type [LocationLinks][LocationLinks] got introduced with version 3.14.0 and depends\non the corresponding client capability `textDocument.declaration.linkSupport`.\n\n@since 3.14.0",
        "operationId": "GotoDeclaration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDeclarationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDeclarationRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/definition:definition": {
      "post": {
        "summary": "GotoTypeDefinition request is the go to type definition request is sent from the client to the\nserver to resolve the type definition location of a symbol at a given text document position.",
        "description": "The result type [LocationLinks][LocationLinks] got introduced with version 3.14.0 and depends\non the corresponding client capability `textDocument.typeDefinition.linkSupport`.\n\n@since 3.6.0",
        "operationId": "GotoTypeDefinition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcTypeDefinitionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcTypeDefinitionRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/didChange:didChangeTextDocument": {
      "post": {
        "summary": "DidChangeTextDocument notification is the document change notification is sent from the client\nto the server to signal changes to a text document.",
        "description": "Before a client can change a text document it must claim ownership of its content using the\ntextDocument/didOpen notification.\n\nIn 2.0 the shape of the params has changed to include proper version numbers and language ids.",
        "operationId": "DidChangeTextDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDidChangeTextDocumentRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/didClose:didCloseTextDocument": {
      "post": {
        "summary": "DidCloseTextDocument notification is the document close notification is sent from the client to\nthe server when the document got closed in the client.",
        "description": "The document’s master now exists where the document’s Uri points to (e.g. if the document’s Uri\nis a file Uri the master now exists on disk). As with the open notification the close\nnotification is about managing the document’s content.\n\nReceiving a close notification doesn’t mean that the document was open in an editor before. A\nclose notification requires a previous open notification to be sent. Note that a server’s\nability to fulfill requests is independent of whether a text document is open or closed.",
        "operationId": "DidCloseTextDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDidCloseTextDocumentRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/didOpen:didOpenTextDocument": {
      "post": {
        "summary": "DidOpenTextDocument notification is the `DidOpenTextDocumentRequest` contain the language id\nthe document is associated with.",
        "description": "If the language Id of a document changes, the client needs to send a `textDocument/didClose` to\nthe server followed by a `textDocument/didOpen` with the new language id if the server handles\nthe new language id as well.",
        "operationId": "DidOpenTextDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDidOpenTextDocumentRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/didSave:didSaveTextDocument": {
      "post": {
        "summary": "DidSaveTextDocument notification is the document save notification is sent from the client to\nthe server when the document was saved in the client.",
        "operationId": "DidSaveTextDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDidSaveTextDocumentRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/documentColor:documentColor": {
      "post": {
        "summary": "DocumentColor request is the document color request is sent from the client to the server to\nlist all color references found in a given text document. Along with the range, a color value\nin RGB is returned.",
        "description": "Clients can use the result to decorate color references in an editor. For example:\n\n- Color boxes showing the actual color next to the reference\n\n- Show a color picker when a color reference is edited\n\n@since 3.6.0",
        "operationId": "DocumentColor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDocumentColorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDocumentColorRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/documentHighlight:documentHighlight": {
      "post": {
        "summary": "DocumentHighlights request is the document highlight request is sent from the client to the\nserver to resolve a document highlights for a given text document position.",
        "description": "For programming languages this usually highlights all references to the symbol scoped to this\nfile. However we kept `textDocument/documentHighlight` and `textDocument/references` separate\nrequests since the first one is allowed to be more fuzzy.\n\nSymbol matches usually have a DocumentHighlightKind of `Read` or `Write` whereas fuzzy or\ntextual matches use `Text` as the kind.",
        "operationId": "DocumentHighlights",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDocumentHighlightsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDocumentHighlightRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/documentLink:documentLink": {
      "post": {
        "summary": "DocumentLink request is the document links request is sent from the client to the server to\nrequest the location of links in a document.",
        "operationId": "DocumentLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDocumentLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDocumentLinkRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/documentSymbol:documentSymbol": {
      "post": {
        "summary": "DocumentSymbols request is the document symbol request is sent from the client to the server.",
        "description": "The returned result is either\n\n- SymbolInformation[] which is a flat list of all symbols found in a given text document. Then\nneither the symbol’s location range nor the symbol’s container name should be used to infer a\nhierarchy.\n\n- DocumentSymbol[] which is a hierarchy of symbols found in a given text document.",
        "operationId": "DocumentSymbols",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDocumentSymbolResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDocumentSymbolRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/foldingRange:foldingRange": {
      "post": {
        "summary": "FoldingRange request is the folding range request is sent from the client to the server to\nreturn all folding ranges found in a given text document.",
        "description": "@since 3.10.0",
        "operationId": "FoldingRange",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcFoldingRangeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcFoldingRangeRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/formatting:formatting": {
      "post": {
        "summary": "DocumentFormatting request is the document formatting request is sent from the client to the\nserver to format a whole document.",
        "operationId": "DocumentFormatting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDocumentFormattingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDocumentFormattingRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/hover:hover": {
      "post": {
        "summary": "Hover Request is the hover request is sent from the client to the server to request hover\ninformation at a given text document position.",
        "operationId": "Hover",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcHoverResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcHoverRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/implementation:implementation": {
      "post": {
        "summary": "GotoImplementation request is the go to implementation request is sent from the client to the\nserver to resolve the implementation location of a symbol at a given text document position.",
        "description": "The result type [LocationLinks][LocationLinks] got introduced with version 3.14.0 and depends\non the corresponding client capability `textDocument.implementation.linkSupport`.\n\n@since 3.6.0",
        "operationId": "GotoImplementation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcImplementationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcImplementationRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/onTypeFormatting:onTypeFormatting": {
      "post": {
        "summary": "OnTypeFormatting request is the document on type formatting request is sent from the client to\nthe server to format parts of the document during typing.",
        "operationId": "OnTypeFormatting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDocumentOnTypeFormattingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDocumentOnTypeFormattingRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/prepareCallHierarchy:prepareCallHierarchy": {
      "post": {
        "summary": "PrepareCallHierarchy request is the call hierarchy request is sent from the client to the\nserver to return a call hierarchy for the language element of given text document positions.",
        "description": "The call hierarchy requests are executed in two steps:\n\n- first a call hierarchy item is resolved for the given text document position\n\n- for a call hierarchy item the incoming or outgoing call hierarchy items are resolved.\n\n@since 3.16.0",
        "operationId": "PrepareCallHierarchy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcCallHierarchyPrepareResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcCallHierarchyPrepareRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/prepareRename:prepareRename": {
      "post": {
        "summary": "PrepareRename request is the prepare rename request is sent from the client to the server to\nsetup and test the validity of a rename operation at a given location.",
        "description": "@since 3.12.0",
        "operationId": "PrepareRename",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcPrepareRenameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcPrepareRenameRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/publishDiagnostics:publishDiagnostics": {
      "post": {
        "summary": "PublishDiagnostics notification is the diagnostics notification are sent from the server to the\nclient to signal results of validation runs.",
        "operationId": "PublishDiagnostics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcPublishDiagnosticsRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/rangeFormatting:rangeFormatting": {
      "post": {
        "summary": "DocumentRangeFormatting Request is the document range formatting request is sent from the\nclient to the server to format a given range in a document.",
        "operationId": "DocumentRangeFormatting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcDocumentRangeFormattingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDocumentRangeFormattingRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/references:references": {
      "post": {
        "summary": "FindReferences request is the references request is sent from the client to the server to\nresolve project-wide references for the symbol denoted by the given text document position.",
        "operationId": "FindReferences",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcReferenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcReferenceRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/rename:rename": {
      "post": {
        "summary": "Rename request is the rename request is sent from the client to the server to ask the server to\ncompute a workspace change so that the client can perform a workspace-wide rename of a symbol.",
        "operationId": "Rename",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcRenameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcRenameRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/selectionRange:selectionRange": {
      "post": {
        "summary": "SelectionRange request is the selection range request is sent from the client to the server to\nreturn suggested selection ranges at an array of given positions.",
        "description": "A selection range is a range around the cursor position which the user might be interested in\nselecting. A selection range in the return array is for the position in the provided parameters\nat the same index. Therefore positions[i] must be contained in result[i].range.\n\nTypically, but not necessary, selection ranges correspond to the nodes of the syntax tree.\n\n@since 3.15.0",
        "operationId": "SelectionRange",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcSelectionRangeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcSelectionRangeRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/signatureHelp:signatureHelp": {
      "post": {
        "summary": "SignatureHelp request is the signature help request is sent from the client to the server to\nrequest signature information at a given cursor position.",
        "operationId": "SignatureHelp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcSignatureHelpResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcSignatureHelpRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/willSave:willSaveTextDocument": {
      "post": {
        "summary": "WillSaveTextDocument notification is the document will save notification is sent from the\nclient to the server before the document is actually saved.",
        "operationId": "WillSaveTextDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcWillSaveTextDocumentRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/textDocument/willSaveWaitUntil:willSaveWaitUntilTextDocument": {
      "post": {
        "summary": "WillSaveWaitUntilTextDocument request is the document will save request is sent from the client\nto the server before the document is actually saved.",
        "description": "The request can return an array of TextEdits which will be applied to the text document before\nit is saved.\n\nPlease note that clients might drop results if computing the text edits took too long or if a\nserver constantly fails on this request. This is done to keep the save fast and reliable.",
        "operationId": "WillSaveWaitUntilTextDocument",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcWillSaveTextDocumentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcWillSaveTextDocumentRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/window/logMessage:logMessage": {
      "post": {
        "summary": "LogMessage notification is the log message notification is sent from the server to the client\nto ask the client to log a particular message.",
        "operationId": "LogMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcLogMessageRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/window/showMessage:showMessage": {
      "post": {
        "summary": "ShowMessage notification is the show message notification is sent from a server to a client to\nask the client to display a particular message in the user interface.",
        "operationId": "ShowMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcShowMessageRequestParams"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/window/showMessageRequest:showMessageRequest": {
      "post": {
        "summary": "ShowMessageRequest request is the show message request is sent from a server to a client to ask\nthe client to display a particular message in the user interface. In addition to the show\nmessage notification the request allows to pass actions and to wait for an answer from the\nclient.",
        "operationId": "ShowMessageRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcShowMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcShowMessageRequestRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/window/workDoneProgress/cancel:cancelWorkDoneProgress": {
      "post": {
        "summary": "CancelWorkDoneProgress is the `window/workDoneProgress/cancel` notification is sent from the\nclient to the server to cancel a progress initiated on the server side using the\n`window/workDoneProgress/create`.",
        "operationId": "CancelWorkDoneProgress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcWorkDoneProgressCancelRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/window/workDoneProgress/create:createWorkDoneProgress": {
      "post": {
        "summary": "CreateWorkDoneProgress is the `window/workDoneProgress/create` request is sent from the server\nto the client to ask the client to create a work done progress.",
        "description": "(-- api-linter: core::0133::http-uri-parent=disabled\n    api-linter: core::0133::http-body=disabled\n    api-linter: core::0133::request-message-name=disabled\n    api-linter: core::0133::response-message-name=disabled --)",
        "operationId": "CreateWorkDoneProgress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolError"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcWorkDoneProgressCreateRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/workspace/applyEdit:applyEdit": {
      "post": {
        "summary": "ApplyEdit request is sent from the server to the client to modify resource on the client side.",
        "operationId": "ApplyEdit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcApplyWorkspaceEditResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcApplyWorkspaceEditRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/workspace/configuration:configuration": {
      "post": {
        "summary": "Configuration request is the `workspace/configuration` request is sent from the server to the\nclient to fetch configuration settings from the client.",
        "description": "The request can fetch several configuration settings in one roundtrip. The order of the\nreturned configuration settings correspond to the order of the passed `ConfigurationItems`\n(e.g. the first item in the response is the result for the first configuration item in the\nparams).\n\n@since 3.6.0",
        "operationId": "Configuration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcConfigurationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcConfigurationRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/workspace/didChangeConfiguration:didChangeConfiguration": {
      "post": {
        "summary": "DidChangeConfiguration a notification sent from the client to the server to signal the change\nof configuration settings.",
        "operationId": "DidChangeConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDidChangeConfigurationRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/workspace/didChangeWatchedFiles:didChangeWatchedFiles": {
      "post": {
        "summary": "DidChangeWatchedFiles notification is the watched files notification is sent from the client to\nthe server when the client detects changes to files watched by the language client.",
        "description": "It is recommended that servers register for these file events using the registration mechanism.\nIn former implementations clients pushed file events without the server actively asking for it.",
        "operationId": "DidChangeWatchedFiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDidChangeWatchedFilesRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/workspace/didChangeWorkspaceFolders:didChangeWorkspaceFolders": {
      "post": {
        "summary": "DidChangeWorkspaceFolders notification is the `workspace/didChangeWorkspaceFolders`\nnotification is sent from the client to the server to inform the server about workspace folder\nconfiguration changes.",
        "description": "The notification is sent by default if both client capability `workspace.workspaceFolders` and\nthe server capability `workspace.workspaceFolders.supported` are true; or if the server has\nregistered itself to receive this notification. To register for the\n`workspace/didChangeWorkspaceFolders` send a client/registerCapability request from the server\nto the client. The `registration` parameter must have a registrations item of the following\nform, where id is a unique id used to unregister the capability (the example uses a UUID):\n\n@since 3.6.0",
        "operationId": "DidChangeWorkspaceFolders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcDidChangeWorkspaceFoldersRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/workspace/executeCommand:executeCommand": {
      "post": {
        "summary": "ExecuteCommand is the `workspace/executeCommand` request is sent from the client to the server\nto trigger command execution on the server.",
        "description": "In most cases the server creates a `WorkspaceEdit` structure and applies the changes to the\nworkspace using the request `workspace/applyEdit` which is sent from the server to the client.",
        "operationId": "ExecuteCommand",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcExecuteCommandResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcExecuteCommandParams"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/workspace/symbols:workspaceSymbols": {
      "post": {
        "summary": "WorkspaceSymbols request is the workspace symbol request is sent from the client to the server\nto list project-wide symbols matching the query string.",
        "description": "(-- api-linter: core::0136::http-uri-suffix=disabled --)",
        "operationId": "WorkspaceSymbols",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcWorkspaceSymbolsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rpcConfigurationRequest"
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    },
    "/workspace/workspaceFolders:workspaceFolders": {
      "post": {
        "summary": "WorkspaceFolders request is the workspace/workspaceFolders request is sent from the server to\nthe client to fetch the current open list of workspace folders.",
        "description": "Returns null in the response if only a single file is open in the tool. Returns an empty array\nif a workspace is open but no folders are configured.\n\n@since 3.6.0",
        "operationId": "WorkspaceFolders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rpcWorkspaceFoldersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "properties": {}
            }
          }
        ],
        "tags": [
          "protocol.rpc.LanguageServerProtocol"
        ]
      }
    }
  },
  "definitions": {
    "ClientCapabilitiesWindow": {
      "type": "object",
      "properties": {
        "workDoneProgress": {
          "type": "boolean",
          "description": "Optional. Whether client supports handling progress notifications. If set servers are allowed\nto report in `workDoneProgress` property in the request specific server capabilities.\n\n@since 3.15.0"
        }
      },
      "description": "Window specific client capabilities."
    },
    "CodeActionClientCapabilitiesCodeActionLiteralSupport": {
      "type": "object",
      "properties": {
        "codeActionKind": {
          "$ref": "#/definitions/CodeActionClientCapabilitiesCodeActionLiteralSupportCodeActionKind",
          "description": "The code action kind is supported with the following value\nset."
        }
      }
    },
    "CodeActionClientCapabilitiesCodeActionLiteralSupportCodeActionKind": {
      "type": "object",
      "properties": {
        "valueSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeActionClientCapabilitiesCodeActionLiteralSupportCodeActionKind"
          },
          "description": "The code action kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown."
        }
      }
    },
    "CompletionClientCapabilitiesCompletionItemTagSupport": {
      "type": "object",
      "properties": {
        "valueSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCompletionItemTag"
          },
          "description": "The tags supported by the client."
        }
      }
    },
    "ConfigurationResponseAnys": {
      "type": "object",
      "properties": {
        "anys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "DocumentHighlightDocumentHighlightKind": {
      "type": "string",
      "enum": [
        "DOCUMENT_HIGHLIGHT_KIND_UNSPECIFIED",
        "TEXT",
        "READ",
        "WRITE"
      ],
      "default": "DOCUMENT_HIGHLIGHT_KIND_UNSPECIFIED",
      "description": "DocumentHighlightKind is a document highlight kind.\n\n - DOCUMENT_HIGHLIGHT_KIND_UNSPECIFIED: Conventional default for enums. Do not use this.\n - TEXT: A textual occurrence.\n - READ: Read-access of a symbol, like reading a variable.\n - WRITE: Write-access of a symbol, like writing to a variable."
    },
    "FileEventFileChangeType": {
      "type": "string",
      "enum": [
        "FILE_CHANGE_TYPE_UNSPECIFIED",
        "CREATED",
        "CHANGED",
        "DELETED"
      ],
      "default": "FILE_CHANGE_TYPE_UNSPECIFIED",
      "description": "FileChangeType is the file event type.\n\n - FILE_CHANGE_TYPE_UNSPECIFIED: Conventional default for enums. Do not use this.\n - CREATED: The file got created.\n - CHANGED: The file got changed.\n - DELETED: The file got deleted."
    },
    "HoverMarkedStrings": {
      "type": "object",
      "properties": {
        "markedString": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcMarkedString"
          }
        }
      }
    },
    "InitializeRequestClientInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the client as defined by the client."
        },
        "version": {
          "type": "string",
          "description": "Optional. The client's version as defined by the client."
        }
      },
      "title": "(-- api-linter: core::0140::abbreviations=disabled\n    api-linter: core::0123::resource-annotation=disabled --)"
    },
    "InitializeResponseServerInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the server as defined by the server."
        },
        "version": {
          "type": "string",
          "description": "Optional. The server's version as defined by the server."
        }
      },
      "description": "Information about the server.\n\n@since 3.15.0\n(-- api-linter: core::0123::resource-annotation=disabled --)"
    },
    "MarkedStringCodeBlock": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "title": "(-- api-linter: core::0143::standardized-codes=disabled --)"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ParameterInformationOffset": {
      "type": "object",
      "properties": {
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "end": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SignatureHelpClientCapabilitiesSignatureInformationParameterInformation": {
      "type": "object",
      "properties": {
        "labelOffsetSupport": {
          "type": "boolean",
          "description": "Optional. The client supports processing label offsets instead of a\nsimple label string.\n\n@since 3.14.0"
        }
      }
    },
    "SignatureHelpContextSignatureHelpTriggerKind": {
      "type": "string",
      "enum": [
        "SIGNATURE_HELP_TRIGGER_KIND_UNSPECIFIED",
        "INVOKED",
        "TRIGGER_CHARACTER",
        "CONTENT_CHANGE"
      ],
      "default": "SIGNATURE_HELP_TRIGGER_KIND_UNSPECIFIED",
      "description": "SignatureHelpTriggerKind how a signature help was triggered.\n\n@since 3.15.0\n\n - SIGNATURE_HELP_TRIGGER_KIND_UNSPECIFIED: Conventional default for enums. Do not use this.\n - INVOKED: Signature help was invoked manually by the user or by a command.\n - TRIGGER_CHARACTER: Signature help was triggered by a trigger character.\n - CONTENT_CHANGE: Signature help was triggered by the cursor moving or by the document content changing."
    },
    "TextDocumentContentChangeEventContentChangeEvent": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range of the document that changed."
        },
        "rangeLength": {
          "type": "integer",
          "format": "int32",
          "description": "The optional length of the range that got replaced.\n\nUse range instead."
        },
        "text": {
          "type": "string",
          "description": "The new text for the provided range."
        }
      }
    },
    "TextDocumentRegistrationOptionsDocumentSelector": {
      "type": "object",
      "properties": {
        "documentSelector": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolDocumentFilter"
          }
        }
      },
      "description": "DocumentSelector is a document selector is the combination of one or more document filters."
    },
    "WorkspaceEditCreateFiles": {
      "type": "object",
      "properties": {
        "createFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolCreateFile"
          }
        }
      }
    },
    "WorkspaceEditDeleteFiles": {
      "type": "object",
      "properties": {
        "deleteFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolDeleteFile"
          }
        }
      }
    },
    "WorkspaceEditRenameFiles": {
      "type": "object",
      "properties": {
        "renameFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolRenameFile"
          }
        }
      }
    },
    "WorkspaceEditTextDocumentEdits": {
      "type": "object",
      "properties": {
        "textDocumentEdits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolTextDocumentEdit"
          }
        }
      }
    },
    "WorkspaceFoldersResponseWorkspaceFolders": {
      "type": "object",
      "properties": {
        "workspaceFolders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcWorkspaceFolder"
          }
        }
      }
    },
    "WorkspaceSymbolsResponseSymbolInformations": {
      "type": "object",
      "properties": {
        "symbolInformations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcSymbolInformation"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protocolCommand": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title of the command, like `save`."
        },
        "command": {
          "type": "string",
          "description": "The identifier of the actual command handler."
        },
        "arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "title": "Arguments that the command handler should be\ninvoked with.\n(-- api-linter: core::0140::reserved-words=disabled --)"
        }
      },
      "description": "Command represents a reference to a command.\n\nProvides a title which will be used to represent a command in the UI. Commands are identified by\na string identifier. The recommended way to handle commands is to implement their execution on\nthe server side if the client and server provides the corresponding capabilities.\nAlternatively the tool extension code could handle the command.\n\nThe protocol currently doesn’t specify a set of well-known commands."
    },
    "protocolCreateFile": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "title": "The kind of CreateFile message.\n(-- api-linter: core::0192::only-leading-comments=disabled --)"
        },
        "uri": {
          "$ref": "#/definitions/uriURI",
          "description": "The resource to create."
        },
        "options": {
          "$ref": "#/definitions/protocolCreateFileOptions",
          "title": "Optional. Additional options"
        }
      },
      "description": "CreateFile create file operation."
    },
    "protocolCreateFileOptions": {
      "type": "object",
      "properties": {
        "overwrite": {
          "type": "boolean",
          "description": "Optional. Overwrite existing file. Overwrite wins over `ignoreIfExists`."
        },
        "ignoreIfExists": {
          "type": "boolean",
          "description": "Optional. Ignore if exists."
        }
      },
      "description": "CreateFileOptions is the options to create a file."
    },
    "protocolDeleteFile": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The kind of DeleteFile message.\n\nalways 'delete'"
        },
        "uri": {
          "$ref": "#/definitions/uriURI",
          "description": "The file to delete."
        },
        "options": {
          "$ref": "#/definitions/protocolDeleteFileOptions",
          "description": "Optional. Delete options."
        }
      },
      "description": "DeleteFile delete file operation."
    },
    "protocolDeleteFileOptions": {
      "type": "object",
      "properties": {
        "recursive": {
          "type": "boolean",
          "description": "Optional. Delete the content recursively if a folder is denoted."
        },
        "ignoreIfExists": {
          "type": "boolean",
          "description": "Optional. Ignore the operation if the file doesn't exist."
        }
      },
      "description": "DeleteFileOptions is the options to delete a file."
    },
    "protocolDiagnostic": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range at which the message applies."
        },
        "severity": {
          "$ref": "#/definitions/protocolDiagnosticSeverity",
          "description": "Optional. The diagnostic's severity. Can be omitted. If omitted it is up to the\nclient to interpret diagnostics as error, warning, info or hint."
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "Optional. The diagnostic's code, which might appear in the user interface."
        },
        "source": {
          "type": "string",
          "description": "Optional. A human-readable string describing the source of this\ndiagnostic, e.g. 'typescript' or 'super lint'."
        },
        "message": {
          "type": "string",
          "description": "The diagnostic's message."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolDiagnosticTag"
          },
          "description": "Optional. Additional metadata about the diagnostic.\n\n@since 3.15.0"
        },
        "relatedInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolDiagnosticRelatedInformation"
          },
          "title": "Optional. An array of related diagnostic information, e.g. when symbol-names within\na scope collide all definitions can be marked via this property.\n(-- api-linter: core::0140::abbreviations=disabled --)"
        }
      },
      "description": "Diagnostic represents a diagnostic, such as a compiler error or warning. Diagnostic objects are\nonly valid in the scope of a resource."
    },
    "protocolDiagnosticRelatedInformation": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/protocolLocation",
          "description": "The location of this related diagnostic information."
        },
        "message": {
          "type": "string",
          "description": "The message of this related diagnostic information."
        }
      },
      "description": "DiagnosticRelatedInformation represents a related message and source code location for a\ndiagnostic.\n\nThis should be used to point to code locations that cause or are related to a diagnostics,\ne.g when duplicating a symbol in a scope.\n(-- api-linter: core::0140::abbreviations=disabled --)"
    },
    "protocolDiagnosticSeverity": {
      "type": "string",
      "enum": [
        "DIAGNOSTIC_SEVERITY_UNSPECIFIED",
        "ERROR",
        "WARNING",
        "INFORMATION",
        "HINT"
      ],
      "default": "DIAGNOSTIC_SEVERITY_UNSPECIFIED",
      "description": "DiagnosticSeverity represents a diagnostic severity level.\n\n - DIAGNOSTIC_SEVERITY_UNSPECIFIED: Conventional default for enums. Do not use this.\n - ERROR: Reports an error.\n - WARNING: Reports a warning.\n - INFORMATION: Reports an information.\n(-- api-linter: core::0140::abbreviations=disabled --)\n - HINT: Reports a hint."
    },
    "protocolDiagnosticTag": {
      "type": "string",
      "enum": [
        "DIAGNOSTIC_TAG_UNSPECIFIED",
        "UNNECESSARY",
        "DEPRECATED"
      ],
      "default": "DIAGNOSTIC_TAG_UNSPECIFIED",
      "description": "DiagnosticTag is the diagnostic tags.\n\n@since 3.15.0\n\n - DIAGNOSTIC_TAG_UNSPECIFIED: Conventional default for enums. Do not use this.\n - UNNECESSARY: Unused or unnecessary code.\n\nClients are allowed to render diagnostics with this tag faded out instead of having\nan error squiggle.\n - DEPRECATED: Deprecated or obsolete code.\n\nClients are allowed to rendered diagnostics with this tag strike through."
    },
    "protocolDocumentFilter": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "description": "Optional. A language id, like `typescript`.\n\n(-- api-linter: core::0143::standardized-codes=disabled --)"
        },
        "scheme": {
          "type": "string",
          "description": "Optional. A URI [scheme](#uri.Scheme), like `file` or `untitled`."
        },
        "pattern": {
          "type": "string",
          "description": "Optional. A glob pattern, like `*.{ts,js}`.\n\nGlob patterns can have the following syntax:\n- `*` to match one or more characters in a path segment\n- `?` to match on one character in a path segment\n- `**` to match any number of path segments, including none\n- `{}` to group conditions (e.g. `**/*.{ts,js}` matches all TypeScript and JavaScript files)\n- `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to\nmatch on `example.0`, `example.1`, …)\n- `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]`\nto match on `example.a`, `example.b`, but not `example.0`)"
        }
      },
      "title": "DocumentFilter is a document filter denotes a document through properties like language, scheme\nor pattern. An example is a filter that applies to TypeScript files on disk. Another example is a\nfilter the applies to JSON files with name package.json:"
    },
    "protocolDocumentURI": {
      "type": "object",
      "properties": {
        "documentUri": {
          "type": "string"
        }
      },
      "description": "DocumentURI are transferred as strings. The URI’s format is defined in\nhttp://tools.ietf.org/html/rfc3986."
    },
    "protocolError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "A number indicating the error type that occurred.\n\nWhich may an enum value of [Code][#code]."
        },
        "message": {
          "type": "string",
          "description": "A string providing a short description of the error."
        },
        "data": {
          "type": "string",
          "description": "A primitive or structured value that contains additional\ninformation about the error. Can be omitted."
        }
      },
      "description": "Error represents a JSON-RPC error."
    },
    "protocolFailureHandlingKind": {
      "type": "string",
      "enum": [
        "FAILURE_HANDLING_KIND_UNSPECIFIED",
        "ABORT",
        "TRANSACTIONAL",
        "TEXT_ONLY_TRANSACTIONAL",
        "UNDO"
      ],
      "default": "FAILURE_HANDLING_KIND_UNSPECIFIED",
      "description": " - FAILURE_HANDLING_KIND_UNSPECIFIED: Conventional default for enums. Do not use this.\n - ABORT: Applying the workspace change is simply aborted if one of the changes provided\nfails. All operations executed before the failing operation stay executed.\n - TRANSACTIONAL: All operations are executed transactional. That means they either all\nsucceed or no changes at all are applied to the workspace.\n - TEXT_ONLY_TRANSACTIONAL: If the workspace edit contains only textual file changes they are executed transactional.\nIf resource changes (create, rename or delete file) are part of the change the failure\nhandling strategy is abort.\n - UNDO: The client tries to undo the operations already executed. But there is no\nguarantee that this is succeeding."
    },
    "protocolLocation": {
      "type": "object",
      "properties": {
        "uri": {
          "$ref": "#/definitions/uriURI",
          "description": "The text document's uri."
        },
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The location's range."
        }
      },
      "description": "Location represents a location inside a resource, such as a line inside a text file."
    },
    "protocolMarkupContent": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/protocolMarkupKind",
          "description": "The type of the Markup."
        },
        "value": {
          "type": "string",
          "description": "The content itself."
        }
      },
      "description": "MarkupContent is a MarkupContent literal represents a string value which content can be\nrepresented in different formats. Currently plaintext and markdown are supported formats. A\nMarkupContent is usually used in documentation properties of result literals like CompletionItem\nor SignatureInformation.\n\nA `MarkupContent` literal represents a string value which content is interpreted base on its\nkind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.\n\nIf the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.\nSee https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting\n\nHere is an example how such a string can be constructed using JavaScript / TypeScript:\n\n```markdown\n```typescript\nlet markdown: MarkdownContent = {\n kind: MarkupKind.Markdown,\n     value: [\n     \t'# Header',\n     \t'Some text',\n     \t'```typescript',\n     \t'someCode();',\n     \t'```'\n     ].join('\\n')\n};\n```\n```\n\nNOTE: clients might sanitize the return markdown. A client could decide to\nremove HTML from the markdown to avoid script execution."
    },
    "protocolMarkupKind": {
      "type": "string",
      "enum": [
        "MARKUP_KIND_UNSPECIFIED",
        "PLAIN_TEXT",
        "MARKDOWN"
      ],
      "default": "MARKUP_KIND_UNSPECIFIED",
      "description": "MarkupKind describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.\n\n - MARKUP_KIND_UNSPECIFIED: Conventional default for enums. Do not use this.\n - PLAIN_TEXT: Plain text is supported as a content format\n - MARKDOWN: Markdown is supported as a content format"
    },
    "protocolPosition": {
      "type": "object",
      "properties": {
        "line": {
          "type": "integer",
          "format": "int32",
          "description": "Line position in a document (zero-based)."
        },
        "character": {
          "type": "integer",
          "format": "int32",
          "description": "Character offset on a line in a document (zero-based). Assuming that the line is\nrepresented as a string, the `character` value represents the gap between the\n`character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the\nline length.\n\nThe offsets are based on a UTF-16 string representation."
        }
      },
      "description": "Position in a text document expressed as zero-based line and zero-based character offset.\nA position is between two characters like an ‘insert’ cursor in a editor.\nSpecial values like for example -1 to denote the end of a line are not supported."
    },
    "protocolRange": {
      "type": "object",
      "properties": {
        "start": {
          "$ref": "#/definitions/protocolPosition",
          "description": "The range's start position."
        },
        "end": {
          "$ref": "#/definitions/protocolPosition",
          "description": "The range's end position."
        }
      },
      "description": "Range in a text document expressed as (zero-based) start and end positions.\n\nA range is comparable to a selection in an editor. Therefore the end position is exclusive.\nIf you want to specify a range that contains a line including the line ending character(s)\nthen use an end position denoting the start of the next line."
    },
    "protocolRenameFile": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The kind of RenameFile message.\n\nalways 'rename'"
        },
        "oldUri": {
          "$ref": "#/definitions/uriURI",
          "description": "The old (existing) location."
        },
        "newUri": {
          "$ref": "#/definitions/uriURI",
          "description": "The new location."
        },
        "options": {
          "$ref": "#/definitions/protocolRenameFileOptions",
          "description": "Optional. Rename options."
        }
      },
      "description": "RenameFile rename file operation."
    },
    "protocolRenameFileOptions": {
      "type": "object",
      "properties": {
        "overwrite": {
          "type": "boolean",
          "description": "Optional. Overwrite target if existing. Overwrite wins over `ignoreIfExists`."
        },
        "ignoreIfExists": {
          "type": "boolean",
          "description": "Optional. Ignores if target exists."
        }
      },
      "description": "RenameFileOptions is the options to rename a file."
    },
    "protocolResourceOperationKind": {
      "type": "string",
      "enum": [
        "RESOURCE_OPERATION_KIND_UNSPECIFIED",
        "CREATE",
        "RENAME",
        "DELETE"
      ],
      "default": "RESOURCE_OPERATION_KIND_UNSPECIFIED",
      "description": "ResourceOperationKind is the kind of resource operations supported by the client.\n\n - RESOURCE_OPERATION_KIND_UNSPECIFIED: Conventional default for enums. Do not use this.\n - CREATE: Supports creating new files and folders.\n - RENAME: Supports renaming existing files and folders.\n - DELETE: Supports deleting existing files and folders."
    },
    "protocolStaticRegistrationOptions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Optional. The id used to register the request. The id can be used to deregister\nthe request again. See also Registration#id."
        }
      },
      "description": "StaticRegistrationOptions can be used to register a feature in the initialize result with a given\nserver control ID to be able to un-register the feature later on. Static registration options to\nbe returned in the initialize request."
    },
    "protocolTextDocumentEdit": {
      "type": "object",
      "properties": {
        "textDocument": {
          "$ref": "#/definitions/protocolVersionedTextDocumentIdentifier",
          "description": "The text document to change."
        },
        "edits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolTextEdit"
          },
          "description": "The edits to be applied."
        }
      },
      "description": "TextDocumentEdit describes textual changes on a single text document.\n\nThe text document is referred to as a VersionedTextDocumentIdentifier to allow clients to check\nthe text document version before an edit is applied. A TextDocumentEdit describes all changes on\na version Si and after they are applied move the document to version Si+1. So the creator of a\nTextDocumentEdit doesn’t need to sort the array of edits or do any kind of ordering. However the\nedits must be non overlapping."
    },
    "protocolTextDocumentIdentifier": {
      "type": "object",
      "properties": {
        "uri": {
          "$ref": "#/definitions/uriURI",
          "description": "The text document's URI."
        }
      },
      "title": "TextDocumentIdentifier text documents are identified using a URI. On the protocol level, URIs are\npassed as strings. The corresponding JSON structure looks like this:\n(-- api-linter: core::0140::abbreviations=disabled --)"
    },
    "protocolTextDocumentItem": {
      "type": "object",
      "properties": {
        "uri": {
          "$ref": "#/definitions/uriURI",
          "description": "The text document's URI."
        },
        "languageId": {
          "type": "string",
          "description": "The text document's language identifier."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version number of this document (it will increase after each\nchange, including undo/redo)."
        },
        "text": {
          "type": "string",
          "description": "The content of the opened text document."
        }
      },
      "description": "TextDocumentItem an item to transfer a text document from the client to the server."
    },
    "protocolTextDocumentPositionParams": {
      "type": "object",
      "properties": {
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The text document."
        },
        "position": {
          "$ref": "#/definitions/protocolPosition",
          "description": "The position inside the text document."
        }
      },
      "description": "TextDocumentPositionParams was TextDocumentPosition in 1.0 with inlined parameters.\nA parameter literal used in requests to pass a text document and a position inside that document."
    },
    "protocolTextDocumentRegistrationOptions": {
      "type": "object",
      "properties": {
        "selector": {
          "$ref": "#/definitions/TextDocumentRegistrationOptionsDocumentSelector"
        },
        "empty": {
          "type": "string"
        }
      },
      "description": "TextDocumentRegistrationOptions options to dynamically register for requests for a set of text\ndocuments."
    },
    "protocolTextEdit": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range of the text document to be manipulated. To insert\ntext into a document create a range where start === end."
        },
        "newText": {
          "type": "string",
          "description": "The string to be inserted. For delete operations use an\nempty string."
        }
      },
      "description": "TextEdit is a textual edit applicable to a text document."
    },
    "protocolTraceValue": {
      "type": "string",
      "enum": [
        "TRACE_VALUE_UNSPECIFIED",
        "OFF",
        "MESSAGE",
        "VERBOSE"
      ],
      "default": "TRACE_VALUE_UNSPECIFIED",
      "description": "TraceValue represents the level of verbosity with which the server systematically reports its\nexecution trace using $/logTrace notifications. The initial trace value is set by the client at\ninitialization and can be modified later using the $/setTrace notification.\n\n - TRACE_VALUE_UNSPECIFIED: Conventional default for enums. Do not use this.\n - OFF: trace is off.\n - MESSAGE: message trace level.\n - VERBOSE: verbose trace level."
    },
    "protocolVersionedTextDocumentIdentifier": {
      "type": "object",
      "properties": {
        "textDocumentIdentifier": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "TextDocumentIdentifier text documents are identified using a URI. On the protocol level, URIs\nare passed as strings."
        },
        "version": {
          "type": "boolean",
          "description": "Optional. The version number of this document. If a versioned text document identifier\nis sent from the server to the client and the file is not open in the editor\n(the server has not received an open notification before) the server can send\n`null` to indicate that the version is known and the content on disk is the\nmaster (as speced with document content ownership).\n\nThe version number of a document will increase after each change, including\nundo/redo. The number doesn't need to be consecutive."
        }
      },
      "title": "(-- api-linter: core::0140::abbreviations=disabled --)"
    },
    "protocolWorkDoneProgressOptions": {
      "type": "object",
      "properties": {
        "workDoneProgress": {
          "type": "boolean",
          "description": "Optional."
        }
      },
      "description": "WorkDoneProgressOptions options to signal work done progress support in server capabilities."
    },
    "protocolWorkspaceEdit": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protocolWorkspaceEditTextEdits"
          },
          "description": "Holds changes to existing resources.\n\nThe map key is uri.URI\n(-- api-linter: core::0192::only-leading-comments=disabled --)"
        },
        "textDocumentEdits": {
          "$ref": "#/definitions/WorkspaceEditTextDocumentEdits"
        },
        "createFiles": {
          "$ref": "#/definitions/WorkspaceEditCreateFiles"
        },
        "renameFiles": {
          "$ref": "#/definitions/WorkspaceEditRenameFiles"
        },
        "deleteFiles": {
          "$ref": "#/definitions/WorkspaceEditDeleteFiles"
        }
      },
      "description": "WorkspaceEdit a workspace edit represents changes to many resources managed in the workspace. The\nedit should either provide changes or documentChanges. If the client can handle versioned\ndocument edits and if documentChanges are present, the latter are preferred over changes."
    },
    "protocolWorkspaceEditClientCapabilities": {
      "type": "object",
      "properties": {
        "documentChanges": {
          "type": "boolean",
          "description": "Optional. The client supports versioned document changes in `WorkspaceEdit`s."
        },
        "resourceOperations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolResourceOperationKind"
          },
          "description": "The resource operations the client supports. Clients should at least\nsupport 'create', 'rename' and 'delete' files and folders.\n\n@since 3.13.0"
        },
        "failureHandling": {
          "$ref": "#/definitions/protocolFailureHandlingKind",
          "description": "Optional. The failure handling strategy of a client if applying the workspace edit\nfails.\n\n@since 3.13.0"
        }
      },
      "description": "WorkspaceEditClientCapabilities ResourceOperationKind and FailureHandlingKind and the client\ncapability workspace.workspaceEdit.resourceOperations as well as\nworkspace.workspaceEdit.failureHandling.\n\nNew in version 3.13.\n\nThe capabilities of a workspace edit has evolved over the time. Clients can describe their\nsupport using the following client capability:\n- property path (optional): workspace.workspaceEdit\n- property type: WorkspaceEditClientCapabilities defined as follows."
    },
    "protocolWorkspaceEditTextEdits": {
      "type": "object",
      "properties": {
        "textEdits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolTextEdit"
          }
        }
      }
    },
    "protocolrpcCodeActionKind": {
      "type": "string",
      "enum": [
        "EMPTY",
        "QUICKFIX",
        "REFACTOR",
        "REFACTOR_EXTRACT",
        "REFACTOR_INLINE",
        "REFACTOR_REWRITE",
        "SOURCE",
        "SOURCE_ORGANIZE_IMPORTS"
      ],
      "default": "EMPTY",
      "description": "CodeActionKind is the kind of a code action.\n\nKinds are a hierarchical list of identifiers separated by `.`, e.g.\n`\"refactor.extract.function\"`.\n\nThe set of kinds is open and client needs to announce the kinds it supports to the server during\ninitialization.\n\nA set of predefined code action kinds.\n(-- api-linter: core::0126::unspecified=disabled --)\n\n - EMPTY: Empty kind.\n - QUICKFIX: Base kind for quickfix actions: 'quickfix'.\n - REFACTOR: Base kind for refactoring actions: 'refactor'.\n - REFACTOR_EXTRACT: Base kind for refactoring extraction actions: 'refactor.extract'.\n\nExample extract actions:\n\n- Extract method\n- Extract function\n- Extract variable\n- Extract interface from class\n- ...\n - REFACTOR_INLINE: Base kind for refactoring inline actions: 'refactor.inline'.\n\nExample inline actions:\n\n- Inline function\n- Inline variable\n- Inline constant\n- ...\n - REFACTOR_REWRITE: Base kind for refactoring rewrite actions: 'refactor.rewrite'.\n\nExample rewrite actions:\n\n- Convert JavaScript function to class\n- Add or remove parameter\n- Encapsulate field\n- Make method static\n- Move method to base class\n- ...\n - SOURCE: Base kind for source actions: `source`.\n\nSource code actions apply to the entire file.\n - SOURCE_ORGANIZE_IMPORTS: Base kind for an organize imports source action: `source.organizeImports`."
    },
    "protocolrpcCompletionItem": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The label of this completion item. By default\nalso the text that is inserted when selecting\nthis completion."
        },
        "kind": {
          "$ref": "#/definitions/protocolrpcCompletionItemKind",
          "description": "The kind of this completion item. Based of the kind\nan icon is chosen by the editor. The standardized set\nof available values is defined in `CompletionItemKind`."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCompletionItemTag"
          },
          "description": "Tags for this completion item.\n\n@since 3.15.0"
        },
        "detail": {
          "type": "string",
          "description": "A human-readable string with additional information\nabout this item, like type or symbol information."
        },
        "markupContent": {
          "$ref": "#/definitions/protocolMarkupContent"
        },
        "content": {
          "type": "string"
        },
        "deprecated": {
          "type": "boolean",
          "description": "Indicates if this item is deprecated.\n\nUse tags instead if supported."
        },
        "preselect": {
          "type": "boolean",
          "description": "Optional. Select this item when showing.\n\n*Note* that only one completion item can be selected and that the\ntool / client decides which item that is. The rule is that the *first*\nitem of those that match best is selected."
        },
        "sortText": {
          "type": "string",
          "description": "A string that should be used when comparing this item\nwith other items. When `falsy` the label is used."
        },
        "filterText": {
          "type": "string",
          "description": "A string that should be used when filtering a set of\ncompletion items. When `falsy` the label is used."
        },
        "insertText": {
          "type": "string",
          "description": "A string that should be inserted into a document when selecting\nthis completion. When `falsy` the label is used.\n\nThe `insertText` is subject to interpretation by the client side.\nSome tools might not take the string literally. For example\nVS Code when code complete is requested in this example `con\u003ccursor position\u003e`\nand a completion item with an `insertText` of `console` is provided it\nwill only insert `sole`. Therefore it is recommended to use `textEdit` instead\nsince it avoids additional client side interpretation."
        },
        "insertTextFormat": {
          "$ref": "#/definitions/rpcInsertTextFormat",
          "description": "The format of the insert text. The format applies to both the `insertText` property\nand the `newText` property of a provided `textEdit`. If omitted defaults to\n`InsertTextFormat.PlainText`."
        },
        "textEdit": {
          "$ref": "#/definitions/protocolTextEdit",
          "description": "An edit which is applied to a document when selecting this completion. When an edit is provided\nthe value of `insertText` is ignored.\n\nNOTE: The range of the edit must be a single line range and it must contain the position at\nwhich completion has been requested."
        },
        "additionalTextEdits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolTextEdit"
          },
          "description": "An optional array of additional text edits that are applied when\nselecting this completion. Edits must not overlap (including the same insert position)\nwith the main edit nor with themselves.\n\nAdditional text edits should be used to change text unrelated to the current cursor position\n(for example adding an import statement at the top of the file if the completion item will\ninsert an unqualified type)."
        },
        "commitCharacters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An optional set of characters that when pressed while this completion is active will accept it\nfirst and then type that character. *Note* that all commit characters should have `length=1`\nand that superfluous characters will be ignored."
        },
        "command": {
          "$ref": "#/definitions/protocolCommand",
          "description": "Optional. An optional command that is executed *after* inserting this completion. *Note* that\nadditional modifications to the current document should be described with the\nadditionalTextEdits-property."
        },
        "data": {
          "$ref": "#/definitions/protobufAny",
          "description": "A data entry field that is preserved on a completion item between\na completion and a completion resolve request."
        }
      },
      "description": "CompletionItem is the completion items."
    },
    "protocolrpcCompletionItemKind": {
      "type": "string",
      "enum": [
        "COMPLETION_ITEM_KIND_UNSPECIFIED",
        "COMPLETION_TEXT",
        "COMPLETION_METHOD",
        "COMPLETION_FUNCTION",
        "COMPLETION_CONSTRUCTOR",
        "COMPLETION_FIELD",
        "COMPLETION_VARIABLE",
        "COMPLETION_CLASS",
        "COMPLETION_INTERFACE",
        "COMPLETION_MODULE",
        "COMPLETION_PROPERTY",
        "COMPLETION_UNIT",
        "COMPLETION_VALUE",
        "COMPLETION_ENUM",
        "COMPLETION_KEYWORD",
        "COMPLETION_SNIPPET",
        "COMPLETION_COLOR",
        "COMPLETION_FILE",
        "COMPLETION_REFERENCE",
        "COMPLETION_FOLDER",
        "COMPLETION_ENUMMEMBER",
        "COMPLETION_CONSTANT",
        "COMPLETION_STRUCT",
        "COMPLETION_EVENT",
        "COMPLETION_OPERATOR",
        "COMPLETION_TYPEPARAMETER"
      ],
      "default": "COMPLETION_ITEM_KIND_UNSPECIFIED",
      "description": "CompletionItemKind is the kind of a completion entry.\n\n - COMPLETION_ITEM_KIND_UNSPECIFIED: Conventional default for enums. Do not use this."
    },
    "protocolrpcParameterInformation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "offset": {
          "$ref": "#/definitions/ParameterInformationOffset"
        },
        "markup": {
          "type": "string"
        },
        "markupContent": {
          "$ref": "#/definitions/protocolMarkupContent"
        }
      },
      "title": "ParameterInformation represents a parameter of a callable-signature. A parameter can\nhave a label and a doc-comment.\n(-- api-linter: core::0123::resource-annotation=disabled --)"
    },
    "protocolrpcSignatureInformation": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The label of this signature. Will be shown in\nthe UI."
        },
        "markup": {
          "type": "string"
        },
        "markupContent": {
          "$ref": "#/definitions/protocolMarkupContent"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolrpcParameterInformation"
          },
          "description": "The parameters of this signature."
        },
        "activeParameter": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the active parameter.\n\nIf provided, this is used in place of `SignatureHelp.activeParameter`.\n\n@since 3.16.0 - proposed state"
        }
      },
      "description": "SignatureInformation represents the signature of something callable. A signature\ncan have a label, like a function-name, a doc-comment, and\na set of parameters."
    },
    "protocolrpcSymbolKind": {
      "type": "string",
      "enum": [
        "SYMBOL_KIND_UNSPECIFIED",
        "SYMBOL_FILE",
        "SYMBOL_MODULE",
        "SYMBOL_NAMESPACE",
        "SYMBOL_PACKAGE",
        "SYMBOL_CLASS",
        "SYMBOL_METHOD",
        "SYMBOL_PROPERTY",
        "SYMBOL_FIELD",
        "SYMBOL_CONSTRUCTOR",
        "SYMBOL_ENUM",
        "SYMBOL_INTERFACE",
        "SYMBOL_FUNCTION",
        "SYMBOL_VARIABLE",
        "SYMBOL_CONSTANT",
        "SYMBOL_STRING",
        "SYMBOL_NUMBER",
        "SYMBOL_BOOLEAN",
        "SYMBOL_ARRAY",
        "SYMBOL_OBJECT",
        "SYMBOL_KEY",
        "SYMBOL_NULL",
        "SYMBOL_ENUMMEMBER",
        "SYMBOL_STRUCT",
        "SYMBOL_EVENT",
        "SYMBOL_OPERATOR",
        "SYMBOL_TYPEPARAMETER"
      ],
      "default": "SYMBOL_KIND_UNSPECIFIED",
      "description": "SymbolKind is a symbol kind.\n\n - SYMBOL_KIND_UNSPECIFIED: Conventional default for enums. Do not use this."
    },
    "protocolrpcTextEdits": {
      "type": "object",
      "properties": {
        "textEdit": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolTextEdit"
          }
        }
      },
      "description": "TextEdits represents a list of TextEdit."
    },
    "rpcApplyWorkspaceEditRequest": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "An optional label of the workspace edit. This label is\npresented in the user interface for example on an undo\nstack to undo the workspace edit."
        },
        "edit": {
          "$ref": "#/definitions/protocolWorkspaceEdit",
          "description": "The edits to apply."
        }
      },
      "description": "ApplyWorkspaceEditRequest is the parameters of a `workspace/applyEdit` request."
    },
    "rpcApplyWorkspaceEditResponse": {
      "type": "object",
      "properties": {
        "applied": {
          "type": "boolean",
          "description": "Indicates whether the edit was applied or not."
        },
        "failureReason": {
          "type": "string",
          "description": "An optional textual description for why the edit was not applied.\nThis may be used may be used by the server for diagnostic\nlogging or to provide a suitable error for a request that\ntriggered the edit."
        }
      },
      "description": "ApplyWorkspaceEditResponse is the parameters of a ApplyWorkspaceEdit response."
    },
    "rpcCallHierarchyIncomingCall": {
      "type": "object",
      "properties": {
        "from": {
          "$ref": "#/definitions/rpcCallHierarchyItem",
          "title": "The item that makes the call.\n(-- api-linter: core::0140::reserved-words=disabled\n    api-linter: core::0140::prepositions=disabled --)"
        },
        "fromRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolRange"
          },
          "title": "The ranges at which the calls appear. This is relative to the caller\ndenoted by [`this.from`][CallHierarchyIncomingCall.from].\n(-- api-linter: core::0140::prepositions=disabled --)"
        }
      },
      "description": "CallHierarchyIncomingCall represents a item of call hierarchy incoming call.\n\n@since 3.16.0"
    },
    "rpcCallHierarchyIncomingCallsRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "item": {
          "$ref": "#/definitions/rpcCallHierarchyItem"
        }
      },
      "description": "CallHierarchyIncomingCallsRequest is the parameters of a `textDocument/incomingCalls` request.\n\n@since 3.16.0"
    },
    "rpcCallHierarchyIncomingCallsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcCallHierarchyIncomingCallsResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcCallHierarchyIncomingCallsResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "CallHierarchyIncomingCallsResponse represents a CallHierarchyIncomingCalls response."
    },
    "rpcCallHierarchyIncomingCallsResponsePartialResult": {
      "type": "object",
      "properties": {
        "callHierarchyIncomingCalls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCallHierarchyIncomingCall"
          }
        }
      }
    },
    "rpcCallHierarchyIncomingCallsResponseResult": {
      "type": "object",
      "properties": {
        "callHierarchyIncomingCalls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCallHierarchyIncomingCall"
          }
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcCallHierarchyItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this item."
        },
        "kind": {
          "$ref": "#/definitions/protocolrpcSymbolKind",
          "description": "The kind of this item."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcSymbolTag"
          },
          "description": "Tags for this item."
        },
        "detail": {
          "type": "string",
          "description": "More detail for this item, e.g. the signature of a function."
        },
        "uri": {
          "$ref": "#/definitions/protocolDocumentURI",
          "description": "The resource identifier of this item."
        },
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range enclosing this symbol not including leading/trailing whitespace but everything else,\ne.g. comments and code."
        },
        "selectionRange": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range that should be selected and revealed when this symbol is being picked, e.g. the name\nof a function. Must be contained by the [`range`][CallHierarchyItem.range]."
        }
      },
      "description": "CallHierarchyItem represents a item of call hierarchy.\n\n@since 3.16.0\n(-- api-linter: core::0123::resource-annotation=disabled --)"
    },
    "rpcCallHierarchyOutgoingCall": {
      "type": "object",
      "properties": {
        "to": {
          "$ref": "#/definitions/rpcCallHierarchyItem",
          "title": "The item that is called.\n(-- api-linter: core::0140::prepositions=disabled --)"
        },
        "fromRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolRange"
          },
          "title": "The range at which this item is called. This is the range relative to the caller, e.g the item\npassed to\n[`provideCallHierarchyOutgoingCalls`][CallHierarchyItemProvider.provideCallHierarchyOutgoingCalls]\nand not [`this.to`][CallHierarchyOutgoingCall.to].\n(-- api-linter: core::0140::prepositions=disabled --)"
        }
      },
      "description": "CallHierarchyOutgoingCall represents a item of call hierarchy outgoing call.\n\n@since 3.16.0"
    },
    "rpcCallHierarchyOutgoingCallsRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "item": {
          "$ref": "#/definitions/rpcCallHierarchyItem"
        }
      },
      "description": "CallHierarchyOutgoingCallsRequest is the parameters of a `callHierarchy/outgoingCalls` request.\n\n@since 3.16.0"
    },
    "rpcCallHierarchyOutgoingCallsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcCallHierarchyOutgoingCallsResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcCallHierarchyOutgoingCallsResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "CallHierarchyIncomingCallsResponse represents a CallHierarchyOutgoingCalls response."
    },
    "rpcCallHierarchyOutgoingCallsResponsePartialResult": {
      "type": "object",
      "properties": {
        "callHierarchyOutgoingCalls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCallHierarchyOutgoingCall"
          }
        }
      }
    },
    "rpcCallHierarchyOutgoingCallsResponseResult": {
      "type": "object",
      "properties": {
        "callHierarchyOutgoingCalls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCallHierarchyOutgoingCall"
          }
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcCallHierarchyPrepareRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        }
      },
      "description": "CallHierarchyPrepareRequest is the parameters of a `textDocument/prepareCallHierarchy` request.\n\n@since 3.16.0"
    },
    "rpcCallHierarchyPrepareResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcCallHierarchyPrepareResponseResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "CallHierarchyPrepareResponse represents a PrepareCallHierarchy response."
    },
    "rpcCallHierarchyPrepareResponseResult": {
      "type": "object",
      "properties": {
        "callHierarchyItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCallHierarchyItem"
          }
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcCancelRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Required. The request id to cancel."
        }
      },
      "description": "CancelRequest represents a cancel notification params."
    },
    "rpcClientCapabilities": {
      "type": "object",
      "properties": {
        "workspace": {
          "$ref": "#/definitions/rpcClientCapabilitiesWorkspace",
          "description": "Optional. Workspace specific client capabilities."
        },
        "textDocument": {
          "$ref": "#/definitions/rpcTextDocumentClientCapabilities",
          "description": "Optional. Text document specific client capabilities."
        },
        "window": {
          "$ref": "#/definitions/ClientCapabilitiesWindow",
          "description": "Optional. Window specific client capabilities."
        },
        "experimental": {
          "$ref": "#/definitions/protobufAny",
          "description": "Optional. Experimental client capabilities."
        }
      },
      "description": "ClientCapabilities define capabilities for dynamic registration, workspace and text document\nfeatures the client supports.\n\nThe experimental can be used to pass experimental capabilities under development. For future\ncompatibility a ClientCapabilities object literal can have more properties set than currently\ndefined. Servers receiving a ClientCapabilities object literal with unknown properties should\nignore these properties. A missing property should be interpreted as an absence of the\ncapability. If a missing property normally defines sub properties, all missing sub properties\nshould be interpreted as an absence of the corresponding capability.\n\nClient capabilities got introduced with version 3.0 of the protocol. They therefore only describe\ncapabilities that got introduced in 3.x or later. Capabilities that existed in the 2.x version of\nthe protocol are still mandatory for clients. Clients cannot opt out of providing them. So even\nif a client omits the ClientCapabilities.textDocument.synchronization it is still required that\nthe client provides text document synchronization (e.g. open, changed and close notifications)."
    },
    "rpcClientCapabilitiesWorkspace": {
      "type": "object",
      "properties": {
        "applyEdit": {
          "type": "boolean",
          "description": "Optional. The client supports applying batch edits to the workspace by supporting the request\n'workspace/applyEdit'."
        },
        "workspaceEdit": {
          "$ref": "#/definitions/protocolWorkspaceEditClientCapabilities",
          "description": "Optional. Capabilities specific to `WorkspaceEdit`s."
        },
        "didChangeConfiguration": {
          "$ref": "#/definitions/rpcDidChangeConfigurationClientCapabilities",
          "description": "Optional. Capabilities specific to the `workspace/didChangeConfiguration` notification."
        },
        "didChangeWatchedFiles": {
          "$ref": "#/definitions/rpcDidChangeWatchedFilesClientCapabilities",
          "description": "Optional. Capabilities specific to the `workspace/didChangeWatchedFiles` notification."
        },
        "symbol": {
          "$ref": "#/definitions/rpcWorkspaceSymbolClientCapabilities",
          "description": "Optional. Capabilities specific to the `workspace/symbol` request."
        },
        "executeCommand": {
          "$ref": "#/definitions/rpcExecuteCommandClientCapabilities",
          "description": "Optional. Capabilities specific to the `workspace/executeCommand` request."
        },
        "workspaceFolders": {
          "type": "boolean",
          "description": "Optional. The client has support for workspace folders.\n\n@since 3.6.0"
        },
        "configuration": {
          "type": "boolean",
          "description": "Optional. The client supports `workspace/configuration` requests.\n\n@since 3.6.0"
        }
      },
      "description": "Workspace specific client capabilities."
    },
    "rpcCodeAction": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "A short, human-readable, title for this code action."
        },
        "kind": {
          "$ref": "#/definitions/protocolrpcCodeActionKind",
          "description": "The kind of the code action.\n\nUsed to filter code actions."
        },
        "diagnostics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolDiagnostic"
          },
          "description": "The diagnostics that this code action resolves."
        },
        "isPreferred": {
          "type": "boolean",
          "description": "Optional. Marks this as a preferred action. Preferred actions are used by the `auto fix`\ncommand and can be targeted by keybindings.\n\nA quick fix should be marked preferred if it properly addresses the underlying error.\nA refactoring should be marked preferred if it is the most reasonable choice of actions to\ntake.\n\n@since 3.15.0"
        },
        "edit": {
          "$ref": "#/definitions/protocolWorkspaceEdit",
          "description": "Optional. The workspace edit this code action performs."
        },
        "command": {
          "$ref": "#/definitions/protocolCommand",
          "description": "Optional. A command this code action executes. If a code action\nprovides an edit and a command, first the edit is\nexecuted and then the command."
        }
      },
      "description": "CodeAction is a code action represents a change that can be performed in code, e.g. to fix a\nproblem or to refactor code.\n\nA CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is\napplied first, then the `command` is executed."
    },
    "rpcCodeActionClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether code action supports dynamic registration."
        },
        "codeActionLiteralSupport": {
          "$ref": "#/definitions/CodeActionClientCapabilitiesCodeActionLiteralSupport",
          "description": "The client supports code action literals as a valid\nresponse of the `textDocument/codeAction` request.\n\n@since 3.8.0"
        },
        "isPreferredSupport": {
          "type": "boolean",
          "description": "Optional. Whether code action supports the `isPreferred` property.\n\n@since 3.15.0"
        }
      },
      "description": "CodeActionClientCapabilities represents a client capabilities of `textDocument/codeAction`\nrequest."
    },
    "rpcCodeActionContext": {
      "type": "object",
      "properties": {
        "diagnostics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolDiagnostic"
          },
          "description": "An array of diagnostics known on the client side overlapping the range provided to the\n`textDocument/codeAction` request. They are provided so that the server knows which\nerrors are currently presented to the user for the given range. There is no guarantee\nthat these accurately reflect the error state of the resource. The primary parameter\nto compute code actions is the provided range."
        },
        "only": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolrpcCodeActionKind"
          },
          "description": "Requested kind of actions to return.\n\nActions not of this kind are filtered out by the client before being shown. So servers\ncan omit computing them."
        }
      },
      "description": "CodeActionContext contains additional diagnostic information about the context in which\na code action is run."
    },
    "rpcCodeActionOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        },
        "codeActionKinds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolrpcCodeActionKind"
          },
          "description": "CodeActionKinds that this server may return.\n\nThe list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server\nmay list out every specific kind they provide."
        }
      },
      "description": "CodeActionOptions represents a server capabilities option of codeActionProvider."
    },
    "rpcCodeActionRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The document in which the command was invoked."
        },
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range for which the command was invoked."
        },
        "context": {
          "$ref": "#/definitions/rpcCodeActionContext",
          "description": "Context carrying additional information."
        }
      },
      "description": "CodeActionRequest params for the CodeActionRequest."
    },
    "rpcCodeActionResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcCodeActionResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcCodeActionResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "CodeActionResponse represents a CodeAction response."
    },
    "rpcCodeActionResponsePartialResult": {
      "type": "object",
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolCommand"
          }
        },
        "codeActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCodeAction"
          }
        }
      }
    },
    "rpcCodeActionResponseResult": {
      "type": "object",
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolCommand"
          }
        },
        "codeActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCodeAction"
          }
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcCodeLens": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range in which this code lens is valid. Should only span a single line."
        },
        "command": {
          "$ref": "#/definitions/protocolCommand",
          "description": "The command this code lens represents."
        },
        "data": {
          "$ref": "#/definitions/protobufAny",
          "description": "A data entry field that is preserved on a code lens item between\na code lens and a code lens resolve request."
        }
      },
      "description": "CodeLens is a code lens represents a command that should be shown along with\nsource text, like the number of references, a way to run tests, etc.\n\nA code lens is _unresolved_ when no command is associated to it. For performance\nreasons the creation of a code lens and resolving should be done in two stages."
    },
    "rpcCodeLensClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether code lens supports dynamic registration."
        }
      },
      "description": "CodeLensClientCapabilities represents a client capabilities of `textDocument/codeLens` request."
    },
    "rpcCodeLensOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        },
        "resolveProvider": {
          "type": "boolean",
          "description": "Optional. Code lens has a resolve provider as well."
        }
      },
      "description": "CodeLensOptions represents a server capabilities option of codeLensProvider."
    },
    "rpcCodeLensRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The document to request code lens for."
        }
      },
      "description": "CodeLensRequest is the parameters of a `textDocument/codeLens` request."
    },
    "rpcCodeLensResolveRequest": {
      "type": "object",
      "properties": {
        "codeLens": {
          "$ref": "#/definitions/rpcCodeLens"
        }
      },
      "description": "CodeLensResolveRequest represents a CodeLensResolveRequest request."
    },
    "rpcCodeLensResolveResponse": {
      "type": "object",
      "properties": {
        "codeLens": {
          "$ref": "#/definitions/rpcCodeLens"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "CodeLensResolveResponse represents a CodeLensResolve response."
    },
    "rpcCodeLensResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcCodeLensResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcCodeLensResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "CodeLensResponse represents a CodeLens response."
    },
    "rpcCodeLensResponsePartialResult": {
      "type": "object",
      "properties": {
        "codeLens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCodeLens"
          }
        }
      }
    },
    "rpcCodeLensResponseResult": {
      "type": "object",
      "properties": {
        "codeLens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCodeLens"
          }
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcColor": {
      "type": "object",
      "properties": {
        "red": {
          "type": "integer",
          "format": "int32",
          "description": "The red component of this color in the range [0-1].\n\nreadonly"
        },
        "green": {
          "type": "integer",
          "format": "int32",
          "description": "The green component of this color in the range [0-1].\n\nreadonly"
        },
        "blue": {
          "type": "integer",
          "format": "int32",
          "description": "The blue component of this color in the range [0-1].\n\nreadonly"
        },
        "alpha": {
          "type": "integer",
          "format": "int32",
          "description": "The alpha component of this color in the range [0-1].\n\nreadonly"
        }
      },
      "description": "Color represents a color in RGBA space."
    },
    "rpcColorInformation": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range in the document where this color appears."
        },
        "color": {
          "$ref": "#/definitions/rpcColor",
          "description": "The actual color value for this color range."
        }
      },
      "description": "ColorInformation represents a color information."
    },
    "rpcColorPresentation": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "The label of this color presentation. It will be shown on the color\npicker header. By default this is also the text that is inserted when selecting\nthis color presentation."
        },
        "textEdit": {
          "$ref": "#/definitions/protocolTextEdit",
          "description": "An [edit][TextEdit] which is applied to a document when selecting\nthis presentation for the color.  When `falsy` the [label][ColorPresentation.label]\nis used."
        },
        "additionalTextEdits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolTextEdit"
          },
          "description": "An optional array of additional [text edits](#TextEdit) that are applied when\nselecting this color presentation. Edits must not overlap with the main\n[edit][ColorPresentation.textEdit] nor with themselves."
        }
      },
      "description": "ColorPresentation represents a respeonse of `textDocument/colorPresentation`."
    },
    "rpcColorPresentationRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The text document."
        },
        "color": {
          "$ref": "#/definitions/rpcColor",
          "description": "The color information to request presentations for."
        },
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range where the color would be inserted. Serves as a context."
        }
      },
      "description": "ColorPresentationRequest is the parameters of a `textDocument/colorPresentation` request."
    },
    "rpcColorPresentationResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcColorPresentationResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcColorPresentationResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "ColorPresentationResponse represents a ColorPresentation response."
    },
    "rpcColorPresentationResponsePartialResult": {
      "type": "object",
      "properties": {
        "colorPresentations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcColorPresentation"
          }
        }
      }
    },
    "rpcColorPresentationResponseResult": {
      "type": "object",
      "properties": {
        "colorPresentations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcColorPresentation"
          }
        }
      }
    },
    "rpcCompletionClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Whether completion supports dynamic registration."
        },
        "completionItem": {
          "$ref": "#/definitions/rpcCompletionClientCapabilitiesCompletionItem",
          "description": "The client supports the following `CompletionItem` specific\ncapabilities."
        },
        "completionItemKind": {
          "$ref": "#/definitions/rpcCompletionClientCapabilitiesCompletionItemKind"
        },
        "contextSupport": {
          "type": "boolean",
          "description": "Optional. The client supports to send additional context information for a\n`textDocument/completion` request."
        }
      },
      "description": "CompletionClientCapabilities represents a client capabilities of\n`textDocument/completion` request."
    },
    "rpcCompletionClientCapabilitiesCompletionItem": {
      "type": "object",
      "properties": {
        "snippetSupport": {
          "type": "boolean",
          "description": "Optional. Client supports snippets as insert text.\n\nA snippet can define tab stops and placeholders with `$1`, `$2`\nand `${3:foo}`. `$0` defines the final tab stop, it defaults to\nthe end of the snippet. Placeholders with equal identifiers are linked,\nthat is typing in one will update others too."
        },
        "commitCharactersSupport": {
          "type": "boolean",
          "description": "Optional. Client supports commit characters on a completion item."
        },
        "documentationFormat": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolMarkupKind"
          },
          "description": "Client supports the follow content formats for the documentation\nproperty. The order describes the preferred format of the client."
        },
        "deprecatedSupport": {
          "type": "boolean",
          "description": "Optional. Client supports the deprecated property on a completion item."
        },
        "preselectSupport": {
          "type": "boolean",
          "description": "Optional. Client supports the preselect property on a completion item."
        },
        "tagSupport": {
          "$ref": "#/definitions/CompletionClientCapabilitiesCompletionItemTagSupport",
          "description": "Client supports the tag property on a completion item. Clients supporting\ntags have to handle unknown tags gracefully. Clients especially need to\npreserve unknown tags when sending a completion item back to the server in\na resolve call.\n\n@since 3.15.0"
        },
        "insertReplaceSupport": {
          "type": "boolean",
          "description": "Optional. Client support insert replace edit to control different behavior if a\ncompletion item is inserted in the text or should replace text.\n\n@since 3.16.0 - Proposed state"
        },
        "resolveAdditionalTextEditsSupport": {
          "type": "boolean",
          "description": "Optional. Client supports to resolve `additionalTextEdits` in the `completionItem/resolve`\nrequest. So servers can postpone computing them.\n\n@since 3.16.0 - Proposed state"
        }
      }
    },
    "rpcCompletionClientCapabilitiesCompletionItemKind": {
      "type": "object",
      "properties": {
        "valueSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCompletionClientCapabilitiesCompletionItemKind"
          },
          "description": "The completion item kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown.\n\nIf this property is not present the client only supports\nthe completion items kinds from `Text` to `Reference` as defined in\nthe initial version of the protocol."
        }
      }
    },
    "rpcCompletionContext": {
      "type": "object",
      "properties": {
        "triggerKind": {
          "$ref": "#/definitions/rpcCompletionTriggerKind",
          "description": "How the completion was triggered."
        },
        "triggerCharacter": {
          "type": "string",
          "title": "The trigger character (a single character) that has trigger code complete.\nIs undefined if `triggerKind !== CompletionTriggerKind.TriggerCharacter`"
        }
      },
      "description": "CompletionContext contains additional information about the context in which a completion request\nis triggered."
    },
    "rpcCompletionItemResolveRequest": {
      "type": "object",
      "properties": {
        "completionItems": {
          "$ref": "#/definitions/rpcCompletionItems"
        }
      },
      "description": "CompletionItemResolveRequest represents a CompletionItemResolve request."
    },
    "rpcCompletionItemResolveResponse": {
      "type": "object",
      "properties": {
        "completionItems": {
          "$ref": "#/definitions/rpcCompletionItems"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "CompletionItemResolveRequest represents a CompletionItemResolve response."
    },
    "rpcCompletionItemTag": {
      "type": "string",
      "enum": [
        "COMPLETION_ITEM_TAG_UNSPECIFIED",
        "DEPRECATED_TAG"
      ],
      "default": "COMPLETION_ITEM_TAG_UNSPECIFIED",
      "description": "CompletionItemTag completion item tags are extra annotations that tweak the rendering of a\ncompletion item.\n\n@since 3.15.0\n\n - COMPLETION_ITEM_TAG_UNSPECIFIED: Conventional default for enums. Do not use this.\n - DEPRECATED_TAG: Render a completion as obsolete, usually using a strike-out."
    },
    "rpcCompletionItems": {
      "type": "object",
      "properties": {
        "completionItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcCompletionItems"
          }
        }
      },
      "description": "CompletionItems represents a list of CompletionItem."
    },
    "rpcCompletionList": {
      "type": "object",
      "properties": {
        "isIncomplete": {
          "type": "boolean",
          "description": "Optional. This list it not complete. Further typing should result in recomputing\nthis list."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolrpcCompletionItem"
          },
          "description": "The completion items."
        }
      },
      "description": "CompletionList represents a collection of [completion items](#CompletionItem) to be presented\nin the editor."
    },
    "rpcCompletionOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        },
        "triggerCharacters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Most tools trigger completion request automatically without explicitly requesting\nit using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user\nstarts to type an identifier. For example if the user types `c` in a JavaScript file\ncode complete will automatically pop up present `console` besides others as a\ncompletion item. Characters that make up identifiers don't need to be listed here.\n\nIf code complete should automatically be trigger on characters not being valid inside\nan identifier (for example `.` in JavaScript) list them in `triggerCharacters`."
        },
        "allCommitCharacters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of all possible characters that commit a completion. This field can be used\nif clients don't support individual commit characters per completion item. See\n`ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`.\n\nIf a server provides both `allCommitCharacters` and commit characters on an individual\ncompletion item the ones on the completion item win.\n\n@since 3.2.0"
        },
        "resolveProvider": {
          "type": "boolean",
          "description": "Optional. The server provides support to resolve additional\ninformation for a completion item."
        }
      },
      "description": "CompletionOptions represents a server capabilities option of completionProvider."
    },
    "rpcCompletionRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "context": {
          "$ref": "#/definitions/rpcCompletionContext",
          "title": "The completion context. This is only available if the client specifies\nto send this using `ClientCapabilities.textDocument.completion.contextSupport === true`"
        }
      },
      "description": "CompletionRequest is the parameters of a `textDocument/completion` request."
    },
    "rpcCompletionResponse": {
      "type": "object",
      "properties": {
        "completionItems": {
          "$ref": "#/definitions/rpcCompletionItems"
        },
        "completionList": {
          "$ref": "#/definitions/rpcCompletionList"
        },
        "empty": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "CompletionResponse represents a Completion response."
    },
    "rpcCompletionTriggerKind": {
      "type": "string",
      "enum": [
        "COMPLETION_TRIGGER_KIND_UNSPECIFIED",
        "INVOKED",
        "TRIGGER_CHARACTER",
        "TRIGGER_FOR_INCOMPLETE_COMPLETIONS"
      ],
      "default": "COMPLETION_TRIGGER_KIND_UNSPECIFIED",
      "description": "CompletionTriggerKind how a completion was triggered.\n\n - COMPLETION_TRIGGER_KIND_UNSPECIFIED: Conventional default for enums. Do not use this.\n - INVOKED: Completion was triggered by typing an identifier (24x7 code\ncomplete), manual invocation (e.g Ctrl+Space) or via API.\n - TRIGGER_CHARACTER: Completion was triggered by a trigger character specified by\nthe `triggerCharacters` properties of the `CompletionRegistrationOptions`.\n - TRIGGER_FOR_INCOMPLETE_COMPLETIONS: Completion was re-triggered as the current completion list is incomplete."
    },
    "rpcConfigurationItem": {
      "type": "object",
      "properties": {
        "scopeUri": {
          "$ref": "#/definitions/protocolDocumentURI",
          "description": "The scope to get the configuration section for."
        },
        "section": {
          "type": "string",
          "description": "The configuration section asked for."
        }
      },
      "description": "ConfigurationItem represents a configuration section to ask for and an additional scope URI."
    },
    "rpcConfigurationRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcConfigurationItem"
          }
        }
      },
      "description": "ConfigurationRequest represents a Configuration request params.\n\n@since 3.6.0"
    },
    "rpcConfigurationResponse": {
      "type": "object",
      "properties": {
        "anys": {
          "$ref": "#/definitions/ConfigurationResponseAnys"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "ConfigurationResponse represents a Configuration response."
    },
    "rpcDeclarationClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether declaration supports dynamic registration. If this is set to `true`\nthe client supports the new `DeclarationRegistrationOptions` return value\nfor the corresponding server capability as well."
        },
        "linkSupport": {
          "type": "boolean",
          "description": "Optional. The client supports additional metadata in the form of declaration links."
        }
      },
      "description": "DeclarationClientCapabilities represents a client capabilities of `textDocument/declaration`\nrequest."
    },
    "rpcDeclarationOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "DeclarationOptions represents a server capabilities option of declarationProvider."
    },
    "rpcDeclarationRegistrationOptions": {
      "type": "object",
      "properties": {
        "declarationOptions": {
          "$ref": "#/definitions/rpcDeclarationOptions",
          "title": "extends"
        },
        "textDocumentRegistrationOptions": {
          "$ref": "#/definitions/protocolTextDocumentRegistrationOptions",
          "title": "extends"
        },
        "staticRegistrationOptions": {
          "$ref": "#/definitions/protocolStaticRegistrationOptions",
          "title": "extends"
        }
      },
      "description": "SignatureHelpRegistrationOptions represents a registration option of Declaration."
    },
    "rpcDeclarationRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        }
      },
      "description": "DeclarationRequest is the parameters of a `textDocument/declaration` request."
    },
    "rpcDeclarationResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcDeclarationResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcDeclarationResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "DeclarationResponse represents a Declaration response."
    },
    "rpcDeclarationResponsePartialResult": {
      "type": "object",
      "properties": {
        "locations": {
          "$ref": "#/definitions/rpcLocations"
        },
        "locationLinks": {
          "$ref": "#/definitions/rpcLocationLinks"
        }
      }
    },
    "rpcDeclarationResponseResult": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/protocolLocation"
        },
        "locations": {
          "$ref": "#/definitions/rpcLocations"
        },
        "locationLinks": {
          "$ref": "#/definitions/rpcLocationLinks"
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcDefinitionClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether definition supports dynamic registration."
        },
        "linkSupport": {
          "type": "boolean",
          "description": "Optional. The client supports additional metadata in the form of definition links.\n\n@since 3.14.0"
        }
      },
      "description": "DefinitionClientCapabilities represents a client capabilities of `textDocument/definition`\nrequest."
    },
    "rpcDefinitionOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "DefinitionOptions represents a server capabilities option of definitionProvider."
    },
    "rpcDefinitionRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        }
      },
      "description": "DefinitionRequest is the parameters of a `textDocument/definition` request."
    },
    "rpcDefinitionResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcDefinitionResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcDefinitionResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "DefinitionResponse represents a Definition response."
    },
    "rpcDefinitionResponsePartialResult": {
      "type": "object",
      "properties": {
        "locations": {
          "$ref": "#/definitions/rpcLocations"
        },
        "locationLinks": {
          "$ref": "#/definitions/rpcLocationLinks"
        }
      }
    },
    "rpcDefinitionResponseResult": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/protocolLocation"
        },
        "locations": {
          "$ref": "#/definitions/rpcLocations"
        },
        "locationLinks": {
          "$ref": "#/definitions/rpcLocationLinks"
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcDidChangeConfigurationClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Did change configuration notification supports dynamic registration."
        }
      },
      "description": "DidChangeConfigurationClientCapabilities represents a client capabilities of\n`workspace/didChangeConfiguration` notification."
    },
    "rpcDidChangeConfigurationRequest": {
      "type": "object",
      "properties": {
        "settings": {
          "$ref": "#/definitions/protobufAny",
          "title": "The actual changed settings"
        }
      },
      "description": "DidChangeConfigurationRequest represents a `workspace/didChangeConfiguration` notification\nparams."
    },
    "rpcDidChangeTextDocumentRequest": {
      "type": "object",
      "properties": {
        "textDocument": {
          "$ref": "#/definitions/protocolVersionedTextDocumentIdentifier",
          "description": "The document that did change. The version number points\nto the version after all provided content changes have\nbeen applied."
        },
        "contentChanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcTextDocumentContentChangeEvent"
          },
          "description": "The actual content changes. The content changes describe single state changes\nto the document. So if there are two content changes c1 (at array index 0) and\nc2 (at array index 1) for a document in state S then c1 moves the document from\nS to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed\non the state S'.\n\nTo mirror the content of a document using change events use the following approach:\n- start with the same initial content\n- apply the 'textDocument/didChange' notifications in the order you receive them.\n- apply the `TextDocumentContentChangeEvent`s in a single notification in the order\n  you receive them."
        }
      },
      "description": "DidChangeTextDocumentRequest is the parameters of a `textDocument/didChange` notification."
    },
    "rpcDidChangeWatchedFilesClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Did change watched files notification supports dynamic registration. Please note\nthat the current protocol doesn't support static configuration for file changes\nfrom the server side."
        }
      },
      "description": "DidChangeWatchedFilesClientCapabilities represents a client capabilities of\n`workspace/didChangeWatchedFiles` notification."
    },
    "rpcDidChangeWatchedFilesRequest": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcFileEvent"
          },
          "description": "The actual file events."
        }
      },
      "description": "DidChangeWatchedFilesRequest is the parameters of a `workspace/didChangeWatchedFiles`\nnotification."
    },
    "rpcDidChangeWorkspaceFoldersRequest": {
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/rpcWorkspaceFoldersChangeEvent",
          "description": "The actual workspace folder change event."
        }
      },
      "description": "DidChangeWorkspaceFoldersRequest represents a `workspace/didChangeWorkspaceFolders` notification\nparams."
    },
    "rpcDidCloseTextDocumentRequest": {
      "type": "object",
      "properties": {
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The document that was closed."
        }
      },
      "description": "DidCloseTextDocumentRequest is the parameters of a `textDocument/didClose` notification."
    },
    "rpcDidOpenTextDocumentRequest": {
      "type": "object",
      "properties": {
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentItem",
          "description": "The document that was opened."
        }
      },
      "description": "DidOpenTextDocumentRequest is the parameters of a `textDocument/didOpen` notification."
    },
    "rpcDidSaveTextDocumentRequest": {
      "type": "object",
      "properties": {
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The document that was saved."
        },
        "text": {
          "type": "string",
          "description": "Optional the content when saved. Depends on the includeText value\nwhen the save notification was requested."
        }
      },
      "description": "DidSaveTextDocumentRequest is the parameters of a `textDocument/didSave` notification."
    },
    "rpcDocumentColorClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether document color supports dynamic registration."
        }
      },
      "description": "DocumentColorClientCapabilities represents a client capabilities of `textDocument/documentColor`\nrequest."
    },
    "rpcDocumentColorOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "DocumentColorOptions represents a server capabilities option of documentColorProvider."
    },
    "rpcDocumentColorRegistrationOptions": {
      "type": "object",
      "properties": {
        "textDocumentRegistrationOptions": {
          "$ref": "#/definitions/protocolTextDocumentRegistrationOptions",
          "title": "extends"
        },
        "staticRegistrationOptions": {
          "$ref": "#/definitions/protocolStaticRegistrationOptions",
          "title": "extends"
        },
        "documentColorOptions": {
          "$ref": "#/definitions/rpcDocumentColorOptions",
          "title": "extends"
        }
      },
      "description": "DocumentColorRegistrationOptions represents a registration option of DocumentColor."
    },
    "rpcDocumentColorRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The text document."
        }
      },
      "description": "DocumentColorRequest is the parameters of a `textDocument/documentColor` request."
    },
    "rpcDocumentColorResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcDocumentColorResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcDocumentColorResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "DocumentColorResponse represents a DocumentColor response."
    },
    "rpcDocumentColorResponsePartialResult": {
      "type": "object",
      "properties": {
        "colorInformations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcColorInformation"
          }
        }
      }
    },
    "rpcDocumentColorResponseResult": {
      "type": "object",
      "properties": {
        "colorInformations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcColorInformation"
          }
        }
      }
    },
    "rpcDocumentFormattingClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether formatting supports dynamic registration."
        }
      },
      "description": "DocumentFormattingClientCapabilities represents a client capabilities of\n`textDocument/formatting` request."
    },
    "rpcDocumentFormattingOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "DocumentFormattingOptions represents a server capabilities option of documentFormattingProvider."
    },
    "rpcDocumentFormattingRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The document to format."
        },
        "options": {
          "$ref": "#/definitions/rpcFormattingOptions",
          "description": "The format options."
        }
      },
      "description": "DocumentFormattingRequest is the parameters of a `textDocument/formatting` request."
    },
    "rpcDocumentFormattingResponse": {
      "type": "object",
      "properties": {
        "textEdit": {
          "$ref": "#/definitions/protocolTextEdit"
        },
        "empty": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "DocumentFormattingResponse represents a DocumentFormatting response."
    },
    "rpcDocumentHighlight": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range this highlight applies to."
        },
        "kind": {
          "$ref": "#/definitions/DocumentHighlightDocumentHighlightKind",
          "description": "Optional. The highlight kind, default is DocumentHighlightKind.Text."
        }
      },
      "description": "DocumentHighlight is a document highlight is a range inside a text document which deserves\nspecial attention. Usually a document highlight is visualized by changing\nthe background color of its range."
    },
    "rpcDocumentHighlightClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether document highlight supports dynamic registration."
        }
      },
      "description": "DocumentHighlightClientCapabilities represents a client capabilities of\n`textDocument/documentHighlight` request."
    },
    "rpcDocumentHighlightOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "DocumentHighlightOptions represents a server capabilities option of documentHighlightProvider."
    },
    "rpcDocumentHighlightRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        }
      },
      "description": "DocumentHighlightRequest is the parameters of a `textDocument/documentHighlight` request."
    },
    "rpcDocumentHighlightsResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcDocumentHighlightsResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcDocumentHighlightsResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "DocumentHighlightsResponse represents a DocumentHighlights response."
    },
    "rpcDocumentHighlightsResponsePartialResult": {
      "type": "object",
      "properties": {
        "documentHighlights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcDocumentHighlight"
          }
        }
      }
    },
    "rpcDocumentHighlightsResponseResult": {
      "type": "object",
      "properties": {
        "documentHighlights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcDocumentHighlight"
          }
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcDocumentLink": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range this link applies to."
        },
        "target": {
          "$ref": "#/definitions/protocolDocumentURI",
          "description": "The uri this link points to. If missing a resolve request is sent later."
        },
        "tooltip": {
          "type": "string",
          "description": "The tooltip text when you hover over this link.\n\nIf a tooltip is provided, is will be displayed in a string that includes instructions on how to\ntrigger the link, such as `{0} (ctrl + click)`. The specific instructions vary depending on OS,\nuser settings, and localization.\n\n@since 3.15.0"
        },
        "data": {
          "$ref": "#/definitions/protobufAny",
          "description": "A data entry field that is preserved on a document link between a\nDocumentLinkRequest and a DocumentLinkResolveRequest."
        }
      },
      "description": "DocumentLink is a document link is a range in a text document that links to an internal or\nexternal resource, like another text document or a web site."
    },
    "rpcDocumentLinkClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether document link supports dynamic registration."
        },
        "tooltipSupport": {
          "type": "boolean",
          "description": "Optional. Whether the client supports the `tooltip` property on `DocumentLink`.\n\n@since 3.15.0"
        }
      },
      "description": "DocumentLinkClientCapabilities represents a client capabilities of `textDocument/documentLink`\nrequest."
    },
    "rpcDocumentLinkOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        },
        "resolveProvider": {
          "type": "boolean",
          "description": "Optional. Document links have a resolve provider as well."
        }
      },
      "description": "DocumentLinkOptions represents a server capabilities option of documentLinkProvider."
    },
    "rpcDocumentLinkRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The document to provide document links for."
        }
      },
      "description": "DocumentLinkRequest is the parameters of a `textDocument/documentLink` request."
    },
    "rpcDocumentLinkResolveRequest": {
      "type": "object",
      "properties": {
        "documentLink": {
          "$ref": "#/definitions/rpcDocumentLink"
        }
      },
      "description": "DocumentLinkResolveRequest represents a DocumentLinkResolveRequest request."
    },
    "rpcDocumentLinkResolveResponse": {
      "type": "object",
      "properties": {
        "documentLink": {
          "$ref": "#/definitions/rpcDocumentLink"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "DocumentLinkResolveResponse represents a DocumentLinkResolve response."
    },
    "rpcDocumentLinkResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcDocumentLinkResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcDocumentLinkResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "DocumentLinkResponse represents a DocumentLink response."
    },
    "rpcDocumentLinkResponsePartialResult": {
      "type": "object",
      "properties": {
        "documentLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcDocumentLink"
          }
        }
      }
    },
    "rpcDocumentLinkResponseResult": {
      "type": "object",
      "properties": {
        "documentLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcDocumentLink"
          }
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcDocumentOnTypeFormattingClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether on type formatting supports dynamic registration."
        }
      },
      "description": "DocumentOnTypeFormattingClientCapabilities represents a client capabilities of\n`textDocument/onTypeFormatting` request."
    },
    "rpcDocumentOnTypeFormattingOptions": {
      "type": "object",
      "properties": {
        "firstTriggerCharacter": {
          "type": "string",
          "description": "A character on which formatting should be triggered, like `}`."
        },
        "moreTriggerCharacter": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "More trigger characters."
        }
      },
      "description": "DocumentOnTypeFormattingOptions represents a server capabilities option of\ndocumentOnTypeFormattingProvider."
    },
    "rpcDocumentOnTypeFormattingRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "ch": {
          "type": "string",
          "description": "The character that has been typed."
        },
        "options": {
          "$ref": "#/definitions/rpcFormattingOptions",
          "description": "The format options."
        }
      },
      "description": "DocumentOnTypeFormattingRequest is the parameters of a `textDocument/onTypeFormatting` request."
    },
    "rpcDocumentOnTypeFormattingResponse": {
      "type": "object",
      "properties": {
        "textEdit": {
          "$ref": "#/definitions/protocolTextEdit"
        },
        "empty": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "DocumentOnTypeFormattingResponse represents a OnTypeFormatting response."
    },
    "rpcDocumentRangeFormattingClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether formatting supports dynamic registration."
        }
      },
      "description": "DocumentRangeFormattingClientCapabilities represents a client capabilities of\n`textDocument/rangeFormatting` request."
    },
    "rpcDocumentRangeFormattingOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "DocumentRangeFormattingOptions represents a server capabilities option of\ndocumentRangeFormattingProvider."
    },
    "rpcDocumentRangeFormattingRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The document to format."
        },
        "range": {
          "$ref": "#/definitions/protocolRange",
          "title": "The range to format"
        },
        "options": {
          "$ref": "#/definitions/rpcFormattingOptions",
          "title": "The format options"
        }
      },
      "description": "DocumentRangeFormattingRequest is the parameters of a `textDocument/rangeFormatting` request."
    },
    "rpcDocumentRangeFormattingResponse": {
      "type": "object",
      "properties": {
        "textEdit": {
          "$ref": "#/definitions/protocolTextEdit"
        },
        "empty": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "DocumentRangeFormattingResponse represents a DocumentRangeFormatting response."
    },
    "rpcDocumentSymbol": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this symbol. Will be displayed in the user interface and therefore must not be\nan empty string or a string only consisting of white spaces."
        },
        "detail": {
          "type": "string",
          "description": "More detail for this symbol, e.g the signature of a function."
        },
        "kind": {
          "$ref": "#/definitions/protocolrpcSymbolKind",
          "description": "The kind of this symbol."
        },
        "deprecated": {
          "type": "boolean",
          "description": "Optional. Indicates if this symbol is deprecated."
        },
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range enclosing this symbol not including leading/trailing whitespace but everything else\nlike comments. This information is typically used to determine if the clients cursor is\ninside the symbol to reveal in the symbol in the UI."
        },
        "selectionRange": {
          "$ref": "#/definitions/protocolRange",
          "description": "The range that should be selected and revealed when this symbol is being picked, e.g the name\nof a function. Must be contained by the `range`."
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcDocumentSymbol"
          },
          "description": "Children of this symbol, e.g. properties of a class."
        }
      },
      "title": "DocumentSymbol represents programming constructs like variables, classes, interfaces etc. that\nappear in a document. Document symbols can be hierarchical and they have two ranges: one that\nencloses its definition and one that points to its most interesting range, e.g. the range of an\nidentifier.\n(-- api-linter: core::0123::resource-annotation=disabled --)"
    },
    "rpcDocumentSymbolClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether document symbol supports dynamic registration."
        },
        "symbolKind": {
          "$ref": "#/definitions/rpcDocumentSymbolClientCapabilitiesSymbolKind",
          "description": "Specific capabilities for the `SymbolKind` in the `textDocument/documentSymbol` request."
        },
        "hierarchicalDocumentSymbolSupport": {
          "type": "boolean",
          "description": "Optional. The client supports hierarchical document symbols."
        }
      },
      "description": "DocumentSymbolClientCapabilities represents a client capabilities of\n`textDocument/documentSymbol` request."
    },
    "rpcDocumentSymbolClientCapabilitiesSymbolKind": {
      "type": "object",
      "properties": {
        "valueSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcDocumentSymbolClientCapabilitiesSymbolKind"
          },
          "description": "The symbol kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown.\n\nIf this property is not present the client only supports\nthe symbol kinds from `File` to `Array` as defined in\nthe initial version of the protocol."
        }
      }
    },
    "rpcDocumentSymbolOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "DocumentSymbolOptions represents a server capabilities option of documentSymbolProvider."
    },
    "rpcDocumentSymbolRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The text document."
        }
      },
      "description": "DocumentSymbolRequest is the parameters of a `textDocument/documentSymbol` request."
    },
    "rpcDocumentSymbolResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcDocumentSymbolResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcDocumentSymbolResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "DocumentSymbolResponse represents a DocumentSymbol response."
    },
    "rpcDocumentSymbolResponsePartialResult": {
      "type": "object",
      "properties": {
        "documentSymbols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcDocumentSymbol"
          }
        },
        "symbolInformations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcSymbolInformation"
          }
        }
      }
    },
    "rpcDocumentSymbolResponseResult": {
      "type": "object",
      "properties": {
        "documentSymbols": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcDocumentSymbol"
          }
        },
        "symbolInformations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcSymbolInformation"
          }
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcExecuteCommandClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Execute command supports dynamic registration."
        }
      },
      "description": "ExecuteCommandClientCapabilities represents a client capabilities of\n`workspace/executeCommand` request."
    },
    "rpcExecuteCommandOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The commands to be executed on the server"
        }
      }
    },
    "rpcExecuteCommandParams": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "command": {
          "type": "string",
          "description": "The identifier of the actual command handler."
        },
        "arguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "title": "Arguments that the command should be invoked with.\n(-- api-linter: core::0140::reserved-words=disabled --)"
        }
      },
      "description": "ExecuteCommandParams is the parameters of a `workspace/executeCommand` request."
    },
    "rpcExecuteCommandResponse": {
      "type": "object",
      "properties": {
        "any": {
          "$ref": "#/definitions/protobufAny"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "ExecuteCommandResponse represents a ExecuteCommand response."
    },
    "rpcFileEvent": {
      "type": "object",
      "properties": {
        "uri": {
          "$ref": "#/definitions/protocolDocumentURI",
          "description": "The file's URI."
        },
        "type": {
          "$ref": "#/definitions/FileEventFileChangeType",
          "description": "The change type."
        }
      },
      "description": "FileEvent an event describing a file change."
    },
    "rpcFoldingRange": {
      "type": "object",
      "properties": {
        "startLine": {
          "type": "integer",
          "format": "int32",
          "description": "The zero-based line number from where the folded range starts."
        },
        "startCharacter": {
          "type": "integer",
          "format": "int32",
          "description": "The zero-based character offset from where the folded range starts. If not defined, defaults to\nthe length of the start line."
        },
        "endLine": {
          "type": "integer",
          "format": "int32",
          "description": "The zero-based line number where the folded range ends."
        },
        "endCharacter": {
          "type": "integer",
          "format": "int32",
          "description": "The zero-based character offset before the folded range ends. If not defined, defaults to the\nlength of the end line."
        },
        "kind": {
          "$ref": "#/definitions/rpcFoldingRangeKind",
          "description": "Describes the kind of the folding range such as `comment` or `region`. The kind\nis used to categorize folding ranges and used by commands like 'Fold all comments'. See\n[FoldingRangeKind][FoldingRangeKind] for an enumeration of standardized kinds."
        }
      },
      "description": "FoldingRange represents a folding range."
    },
    "rpcFoldingRangeClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether implementation supports dynamic registration for folding range providers. If\nthis is set to `true` the client supports the new `FoldingRangeRegistrationOptions` return\nvalue for the corresponding server capability as well."
        },
        "rangeLimit": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum number of folding ranges that the client prefers to receive per document. The value\nserves as a hint, servers are free to follow the limit."
        },
        "lineFoldingOnly": {
          "type": "boolean",
          "description": "Optional. If set, the client signals that it only supports folding complete lines. If set,\nclient will ignore specified `startCharacter` and `endCharacter` properties in a FoldingRange."
        }
      },
      "description": "FoldingRangeClientCapabilities represents a client capabilities of `textDocument/foldingRange`\nrequest."
    },
    "rpcFoldingRangeKind": {
      "type": "string",
      "enum": [
        "FOLDING_RANGE_KIND_UNSPECIFIED",
        "COMMENT_RANGE",
        "IMPORTS_RANGE",
        "REGION_RANGE"
      ],
      "default": "FOLDING_RANGE_KIND_UNSPECIFIED",
      "description": "FoldingRangeKind Enum of known range kinds.\n\n - FOLDING_RANGE_KIND_UNSPECIFIED: Conventional default for enums. Do not use this.\n - COMMENT_RANGE: Folding range for a comment.\n\nstring: 'comment'\n - IMPORTS_RANGE: Folding range for a imports or includes.\n\nstring: 'imports'\n - REGION_RANGE: Folding range for a region (e.g. `#region`).\n\nstring: 'region'"
    },
    "rpcFoldingRangeOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "FoldingRangeOptions represents a server capabilities option of foldingRangeProvider."
    },
    "rpcFoldingRangeRegistrationOptions": {
      "type": "object",
      "properties": {
        "textDocumentRegistrationOptions": {
          "$ref": "#/definitions/protocolTextDocumentRegistrationOptions",
          "title": "extends"
        },
        "foldingRangeOptions": {
          "$ref": "#/definitions/rpcFoldingRangeOptions"
        },
        "staticRegistrationOptions": {
          "$ref": "#/definitions/protocolStaticRegistrationOptions",
          "title": "extends"
        }
      },
      "description": "FoldingRangeRegistrationOptions represents a registration option of FoldingRange."
    },
    "rpcFoldingRangeRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The text document."
        }
      },
      "description": "FoldingRangeRequest is the parameters of a `textDocument/foldingRange` request."
    },
    "rpcFoldingRangeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcFoldingRangeResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcFoldingRangeResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "FoldingRangeResponse represents a FoldingRange response."
    },
    "rpcFoldingRangeResponsePartialResult": {
      "type": "object",
      "properties": {
        "foldingRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcFoldingRange"
          }
        }
      }
    },
    "rpcFoldingRangeResponseResult": {
      "type": "object",
      "properties": {
        "foldingRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcFoldingRange"
          }
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcFormattingOptions": {
      "type": "object",
      "properties": {
        "tabSize": {
          "type": "integer",
          "format": "int32",
          "description": "Size of a tab in spaces."
        },
        "insertSpaces": {
          "type": "boolean",
          "description": "Prefer spaces over tabs."
        },
        "trimTrailingWhitespace": {
          "type": "boolean",
          "description": "Optional. Trim trailing whitespace on a line.\n\n@since 3.15.0"
        },
        "insertFinalNewline": {
          "type": "boolean",
          "description": "Optional. Insert a newline character at the end of the file if one does not exist.\n\n@since 3.15.0"
        },
        "trimFinalNewlines": {
          "type": "boolean",
          "description": "Optional. Trim all newlines after the final newline at the end of the file.\n\n@since 3.15.0"
        },
        "key": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/rpcFormattingOptionsValue"
          },
          "description": "Signature for further properties."
        }
      },
      "description": "FormattingOptions value-object describing what options formatting should use."
    },
    "rpcFormattingOptionsValue": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "(-- api-linter: core::0123::resource-annotation=disabled --)"
    },
    "rpcHover": {
      "type": "object",
      "properties": {
        "markedString": {
          "$ref": "#/definitions/rpcMarkedString"
        },
        "markedStrings": {
          "$ref": "#/definitions/HoverMarkedStrings"
        },
        "markupContent": {
          "$ref": "#/definitions/protocolMarkupContent"
        },
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "An optional range is a range inside a text document\nthat is used to visualize a hover, e.g. by changing the background color."
        }
      },
      "description": "Hover is the result of a hover request."
    },
    "rpcHoverClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether hover supports dynamic registration."
        },
        "contentFormat": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolMarkupKind"
          },
          "description": "Client supports the follow content formats for the content\nproperty. The order describes the preferred format of the client."
        }
      },
      "description": "HoverClientCapabilities represents a client capabilities of `textDocument/hover` request."
    },
    "rpcHoverOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "HoverOptions represents a server capabilities option of hoverProvider."
    },
    "rpcHoverRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        }
      },
      "description": "HoverRequest is the parameters of a `textDocument/hover` request."
    },
    "rpcHoverResponse": {
      "type": "object",
      "properties": {
        "hover": {
          "$ref": "#/definitions/rpcHover"
        },
        "empty": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "HoverResponse represents a Hover response."
    },
    "rpcImplementationClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `ImplementationRegistrationOptions` return value\nfor the corresponding server capability as well."
        },
        "linkSupport": {
          "type": "boolean",
          "description": "Optional. The client supports additional metadata in the form of definition links.\n\n@since 3.14.0"
        }
      },
      "description": "ImplementationClientCapabilities represents a client capabilities of\n`textDocument/implementation` request."
    },
    "rpcImplementationOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "ImplementationOptions represents a server capabilities option of implementationProvider."
    },
    "rpcImplementationRegistrationOptions": {
      "type": "object",
      "properties": {
        "textDocumentRegistrationOptions": {
          "$ref": "#/definitions/protocolTextDocumentRegistrationOptions",
          "title": "extends"
        },
        "implementationOptions": {
          "$ref": "#/definitions/rpcImplementationOptions",
          "title": "extends"
        },
        "staticRegistrationOptions": {
          "$ref": "#/definitions/protocolStaticRegistrationOptions",
          "title": "extends"
        }
      },
      "description": "ImplementationRegistrationOptions represents a registration option of Implementation."
    },
    "rpcImplementationRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        }
      },
      "description": "ImplementationRequest is the parameters of a `textDocument/implementation` request."
    },
    "rpcImplementationResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcImplementationResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcImplementationResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "ImplementationResponse represents a Implementation response."
    },
    "rpcImplementationResponsePartialResult": {
      "type": "object",
      "properties": {
        "locations": {
          "$ref": "#/definitions/rpcLocations"
        },
        "locationLinks": {
          "$ref": "#/definitions/rpcLocationLinks"
        }
      }
    },
    "rpcImplementationResponseResult": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/protocolLocation"
        },
        "locations": {
          "$ref": "#/definitions/rpcLocations"
        },
        "locationLinks": {
          "$ref": "#/definitions/rpcLocationLinks"
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcInitializeRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "processId": {
          "type": "integer",
          "format": "int32",
          "description": "Required. The process Id of the parent process that started\nthe server. Is null if the process has not been started by another process.\nIf the parent process is not alive then the server should exit (see exit notification) its\nprocess."
        },
        "clientInfo": {
          "$ref": "#/definitions/InitializeRequestClientInfo",
          "description": "Optional. Information about the client.\n\n@since 3.15.0"
        },
        "rootPath": {
          "type": "string",
          "description": "Optional. The rootPath of the workspace. Is null\nif no folder is open.\n\nUse rootUri instead of."
        },
        "rootUri": {
          "$ref": "#/definitions/protocolDocumentURI",
          "description": "The rootUri of the workspace. Is null if no\nfolder is open. If both `rootPath` and `rootUri` are set\n`rootUri` wins.\n\nnullable"
        },
        "initializationOptions": {
          "$ref": "#/definitions/protobufAny",
          "description": "Optional. User provided initialization options."
        },
        "capabilities": {
          "$ref": "#/definitions/rpcClientCapabilities",
          "title": "Required. The capabilities provided by the client (editor or tool)"
        },
        "trace": {
          "$ref": "#/definitions/protocolTraceValue",
          "description": "Optional. The initial trace setting. If omitted trace is disabled ('off')."
        },
        "workspaceFolders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcWorkspaceFolder"
          },
          "description": "Optional. The workspace folders configured in the client when the server starts.\nThis property is only available if the client supports workspace folders.\nIt can be `null` if the client supports workspace folders but none are\nconfigured.\n\n@since 3.6.0\n\nnullable"
        }
      },
      "description": "- For a request the response should be an error with code: -32002. The message can be picked by\nthe server.\n- Notifications should be dropped, except for the exit notification. This will allow the exit of\na server without an initialize request.\n\nUntil the server has responded to the initialize request with an InitializeResponse, the client\nmust not send any additional requests or notifications to the server.\n\nIn addition the server is not allowed to send any requests or notifications to the client until\nit has responded with an InitializeResponse, with the exception that during the initialize\nrequest the server is allowed to send the notifications window/showMessage, window/logMessage and\ntelemetry/event as well as the window/showMessageRequest request to the client.\n\nIn case the client sets up a progress token in the initialize params (e.g. property\nworkDoneToken) the server is also allowed to use that token (and only that token) using the\n$/progress notification sent from the server to the client.\n\nThe initialize request may only be sent once.",
      "title": "InitializeRequest is the sent as the first request from the client to the server. If the server\nreceives a request or notification before the initialize request it should act as follows:"
    },
    "rpcInitializeResponse": {
      "type": "object",
      "properties": {
        "capabilities": {
          "$ref": "#/definitions/rpcServerCapabilities",
          "description": "The capabilities the language server provides."
        },
        "serverInfo": {
          "$ref": "#/definitions/InitializeResponseServerInfo",
          "description": "Optional. Information about the server.\n\n@since 3.15.0"
        }
      },
      "description": "InitializeResponse result of Initialize."
    },
    "rpcInitializedRequest": {
      "type": "object",
      "description": "InitializedRequest is the initialized notification is sent from the client to the server after\nthe client received the result of the initialize request but before the client is sending any\nother request or notification to the server. The server can use the initialized notification for\nexample to dynamically register capabilities. The initialized notification may only be sent once."
    },
    "rpcInsertTextFormat": {
      "type": "string",
      "enum": [
        "INSERT_TEXT_FORMAT_UNSPECIFIED",
        "PLAINTEXT",
        "SNIPPET_FORMAT"
      ],
      "default": "INSERT_TEXT_FORMAT_UNSPECIFIED",
      "description": "InsertTextFormat defines whether the insert text in a completion item should be interpreted as\nplain text or a snippet.\n\n - INSERT_TEXT_FORMAT_UNSPECIFIED: Conventional default for enums. Do not use this.\n - PLAINTEXT: The primary text to be inserted is treated as a plain string.\n - SNIPPET_FORMAT: The primary text to be inserted is treated as a snippet.\n\nA snippet can define tab stops and placeholders with `$1`, `$2`\nand `${3:foo}`. `$0` defines the final tab stop, it defaults to\nthe end of the snippet. Placeholders with equal identifiers are linked,\nthat is typing in one will update others too.\n\n(-- Add `_FORMAT` suffix for avoid `Note that enum values use C++ scoping rules, meaning that\nenum values are siblings of their type, not children of it.` warning on\n[CompletionItemKind][CompletionItemKind]. --)"
    },
    "rpcLocationLinks": {
      "type": "object",
      "properties": {
        "locationLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcLocationLinks"
          }
        }
      },
      "description": "LocationLinks represents a list of LocationLink."
    },
    "rpcLocations": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcLocations"
          }
        }
      },
      "description": "Locations represents a list of Location."
    },
    "rpcLogMessageRequest": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/rpcMessageType",
          "description": "The message type. See [MessageType][MessageType]."
        },
        "message": {
          "type": "string",
          "title": "The actual message"
        }
      },
      "description": "LogMessageRequest represents a notification params."
    },
    "rpcLogTraceRequest": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The message to be logged."
        },
        "verbose": {
          "type": "string",
          "description": "Optional. Additional information that can be computed if the `trace` configuration is set to\n`'verbose'`."
        }
      },
      "description": "LogTraceRequest represents a `$/logTrace` notification params."
    },
    "rpcMarkedString": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "codeBlock": {
          "$ref": "#/definitions/MarkedStringCodeBlock"
        }
      },
      "description": "The pair of a language and a value is an equivalent to markdown:\n\n```${language}\n${value}\n```\n\nNote that markdown strings will be sanitized - that means html will be escaped.\n\nDeprecated: use MarkupContent instead.",
      "title": "MarkedString can be used to render human readable text. It is either a markdown string\nor a code-block that provides a language and a code snippet. The language identifier\nis semantically equal to the optional language identifier in fenced code blocks in GitHub\nissues. See\nhttps://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting"
    },
    "rpcMessageActionItem": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "A short title like 'Retry', 'Open Log' etc."
        }
      },
      "description": "MessageActionItem is the message action items to present."
    },
    "rpcMessageType": {
      "type": "string",
      "enum": [
        "MESSAGE_TYPE_UNSPECIFIED",
        "ERROR",
        "WARNING",
        "INFO",
        "LOG"
      ],
      "default": "MESSAGE_TYPE_UNSPECIFIED",
      "description": "MessageType represents a ShowMessage and ShowMessageRequestRequest message type.\n\n - MESSAGE_TYPE_UNSPECIFIED: Conventional default for enums. Do not use this.\n - ERROR: An error message.\n - WARNING: A warning message.\n - INFO: An information message.\n - LOG: A log message."
    },
    "rpcPartialResultParams": {
      "type": "object",
      "properties": {
        "partialResultToken": {
          "type": "integer",
          "format": "int32",
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client."
        }
      },
      "description": "PartialResultParams a parameter literal used to pass a partial result token."
    },
    "rpcPrepareRenameRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        }
      },
      "description": "PrepareRenameRequest is the parameters of a `textDocument/prepareRename` request."
    },
    "rpcPrepareRenameResponse": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/protocolRange"
        },
        "result": {
          "$ref": "#/definitions/rpcPrepareRenameResponseResult"
        },
        "empty": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "PrepareRenameResponse represents a PrepareRename response."
    },
    "rpcPrepareRenameResponseResult": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/protocolRange"
        },
        "placeHolder": {
          "type": "string"
        }
      }
    },
    "rpcProgressRequest": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/rpcProgressToken",
          "description": "Required. The progress token provided by the client or server."
        },
        "value": {
          "$ref": "#/definitions/protobufAny",
          "description": "Required. The progress data."
        }
      },
      "description": "ProgressRequest represents a progress notification params.\n\n@since 3.15.0"
    },
    "rpcProgressToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "integer",
          "format": "int32",
          "description": "Required."
        }
      },
      "description": "ProgressToken is the report progress token."
    },
    "rpcPublishDiagnosticsClientCapabilities": {
      "type": "object",
      "properties": {
        "relatedInformation": {
          "type": "boolean",
          "description": "Optional. Whether the clients accepts diagnostics with related information."
        },
        "tagSupport": {
          "$ref": "#/definitions/rpcPublishDiagnosticsClientCapabilitiesTagSupport",
          "description": "Client supports the tag property to provide meta data about a diagnostic.\nClients supporting tags have to handle unknown tags gracefully.\n\n@since 3.15.0"
        },
        "versionSupport": {
          "type": "boolean",
          "description": "Optional. Whether the client interprets the version property of the\n`textDocument/publishDiagnostics` notification's parameter.\n\n@since 3.15.0"
        }
      },
      "description": "PublishDiagnosticsClientCapabilities represents a client capabilities of\n`textDocument/publishDiagnostics` notification."
    },
    "rpcPublishDiagnosticsClientCapabilitiesTagSupport": {
      "type": "object",
      "properties": {
        "valueSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolDiagnosticTag"
          },
          "description": "The tags supported by the client."
        }
      }
    },
    "rpcPublishDiagnosticsRequest": {
      "type": "object",
      "properties": {
        "uri": {
          "$ref": "#/definitions/protocolDocumentURI",
          "description": "The URI for which diagnostic information is reported."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Optional the version number of the document the diagnostics are published for.\n\n@since 3.15.0"
        },
        "diagnostics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolDiagnostic"
          },
          "description": "An array of diagnostic information items."
        }
      },
      "description": "PublishDiagnosticsRequest is the parameters of a `textDocument/publishDiagnostics` notification."
    },
    "rpcReferenceClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether references supports dynamic registration."
        }
      },
      "description": "ImplementationClientCapabilities represents a client capabilities of `textDocument/references`\nrequest."
    },
    "rpcReferenceContext": {
      "type": "object",
      "properties": {
        "includeDeclaration": {
          "type": "boolean",
          "description": "Include the declaration of the current symbol."
        }
      },
      "title": "ReferenceContext whether the references supports include the declaration"
    },
    "rpcReferenceOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "ReferenceOptions represents a server capabilities option of referenceProvider."
    },
    "rpcReferenceRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "context": {
          "$ref": "#/definitions/rpcReferenceContext"
        }
      },
      "description": "ReferenceRequest is the parameters of a `textDocument/references` request."
    },
    "rpcReferenceResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcReferenceResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcReferenceResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "ReferenceResponse represents a Reference response."
    },
    "rpcReferenceResponsePartialResult": {
      "type": "object",
      "properties": {
        "locations": {
          "$ref": "#/definitions/rpcLocations"
        }
      }
    },
    "rpcReferenceResponseResult": {
      "type": "object",
      "properties": {
        "locations": {
          "$ref": "#/definitions/rpcLocations"
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcRenameClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether rename supports dynamic registration."
        },
        "prepareSupport": {
          "type": "boolean",
          "description": "Optional. Client supports testing for validity of rename operations\nbefore execution.\n\n@since version 3.12.0"
        }
      },
      "description": "RenameClientCapabilities represents a client capabilities of `textDocument/rename` request."
    },
    "rpcRenameOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        },
        "prepareProvider": {
          "type": "boolean",
          "description": "Optional. Renames should be checked and tested before being executed."
        }
      },
      "description": "RenameOptions represents a server capabilities option of renameProvider."
    },
    "rpcRenameRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "newName": {
          "type": "string",
          "description": "The new name of the symbol. If the given name is not valid the\nrequest must return a [ResponseError](#ResponseError) with an\nappropriate message set.\n\n(-- api-linter: core::0122::name-suffix=disabled --)"
        }
      },
      "description": "RenameRequest is the parameters of a `textDocument/rename` request."
    },
    "rpcRenameResponse": {
      "type": "object",
      "properties": {
        "workspaceEdit": {
          "$ref": "#/definitions/protocolWorkspaceEdit"
        },
        "empty": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "RenameResponse represents a Rename response."
    },
    "rpcSaveOptions": {
      "type": "object",
      "properties": {
        "includeText": {
          "type": "boolean",
          "description": "Optional. The client is supposed to include the content on save."
        }
      },
      "description": "SaveOptions represents a server capabilities option of textDocumentSync.save."
    },
    "rpcSelectionRange": {
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/protocolRange",
          "description": "The [range][Range] of this selection range."
        },
        "parent": {
          "$ref": "#/definitions/rpcSelectionRange",
          "description": "The parent selection range containing this range. Therefore `parent.range` must contain\n`this.range`."
        }
      },
      "description": "SelectionRange represents a range of selection."
    },
    "rpcSelectionRangeClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether implementatirn supports dynamic registration for selection range providers.\nIf this is set to `true` the client supports the new `SelectionRangeRegistrationOptions` return\nvalue for the corresponding server capability as well."
        }
      },
      "description": "FoldingRangeClientCapabilities represents a client capabilities of `textDocument/selectionRange`\nrequest."
    },
    "rpcSelectionRangeOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "SelectionRangeOptions represents a server capabilities option of selectionRangeProvider."
    },
    "rpcSelectionRangeRegistrationOptions": {
      "type": "object",
      "properties": {
        "selectionRangeOptions": {
          "$ref": "#/definitions/rpcSelectionRangeOptions"
        },
        "textDocumentRegistrationOptions": {
          "$ref": "#/definitions/protocolTextDocumentRegistrationOptions",
          "title": "extends"
        },
        "staticRegistrationOptions": {
          "$ref": "#/definitions/protocolStaticRegistrationOptions",
          "title": "extends"
        }
      },
      "description": "SelectionRangeRegistrationOptions represents a registration option of SelectionRange."
    },
    "rpcSelectionRangeRequest": {
      "type": "object",
      "properties": {
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        },
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The text document."
        },
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolPosition"
          },
          "description": "The positions inside the text document."
        }
      },
      "description": "SelectionRangeRequest is the parameters of a `textDocument/selectionRange` request."
    },
    "rpcSelectionRangeResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcSelectionRangeResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcSelectionRangeResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "SelectionRangeResponse represents a SelectionRangeResponse response."
    },
    "rpcSelectionRangeResponsePartialResult": {
      "type": "object",
      "properties": {
        "selectionRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcSelectionRange"
          }
        }
      }
    },
    "rpcSelectionRangeResponseResult": {
      "type": "object",
      "properties": {
        "selectionRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcSelectionRange"
          }
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcServerCapabilities": {
      "type": "object",
      "properties": {
        "textDocumentSyncOptions": {
          "$ref": "#/definitions/rpcTextDocumentSyncOptions"
        },
        "textDocumentSyncKind": {
          "$ref": "#/definitions/rpcTextDocumentSyncKind"
        },
        "completionProvider": {
          "$ref": "#/definitions/rpcCompletionOptions",
          "description": "Optional. The server provides completion support."
        },
        "enableHoverProvider": {
          "type": "boolean"
        },
        "hoverOptions": {
          "$ref": "#/definitions/rpcHoverOptions"
        },
        "signatureHelpProvider": {
          "$ref": "#/definitions/rpcSignatureHelpOptions",
          "description": "Optional. The server provides signature help support."
        },
        "enableDeclarationProvider": {
          "type": "boolean"
        },
        "declarationOptions": {
          "$ref": "#/definitions/rpcDeclarationOptions"
        },
        "declarationRegistrationOptions": {
          "$ref": "#/definitions/rpcDeclarationRegistrationOptions"
        },
        "enableDefinitionProvider": {
          "type": "boolean"
        },
        "definitionOptions": {
          "$ref": "#/definitions/rpcDefinitionOptions"
        },
        "enableTypeDefinitionProvider": {
          "type": "boolean"
        },
        "typeDefinitionOptions": {
          "$ref": "#/definitions/rpcTypeDefinitionOptions"
        },
        "typeDefinitionRegistrationOptions": {
          "$ref": "#/definitions/rpcTypeDefinitionRegistrationOptions"
        },
        "enableImplementationProvider": {
          "type": "boolean"
        },
        "implementationOptions": {
          "$ref": "#/definitions/rpcImplementationOptions"
        },
        "implementationRegistrationOptions": {
          "$ref": "#/definitions/rpcImplementationRegistrationOptions"
        },
        "enableReferencesProvider": {
          "type": "boolean"
        },
        "referenceOptions": {
          "$ref": "#/definitions/rpcReferenceOptions"
        },
        "enableDocumentHighlightProvider": {
          "type": "boolean"
        },
        "documentHighlightOptions": {
          "$ref": "#/definitions/rpcDocumentHighlightOptions"
        },
        "enableDocumentSymbolProvider": {
          "type": "boolean"
        },
        "documentSymbolOptions": {
          "$ref": "#/definitions/rpcDocumentSymbolOptions"
        },
        "enableCodeActionProvider": {
          "type": "boolean"
        },
        "codeActionOptions": {
          "$ref": "#/definitions/rpcCodeActionOptions"
        },
        "codelensProvider": {
          "$ref": "#/definitions/rpcCodeLensOptions",
          "description": "Optional. The server provides code lens."
        },
        "documentLinkProvider": {
          "$ref": "#/definitions/rpcDocumentLinkOptions",
          "description": "Optional. The server provides document link support."
        },
        "enableColorProvider": {
          "type": "boolean"
        },
        "documentColorOptions": {
          "$ref": "#/definitions/rpcDocumentColorOptions"
        },
        "documentColorRegistrationOptions": {
          "$ref": "#/definitions/rpcDocumentColorRegistrationOptions"
        },
        "enableDocumentFormattingProvider": {
          "type": "boolean"
        },
        "documentFormattingOptions": {
          "$ref": "#/definitions/rpcDocumentFormattingOptions"
        },
        "enableDocumentRangeFormattingProvider": {
          "type": "boolean"
        },
        "documentRangeFormattingOptions": {
          "$ref": "#/definitions/rpcDocumentRangeFormattingOptions"
        },
        "documentOnTypeFormattingProvider": {
          "$ref": "#/definitions/rpcDocumentOnTypeFormattingOptions",
          "description": "Optional. The server provides document formatting on typing."
        },
        "enableRenameProvider": {
          "type": "boolean"
        },
        "renameOptions": {
          "$ref": "#/definitions/rpcRenameOptions"
        },
        "enableFoldingRangeProvider": {
          "type": "boolean"
        },
        "foldingRangeOptions": {
          "$ref": "#/definitions/rpcFoldingRangeOptions"
        },
        "foldingRangeRegistrationOptions": {
          "$ref": "#/definitions/rpcFoldingRangeRegistrationOptions"
        },
        "executeCommandProvider": {
          "$ref": "#/definitions/rpcExecuteCommandOptions",
          "description": "Optional. The server provides execute command support."
        },
        "enableSelectionRangeProvider": {
          "type": "boolean"
        },
        "selectionRangeOptions": {
          "$ref": "#/definitions/rpcSelectionRangeOptions"
        },
        "selectionRangeRegistrationOptions": {
          "$ref": "#/definitions/rpcSelectionRangeRegistrationOptions"
        },
        "workspaceSymbolProvider": {
          "type": "boolean",
          "description": "The server provides workspace symbol support."
        },
        "workspace": {
          "$ref": "#/definitions/rpcServerCapabilitiesWorkspace",
          "description": "Optional."
        },
        "experimental": {
          "$ref": "#/definitions/protobufAny",
          "description": "Optional. Experimental server capabilities."
        }
      },
      "description": "ServerCapabilities is the signal of server capabilities."
    },
    "rpcServerCapabilitiesWorkspace": {
      "type": "object",
      "properties": {
        "workspaceFolders": {
          "$ref": "#/definitions/rpcWorkspaceFoldersServerCapabilities",
          "description": "Optional. The server supports workspace folder.\n\n@since 3.6.0"
        }
      },
      "title": "Workspace specific server capabilities"
    },
    "rpcSetTraceRequest": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/protocolTraceValue",
          "description": "The new value that should be assigned to the trace setting."
        }
      },
      "description": "SetTraceRequest represents a `$/setTrace` notification params."
    },
    "rpcShowMessageRequestParams": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/rpcMessageType",
          "description": "The message type. See [MessageType][MessageType]."
        },
        "message": {
          "type": "string",
          "description": "The actual message."
        }
      },
      "description": "ShowMessageRequestParams represents a `window/showMessage` notification params."
    },
    "rpcShowMessageRequestRequest": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/rpcMessageType",
          "description": "The message type. See [MessageType][MessageType]."
        },
        "message": {
          "type": "string",
          "description": "The actual message."
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcMessageActionItem"
          },
          "description": "The message action items to present."
        }
      },
      "description": "ShowMessageRequestRequest represents a `window/showMessageRequest` request params."
    },
    "rpcShowMessageResponse": {
      "type": "object",
      "properties": {
        "messageActionItem": {
          "$ref": "#/definitions/rpcMessageActionItem"
        },
        "empty": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "ShowMessageResponse represents a ShowMessage response."
    },
    "rpcSignatureHelp": {
      "type": "object",
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolrpcSignatureInformation"
          },
          "description": "One or more signatures. If no signatures are available the signature help\nrequest should return `null`."
        },
        "activeSignature": {
          "type": "integer",
          "format": "int32",
          "description": "The active signature. If omitted or the value lies outside the\nrange of `signatures` the value defaults to zero or is ignore if\nthe `SignatureHelp` as no signatures.\n\nWhenever possible implementors should make an active decision about\nthe active signature and shouldn't rely on a default value.\n\nIn future version of the protocol this property might become\nmandatory to better express this."
        },
        "activeParameter": {
          "type": "integer",
          "format": "int32",
          "description": "The active parameter of the active signature. If omitted or the value\nlies outside the range of `signatures[activeSignature].parameters`\ndefaults to 0 if the active signature has parameters. If\nthe active signature has no parameters it is ignored.\nIn future version of the protocol this property might become\nmandatory to better express the active parameter if the\nactive signature does have any."
        }
      },
      "description": "SignatureHelp represents the signature of something\ncallable. There can be multiple signature but only one\nactive and only one active parameter."
    },
    "rpcSignatureHelpClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether signature help supports dynamic registration."
        },
        "signatureInformation": {
          "$ref": "#/definitions/rpcSignatureHelpClientCapabilitiesSignatureInformation"
        },
        "contextSupport": {
          "type": "boolean",
          "description": "Optional. The client supports to send additional context information for a\n`textDocument/signatureHelp` request. A client that opts into\ncontextSupport will also support the `retriggerCharacters` on\n`SignatureHelpOptions`.\n\n@since 3.15.0"
        }
      },
      "description": "SignatureHelpClientCapabilities represents a client capabilities of `textDocument/signatureHelp`\nrequest."
    },
    "rpcSignatureHelpClientCapabilitiesSignatureInformation": {
      "type": "object",
      "properties": {
        "documentationFormat": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protocolMarkupKind"
          },
          "description": "Client supports the follow content formats for the documentation\nproperty. The order describes the preferred format of the client."
        },
        "parameterInformation": {
          "$ref": "#/definitions/SignatureHelpClientCapabilitiesSignatureInformationParameterInformation",
          "description": "Client capabilities specific to parameter information."
        },
        "activeParameterSupport": {
          "type": "boolean",
          "description": "Optional. The client support the `activeParameter` property on `SignatureInformation`\nliteral.\n\n@since 3.16.0 - proposed state"
        }
      },
      "description": "The client supports the following `SignatureInformation`\nspecific properties."
    },
    "rpcSignatureHelpContext": {
      "type": "object",
      "properties": {
        "triggerKind": {
          "$ref": "#/definitions/SignatureHelpContextSignatureHelpTriggerKind",
          "description": "Action that caused signature help to be triggered."
        },
        "triggerCharacter": {
          "type": "string",
          "description": "Character that caused signature help to be triggered.\n\nThis is undefined when `trigger_kind !== SignatureHelpTriggerKind.TriggerCharacter`"
        },
        "isRetrigger": {
          "type": "boolean",
          "description": "`true` if signature help was already showing when it was triggered.\n\nRetriggers occur when the signature help is already active and can be caused by actions such as\ntyping a trigger character, a cursor move, or document content changes."
        },
        "activeSignatureHelp": {
          "$ref": "#/definitions/rpcSignatureHelp",
          "description": "The currently active `SignatureHelp`.\n\nThe `activeSignatureHelp` has its `SignatureHelp.activeSignature` field updated based on\nthe user navigating through available signatures."
        }
      },
      "description": "Additional information about the context in which a signature help request was triggered.\n\n@since 3.15.0"
    },
    "rpcSignatureHelpOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        },
        "triggerCharacters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The characters that trigger signature help\nautomatically."
        },
        "retriggerCharacters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of characters that re-trigger signature help.\n\nThese trigger characters are only active when signature help is already showing. All trigger\ncharacters are also counted as re-trigger characters.\n\n@since 3.15.0"
        }
      },
      "description": "SignatureHelpOptions represents a server capabilities option of signatureHelpProvider."
    },
    "rpcSignatureHelpRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "context": {
          "$ref": "#/definitions/rpcSignatureHelpContext",
          "description": "@since 3.15.0",
          "title": "The signature help context. This is only available if the client specifies\nto send this using the client capability `textDocument.signatureHelp.contextSupport === true`"
        }
      },
      "description": "SignatureHelpRequest is the parameters of a `textDocument/signatureHelp` request."
    },
    "rpcSignatureHelpResponse": {
      "type": "object",
      "properties": {
        "signatureHelp": {
          "$ref": "#/definitions/rpcSignatureHelp"
        },
        "empty": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "SignatureHelpResponse represents a SignatureHelp response."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "rpcSymbolInformation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of this symbol."
        },
        "kind": {
          "$ref": "#/definitions/protocolrpcSymbolKind",
          "description": "The kind of this symbol."
        },
        "deprecated": {
          "type": "boolean",
          "description": "Optional. Indicates if this symbol is deprecated."
        },
        "location": {
          "$ref": "#/definitions/protocolLocation",
          "description": "The location of this symbol. The location's range is used by a tool\nto reveal the location in the editor. If the symbol is selected in the\ntool the range's start information is used to position the cursor. So\nthe range usually spans more then the actual symbol's name and does\nnormally include things like visibility modifiers.\n\nThe range doesn't have to denote a node range in the sense of a abstract\nsyntax tree. It can therefore not be used to re-construct a hierarchy of\nthe symbols."
        },
        "containerName": {
          "type": "string",
          "title": "Optional. The name of the symbol containing this symbol. This information is for\nuser interface purposes (e.g. to render a qualifier in the user interface\nif necessary). It can't be used to re-infer a hierarchy for the document\nsymbols.\n(-- api-linter: core::0123::resource-annotation=disabled\n    api-linter: core::0122::name-suffix=disabled --)"
        }
      },
      "title": "SymbolInformation represents information about programming constructs like variables, classes,\ninterfaces etc.\n(-- api-linter: core::0123::resource-annotation=disabled --)"
    },
    "rpcSymbolTag": {
      "type": "string",
      "enum": [
        "SYMBOL_TAG_UNSPECIFIED",
        "DEPRECATED_SYMBOL_TAG"
      ],
      "default": "SYMBOL_TAG_UNSPECIFIED",
      "description": "SymbolTag are extra annotations that tweak the rendering of a symbol.\n\n@since 3.15\n\n - SYMBOL_TAG_UNSPECIFIED: Conventional default for enums. Do not use this.\n - DEPRECATED_SYMBOL_TAG: Render a symbol as obsolete, usually using a strike-out."
    },
    "rpcTextDocumentClientCapabilities": {
      "type": "object",
      "properties": {
        "synchronization": {
          "$ref": "#/definitions/rpcTextDocumentSyncClientCapabilities"
        },
        "completion": {
          "$ref": "#/definitions/rpcCompletionClientCapabilities",
          "description": "Capabilities specific to the `textDocument/completion` request."
        },
        "hover": {
          "$ref": "#/definitions/rpcHoverClientCapabilities",
          "description": "Capabilities specific to the `textDocument/hover` request."
        },
        "signatureHelp": {
          "$ref": "#/definitions/rpcSignatureHelpClientCapabilities",
          "description": "Capabilities specific to the `textDocument/signatureHelp` request."
        },
        "declaration": {
          "$ref": "#/definitions/rpcDeclarationClientCapabilities",
          "description": "Capabilities specific to the `textDocument/declaration` request.\n\n@since 3.14.0"
        },
        "definition": {
          "$ref": "#/definitions/rpcDefinitionClientCapabilities",
          "description": "Capabilities specific to the `textDocument/definition` request."
        },
        "typeDefinition": {
          "$ref": "#/definitions/rpcTypeDefinitionClientCapabilities",
          "description": "Capabilities specific to the `textDocument/typeDefinition` request.\n\n@since 3.6.0"
        },
        "implementation": {
          "$ref": "#/definitions/rpcImplementationClientCapabilities",
          "description": "Capabilities specific to the `textDocument/implementation` request.\n\n@since 3.6.0"
        },
        "references": {
          "$ref": "#/definitions/rpcReferenceClientCapabilities",
          "description": "Capabilities specific to the `textDocument/references` request."
        },
        "documentHighlight": {
          "$ref": "#/definitions/rpcDocumentHighlightClientCapabilities",
          "description": "Capabilities specific to the `textDocument/documentHighlight` request."
        },
        "documentSymbol": {
          "$ref": "#/definitions/rpcDocumentSymbolClientCapabilities",
          "description": "Capabilities specific to the `textDocument/documentSymbol` request."
        },
        "codeAction": {
          "$ref": "#/definitions/rpcCodeActionClientCapabilities",
          "description": "Capabilities specific to the `textDocument/codeAction` request."
        },
        "codeLens": {
          "$ref": "#/definitions/rpcCodeLensClientCapabilities",
          "description": "Capabilities specific to the `textDocument/codeLens` request."
        },
        "documentLink": {
          "$ref": "#/definitions/rpcDocumentLinkClientCapabilities",
          "description": "Capabilities specific to the `textDocument/documentLink` request."
        },
        "colorProvider": {
          "$ref": "#/definitions/rpcDocumentColorClientCapabilities",
          "description": "Capabilities specific to the `textDocument/documentColor` and the\n`textDocument/colorPresentation` request.\n\n@since 3.6.0"
        },
        "formatting": {
          "$ref": "#/definitions/rpcDocumentFormattingClientCapabilities",
          "description": "Capabilities specific to the `textDocument/formatting` request."
        },
        "rangeFormatting": {
          "$ref": "#/definitions/rpcDocumentRangeFormattingClientCapabilities",
          "description": "Capabilities specific to the `textDocument/rangeFormatting` request."
        },
        "onTypeFormatting": {
          "$ref": "#/definitions/rpcDocumentOnTypeFormattingClientCapabilities",
          "description": "Capabilities specific to the `textDocument/onTypeFormatting` request."
        },
        "rename": {
          "$ref": "#/definitions/rpcRenameClientCapabilities",
          "description": "Capabilities specific to the `textDocument/rename` request."
        },
        "publishDiagnostics": {
          "$ref": "#/definitions/rpcPublishDiagnosticsClientCapabilities",
          "description": "Capabilities specific to the `textDocument/publishDiagnostics` notification."
        },
        "foldingRange": {
          "$ref": "#/definitions/rpcFoldingRangeClientCapabilities",
          "description": "Capabilities specific to the `textDocument/foldingRange` request.\n\n@since 3.10.0"
        },
        "selectionRange": {
          "$ref": "#/definitions/rpcSelectionRangeClientCapabilities",
          "description": "Capabilities specific to the `textDocument/selectionRange` request.\n\n@since 3.15.0"
        }
      },
      "description": "TextDocumentClientCapabilities define capabilities the editor / tool provides on text documents."
    },
    "rpcTextDocumentContentChangeEvent": {
      "type": "object",
      "properties": {
        "contentChangeEvent": {
          "$ref": "#/definitions/TextDocumentContentChangeEventContentChangeEvent"
        },
        "text": {
          "type": "string",
          "description": "The new text of the whole document."
        }
      },
      "description": "TextDocumentContentChangeEvent an event describing a change to a text document. If range and\nrangeLength are omitted the new text is considered to be the full content of the document."
    },
    "rpcTextDocumentSaveReason": {
      "type": "string",
      "enum": [
        "TEXT_DOCUMENT_SAVE_REASON_UNSPECIFIED",
        "MANUAL",
        "AFTERDELAY",
        "FOCUSOUT"
      ],
      "default": "TEXT_DOCUMENT_SAVE_REASON_UNSPECIFIED",
      "description": "TextDocumentSaveReason represents reasons why a text document is saved.\n\n - TEXT_DOCUMENT_SAVE_REASON_UNSPECIFIED: Conventional default for enums. Do not use this.\n - MANUAL: Manually triggered, e.g. by the user pressing save, by starting debugging,\nor by an API call.\n - AFTERDELAY: Automatic after a delay.\n - FOCUSOUT: When the editor lost focus."
    },
    "rpcTextDocumentSyncClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether text document synchronization supports dynamic registration."
        },
        "willSave": {
          "type": "boolean",
          "description": "Optional. The client supports sending will save notifications."
        },
        "willSaveWaitUntil": {
          "type": "boolean",
          "description": "Optional. The client supports sending a will save request and\nwaits for a response providing text edits which will\nbe applied to the document before it is saved."
        },
        "didSave": {
          "type": "boolean",
          "description": "Optional. The client supports did save notifications."
        }
      },
      "description": "TextDocumentSyncClientCapabilities represents a client capabilities of `textDocument/didXXX`\nnotification."
    },
    "rpcTextDocumentSyncKind": {
      "type": "string",
      "enum": [
        "NONE",
        "FULL",
        "INCREMENTAL"
      ],
      "default": "NONE",
      "description": "- NONE: Documents should not be synced at all.\n - FULL: Documents are synced by always sending the full content\nof the document.\n - INCREMENTAL: Documents are synced by sending the full content on open.\nAfter that only incremental updates to the document are\nsend.",
      "title": "TextDocumentSyncKind defines how the host (editor) should sync document changes to the language\nserver.\n(-- api-linter: core::0126::unspecified=disabled --)"
    },
    "rpcTextDocumentSyncOptions": {
      "type": "object",
      "properties": {
        "openClose": {
          "type": "boolean",
          "description": "Optional. Open and close notifications are sent to the server. If omitted open close\nnotification should not be sent."
        },
        "change": {
          "$ref": "#/definitions/rpcTextDocumentSyncKind",
          "description": "Optional. Change notifications are sent to the server. See\n[TextDocumentSyncKind][TextDocumentSyncKind]. If omitted it defaults to\nTextDocumentSyncKind.None."
        },
        "willSave": {
          "type": "boolean",
          "description": "Optional. If present will save notifications are sent to the server. If omitted the\nnotification should not be sent."
        },
        "willSaveWaitUntil": {
          "type": "boolean",
          "description": "Optional. If present will save wait until requests are sent to the server. If omitted the\nrequest should not be sent."
        },
        "enable": {
          "type": "boolean"
        },
        "saveOptions": {
          "$ref": "#/definitions/rpcSaveOptions"
        }
      },
      "description": "TextDocumentSyncOptions represents a server capabilities option of textDocumentSync."
    },
    "rpcTypeDefinitionClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `TypeDefinitionRegistrationOptions` return value\nfor the corresponding server capability as well."
        },
        "linkSupport": {
          "type": "boolean",
          "description": "Optional. The client supports additional metadata in the form of definition links.\n\n@since 3.14.0"
        }
      },
      "description": "TypeDefinitionClientCapabilities represents a client capabilities of\n`textDocument/typeDefinition` request."
    },
    "rpcTypeDefinitionOptions": {
      "type": "object",
      "properties": {
        "workDoneProgressOptions": {
          "$ref": "#/definitions/protocolWorkDoneProgressOptions",
          "title": "extends"
        }
      },
      "description": "TypeDefinitionOptions represents a server capabilities option of typeDefinitionProvider."
    },
    "rpcTypeDefinitionRegistrationOptions": {
      "type": "object",
      "properties": {
        "textDocumentRegistrationOptions": {
          "$ref": "#/definitions/protocolTextDocumentRegistrationOptions",
          "title": "extends"
        },
        "typeDefinitionOptions": {
          "$ref": "#/definitions/rpcTypeDefinitionOptions",
          "title": "extends"
        },
        "staticRegistrationOptions": {
          "$ref": "#/definitions/protocolStaticRegistrationOptions",
          "title": "extends"
        }
      },
      "description": "TypeDefinitionRegistrationOptions represents a registration option of TypeDefinition."
    },
    "rpcTypeDefinitionRequest": {
      "type": "object",
      "properties": {
        "textDocumentPositionParams": {
          "$ref": "#/definitions/protocolTextDocumentPositionParams",
          "title": "extends"
        },
        "workDoneProgressParams": {
          "$ref": "#/definitions/rpcWorkDoneProgressParams",
          "title": "extends"
        },
        "partialResultParams": {
          "$ref": "#/definitions/rpcPartialResultParams",
          "title": "extends"
        }
      },
      "description": "TypeDefinitionRequest is the parameters of a `textDocument/typeDefinition` request."
    },
    "rpcTypeDefinitionResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/rpcTypeDefinitionResponseResult"
        },
        "partialResult": {
          "$ref": "#/definitions/rpcTypeDefinitionResponsePartialResult"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "TypeDefinitionResponse represents a TypeDefinition response."
    },
    "rpcTypeDefinitionResponsePartialResult": {
      "type": "object",
      "properties": {
        "locations": {
          "$ref": "#/definitions/rpcLocations"
        },
        "locationLinks": {
          "$ref": "#/definitions/rpcLocationLinks"
        }
      }
    },
    "rpcTypeDefinitionResponseResult": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/protocolLocation"
        },
        "locations": {
          "$ref": "#/definitions/rpcLocations"
        },
        "locationLinks": {
          "$ref": "#/definitions/rpcLocationLinks"
        },
        "empty": {
          "type": "string"
        }
      }
    },
    "rpcWillSaveTextDocumentRequest": {
      "type": "object",
      "properties": {
        "textDocument": {
          "$ref": "#/definitions/protocolTextDocumentIdentifier",
          "description": "The document that will be saved."
        },
        "reason": {
          "$ref": "#/definitions/rpcTextDocumentSaveReason",
          "description": "The [TextDocumentSaveReason][TextDocumentSaveReason]."
        }
      },
      "description": "WillSaveTextDocumentRequest is the parameters send in a will save `textDocument/willSave`\nnotification."
    },
    "rpcWillSaveTextDocumentResponse": {
      "type": "object",
      "properties": {
        "textEdits": {
          "$ref": "#/definitions/protocolrpcTextEdits"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "WillSaveTextDocumentResponse represents a WillSaveTextDocument response."
    },
    "rpcWorkDoneProgressCancelRequest": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/rpcProgressToken",
          "description": "The token to be used to report progress."
        }
      },
      "description": "WorkDoneProgressCancelRequest represents a canceling a work done progress notification params."
    },
    "rpcWorkDoneProgressCreateRequest": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/rpcProgressToken",
          "description": "The token to be used to report progress."
        }
      },
      "description": "WorkDoneProgressCreateRequest represents a Creating Work Done Progress request params."
    },
    "rpcWorkDoneProgressParams": {
      "type": "object",
      "properties": {
        "workDoneToken": {
          "$ref": "#/definitions/rpcProgressToken",
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "description": "WorkDoneProgressParams a parameter literal used to pass a work done progress token."
    },
    "rpcWorkspaceFolder": {
      "type": "object",
      "properties": {
        "uri": {
          "$ref": "#/definitions/protocolDocumentURI",
          "description": "The associated URI for this workspace folder."
        },
        "name": {
          "type": "string",
          "description": "The name of the workspace folder. Used to refer to this\nworkspace folder in the user interface."
        }
      },
      "title": "WorkspaceFolder represents a workspace root folder.\n(-- api-linter: core::0123::resource-annotation=disabled --)"
    },
    "rpcWorkspaceFoldersChangeEvent": {
      "type": "object",
      "properties": {
        "added": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcWorkspaceFolder"
          },
          "description": "The array of added workspace folders."
        },
        "removed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcWorkspaceFolder"
          },
          "description": "The array of the removed workspace folders."
        }
      },
      "description": "WorkspaceFoldersChangeEvent is the workspace folder change event."
    },
    "rpcWorkspaceFoldersResponse": {
      "type": "object",
      "properties": {
        "workspaceFolders": {
          "$ref": "#/definitions/WorkspaceFoldersResponseWorkspaceFolders"
        },
        "empty": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "WorkspaceFoldersResponse represents a WorkspaceFolders response."
    },
    "rpcWorkspaceFoldersServerCapabilities": {
      "type": "object",
      "properties": {
        "supported": {
          "type": "boolean",
          "title": "Optional. The server has support for workspace folders"
        },
        "id": {
          "type": "string",
          "description": "The id of registered notification."
        },
        "enable": {
          "type": "boolean",
          "description": "Whether the enable change notifications."
        }
      },
      "description": "WorkspaceFoldersServerCapabilities is the an additional property of\nInitializeRequest.workspaceFolders."
    },
    "rpcWorkspaceSymbolClientCapabilities": {
      "type": "object",
      "properties": {
        "dynamicRegistration": {
          "type": "boolean",
          "description": "Optional. Symbol request supports dynamic registration."
        },
        "symbolKind": {
          "$ref": "#/definitions/rpcWorkspaceSymbolClientCapabilitiesSymbolKind",
          "description": "Specific capabilities for the `SymbolKind` in the `workspace/symbol` request."
        }
      },
      "description": "WorkspaceSymbolClientCapabilities represents a client capabilities of\n`workspace/symbol` request."
    },
    "rpcWorkspaceSymbolClientCapabilitiesSymbolKind": {
      "type": "object",
      "properties": {
        "valueSet": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rpcWorkspaceSymbolClientCapabilitiesSymbolKind"
          },
          "description": "The symbol kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown.\n\nIf this property is not present the client only supports\nthe symbol kinds from `File` to `Array` as defined in\nthe initial version of the protocol."
        }
      }
    },
    "rpcWorkspaceSymbolsResponse": {
      "type": "object",
      "properties": {
        "symbolInformations": {
          "$ref": "#/definitions/WorkspaceSymbolsResponseSymbolInformations"
        },
        "error": {
          "$ref": "#/definitions/protocolError"
        }
      },
      "description": "WorkspaceSymbolsResponse represents a WorkspaceSymbols response."
    },
    "uriURI": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        }
      },
      "description": "URI Uniform Resource Identifier (URI) https://tools.ietf.org/html/rfc3986.\n\nThis class is a simple parser which creates the basic component parts\n(http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\nand encoding.\n\n       foo://example.com:8042/over/there?name=ferret#nose\n       \\_/   \\______________/\\_________/ \\_________/ \\__/\n        |           |            |            |        |\n     scheme     authority       path        query   fragment\n        |   _____________________|__\n       / \\ /                        \\\n       urn:example:animal:ferret:nose"
    }
  }
}
